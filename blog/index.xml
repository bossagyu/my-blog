<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blog on Bossagyu Blog</title><link>https://bossagyu.com/blog/</link><description>Recent content in Blog on Bossagyu Blog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>©2023 Bossagyu</copyright><lastBuildDate>Thu, 07 Dec 2023 09:37:00 +0900</lastBuildDate><atom:link href="https://bossagyu.com/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>LINE Messaging APIの登録と使い方</title><link>https://bossagyu.com/blog/002-line-messaging-api/</link><pubDate>Thu, 07 Dec 2023 09:37:00 +0900</pubDate><guid>https://bossagyu.com/blog/002-line-messaging-api/</guid><description>概要 LINEのBotを利用してアプリケーションを作ってみようと考えたのでまずはBotを利用できる状態にする。
本ページでは一番最初にLINE Message APIの登録の方法とcurlでコマンドラインからメッセージを送る方法を紹介します。
Messaging APIを利用する LINE Developers にログインしてプロバイダーを作成する。
プロバイダーとは(説明)
LINE Developersサイトでは、サービスを提供し、ユーザーの情報を取得する開発者個人、 企業、または団体等をサービス提供者（LINEミニアプリではサービス事業主）と呼びます。なので好きな文字列を入れる。
そのまま新規チャンネルを作成する。 このまま作成ボタンを押すと新規チャンネルが作成される
コマンドラインからポストをする Messaging API設定からQRコードを読みこんで友達追加する。
Messaging API設定から「チャンネルアクセストークン(長期)」を取得 チャンネル基本設定から「あなたのユーザーID」取得
TOKEN=&amp;#34;&amp;lt;チャンネルアクセストークン(長期)&amp;gt;&amp;#34; ID=&amp;#34;&amp;lt;あなたのユーザーID&amp;gt;&amp;#34; UUID=$(uuidgen | tr &amp;#34;[:upper:]&amp;#34; &amp;#34;[:lower:]&amp;#34;) curl -v -X POST https://api.line.me/v2/bot/message/push \ -H &amp;#39;Content-Type: application/json&amp;#39; \ -H &amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; \ -H &amp;#34;X-Line-Retry-Key: &amp;#34; \ -d &amp;#34;{ \&amp;#34;to\&amp;#34;: \&amp;#34;${ID}\&amp;#34;, \&amp;#34;messages\&amp;#34;:[ { \&amp;#34;type\&amp;#34;:\&amp;#34;text\&amp;#34;, \&amp;#34;text\&amp;#34;:\&amp;#34;Hello, world1\&amp;#34; } ] }&amp;#34;レスポンスが帰ってきて、LINEのトーク画面でBotからの投稿が行われていれば成功！</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>LINEのBotを利用してアプリケーションを作ってみようと考えたのでまずはBotを利用できる状態にする。<br>
本ページでは一番最初にLINE Message APIの登録の方法とcurlでコマンドラインからメッセージを送る方法を紹介します。</p>
<h2 id="messaging-apiを利用する">Messaging APIを利用する</h2>
<p><a href="https://developers.line.biz/console/">LINE Developers</a> にログインしてプロバイダーを作成する。</p>
<p><img src="/blog/img-002-001.png" alt="img-002-001.png"></p>
<p>プロバイダーとは(<a href="https://developers.line.biz/ja/docs/line-developers-console/overview/#provider">説明</a>)</p>





<pre tabindex="0"><code>LINE Developersサイトでは、サービスを提供し、ユーザーの情報を取得する開発者個人、
企業、または団体等をサービス提供者（LINEミニアプリではサービス事業主）と呼びます。</code></pre><p>なので好きな文字列を入れる。</p>
<p>そのまま新規チャンネルを作成する。
<img src="/blog/img-002-002.png" alt="img-002-002.png"></p>
<p>このまま作成ボタンを押すと新規チャンネルが作成される</p>
<p><img src="/blog/img-002-003.png" alt="img-002-003.png"></p>
<h1 id="コマンドラインからポストをする">コマンドラインからポストをする</h1>
<p>Messaging API設定からQRコードを読みこんで友達追加する。</p>
<p>Messaging API設定から「チャンネルアクセストークン(長期)」を取得
チャンネル基本設定から「あなたのユーザーID」取得</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;チャンネルアクセストークン(長期)&gt;&#34;</span>
</span></span><span style="display:flex;"><span>ID<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;あなたのユーザーID&gt;&#34;</span>
</span></span><span style="display:flex;"><span>UUID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>uuidgen | tr <span style="color:#e6db74">&#34;[:upper:]&#34;</span> <span style="color:#e6db74">&#34;[:lower:]&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>curl -v -X POST https://api.line.me/v2/bot/message/push <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#39;Content-Type: application/json&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#34;Authorization: Bearer </span><span style="color:#e6db74">${</span>TOKEN<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#34;X-Line-Retry-Key: &#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-d <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    \&#34;to\&#34;: \&#34;</span><span style="color:#e6db74">${</span>ID<span style="color:#e6db74">}</span><span style="color:#e6db74">\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    \&#34;messages\&#34;:[
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            \&#34;type\&#34;:\&#34;text\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            \&#34;text\&#34;:\&#34;Hello, world1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#34;</span></span></span></code></pre></div><p>レスポンスが帰ってきて、LINEのトーク画面でBotからの投稿が行われていれば成功！</p>
]]></content:encoded></item><item><title>Hugo + Netlify + Githubでブログを公開する</title><link>https://bossagyu.com/blog/001-hugo-netlify-build/</link><pubDate>Sat, 02 Dec 2023 00:59:37 +0900</pubDate><guid>https://bossagyu.com/blog/001-hugo-netlify-build/</guid><description>概要 Hugoで作ったサイトをGithubで管理、Netlifyでビルドした手順を0から作れるよう記載します。
この方式にすると手元でMarkDownで書いたブログをGithubにPushするだけで簡単に公開できるようになります。
流れ Hugoでサイトを生成 Githubにプッシュ Netlifyでデプロイ Hugoで静的サイトを生成 まずはHugoをインストールします。
brew install hugoblogの雛形を作成します。
hugo new site my-blogブログに適応するテーマをsubmoduleとして追加します。
cd my-blog git init # テーマをgithubのsubmoduleとして追加 git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/anankehugo.tomlに記載することでテーマを適応する。
echo &amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34; &amp;gt;&amp;gt; config.tomlサーバを起動させます。
hugo server起動ログの Web Server is available at http://localhost:51517/ (bind address 127.0.0.1) のような記述の http://localhost:51517/ にアクセスすればローカルに起動した静的サイトが閲覧できます。
Tips Hugoのテーマを変えたい場合は、Hugo Themas から好きなものを選んで変えてください。 これは後からでも変えられるのでとりあえずNetlifyでビルドするところまで走り切るのがおすすめ。 Tomlファイルの書き方は Configure Hugo に記載されています。 Githubにpush Github にリポジトリを作成。 作成後以下のコマンドを実行し、サイトをpushします。
cd my-blog echo .hugo_build.lock &amp;gt;&amp;gt; .gitignore git add . git commit -m &amp;#34;first commit&amp;#34; git branch -M main # &amp;lt;user name&amp;gt;は自分のユーザー名に置き換えてください。 # 今回はmy-blogというリポジトリを作成している例です。 git remote add origin git@github.</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>Hugoで作ったサイトをGithubで管理、Netlifyでビルドした手順を0から作れるよう記載します。<br>
この方式にすると手元でMarkDownで書いたブログをGithubにPushするだけで簡単に公開できるようになります。</p>
<h2 id="流れ">流れ</h2>
<ol>
<li>Hugoでサイトを生成</li>
<li>Githubにプッシュ</li>
<li>Netlifyでデプロイ</li>
</ol>
<h2 id="hugoで静的サイトを生成">Hugoで静的サイトを生成</h2>
<p>まずはHugoをインストールします。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>brew install hugo</span></span></code></pre></div><p>blogの雛形を作成します。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>hugo new site my-blog</span></span></code></pre></div><p>ブログに適応するテーマをsubmoduleとして追加します。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd my-blog
</span></span><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># テーマをgithubのsubmoduleとして追加</span>
</span></span><span style="display:flex;"><span>git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke</span></span></code></pre></div><p>hugo.tomlに記載することでテーマを適応する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;theme = &#39;ananke&#39;&#34;</span> &gt;&gt; config.toml</span></span></code></pre></div><p>サーバを起動させます。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>hugo server</span></span></code></pre></div><p>起動ログの <code>Web Server is available at http://localhost:51517/ (bind address 127.0.0.1)</code> のような記述の <code>http://localhost:51517/</code> にアクセスすればローカルに起動した静的サイトが閲覧できます。</p>
<h3 id="tips">Tips</h3>
<ul>
<li>Hugoのテーマを変えたい場合は、<a href="https://themes.gohugo.io/">Hugo Themas</a> から好きなものを選んで変えてください。
<ul>
<li>これは後からでも変えられるのでとりあえずNetlifyでビルドするところまで走り切るのがおすすめ。</li>
</ul>
</li>
<li>Tomlファイルの書き方は <a href="https://gohugo.io/getting-started/configuration/">Configure Hugo</a> に記載されています。</li>
</ul>
<!-- raw HTML omitted -->
<h2 id="githubにpush">Githubにpush</h2>
<p><a href="https://github.com/">Github</a> にリポジトリを作成。<!-- raw HTML omitted -->
作成後以下のコマンドを実行し、サイトをpushします。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd my-blog
</span></span><span style="display:flex;"><span>echo .hugo_build.lock &gt;&gt; .gitignore
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;first commit&#34;</span>
</span></span><span style="display:flex;"><span>git branch -M main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># &lt;user name&gt;は自分のユーザー名に置き換えてください。</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 今回はmy-blogというリポジトリを作成している例です。</span>
</span></span><span style="display:flex;"><span>git remote add origin git@github.com:&lt;user name&gt;/my-blog
</span></span><span style="display:flex;"><span>git push -u origin main</span></span></code></pre></div><p>pushが完了するとGithubのUI上でソースコードが閲覧できる状態になっています。</p>
<h2 id="netlifyでデプロイ">Netlifyでデプロイ</h2>
<p><a href="https://www.netlify.com/">netlify</a> へアクセスし、デプロイを行う。<br>
<a href="https://gohugo.io/hosting-and-deployment/hosting-on-netlify/">Hugoの公式で案内</a> があるのでこちらを参考に連携を行う。</p>
<p>指示に従いデプロイを完了すると以下のようにDeployの結果が <code>published</code> になる。</p>
<p><img src="/blog/img-001-001.png" alt="img-001-001.png"></p>
<p>サイト上に表示されたURLをクリックするとデプロイされたサイトにアクセスできる。
<img src="/blog/img-001-002.png" alt="img-001-002.png"></p>
<p>これでデプロイまではおしまい。<br>
以降は変更を加えてmainにpushするだけで自動デプロイが走り、サイトの内容が更新されるようになる。</p>
]]></content:encoded></item></channel></rss>