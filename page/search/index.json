[{"content":"概要 AWS API GatewayとLambdaを連携させることで、API GatewayからLambdaを呼び出すことができます。 本記事AWS API GatewayとLambdaを連携させる方法を紹介します。\n前提条件 Lambda関数については作成されていることを前提としています。 作成していない場合は、下記記事を参考に作成してください。\nAWS Lambdaを作成する方法 どの形式でAPI GatewayとLambdaを連携させるかを考える API GatewayとLambdaを連携させるに当たってどのような方式で連携させるか以下の2点について考える必要があります。\nAPI Gatewayのリクエスト形式について プロキシ統合が非プロキシ統合か API Gatewayのリクエスト形式について 以下の形式から選択できます。\nREST API HTTP API WebSocket API この内、REST APIの形式で利用する場合は、REST APIかHTTP APIのどちらかを選択することになります。\nREST APIの方が機能が多いですが、HTTP APIと比べコストがかかります。\n特に複雑なことをしないのであればHTTP APIを選択するのが良いと思います。\n詳細な比較内容については公式ドキュメントで公開されているのでそちらを参照してください。\nプロキシ統合が非プロキシ統合か プロキシ統合を利用することで、Lambdaから返される値のフォーマットが固定化されます。 基本的にはプロキシ統合を利用することをおすすめします。\nAPI Gateway で Lambda プロキシ統合を設定する 設定 Lambda関数を作成したら、トリガー追加を選択します。\nAPI Gatewayを選択します。\nトリガーを追加の画面で以下のように設定を行います。 設定がうまくいくと以下のような画面になります。\nAPI endpoint に記載のエンドポイントにcurlなどでアクセスするとLambda関数が実行されます。\n1 2 3 $ curl https://xxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/default/apigateway-get-sample \u0026#34;Hello from Lambda!\u0026#34;% まとめ 本記事ではAWS API GatewayとLambdaを連携させる方法を紹介しました。 API Gatewayと連携させることで外部から任意のタイミングでLambda関数を呼び出すことができるようになります。\n","date":"2024-01-13T18:06:52+09:00","permalink":"https://bossagyu.com/blog/014-aws-apigateway-lambda/","title":"AWS API GatewayとLambdaを連携させる方法"},{"content":"概要 良いプロダクト戦略の作り方について、「良い戦略、悪い戦略」という書籍をベースにまとめました。\n背景 業務でプロダクトオーナーとして、前プロダクトオーナーからプロダクトを引き継ぎました。\n引き継いだプロダクトにはプロダクト戦略がなく、プロダクトの方向性が定まっていない状態であったため、今後プロダクトをどうするかを含めて、プロダクト戦略を作成しました。\nプロダクト戦略を作成するにあたって、そもそも「戦略」というものが人によって様々な意味に解釈されており、なんでも「戦略」という言葉を使ってしまう傾向があると常々感じていました。 そこで、プロダクト戦略を作成するにあたって、どのような戦略を作成すれば良いのかを知るために、「良い戦略、悪い戦略」を読みました。\n良い戦略とは 良い戦略とは、こちらの打つ手の効果が一気に高まるようなポイントを見つけ、そこに狙いを絞って手持ちのリソースを集中させることで、効果を最大化することができる戦略です。 戦略とは組織が前に進むためにどのようにしたら良いかを示すものである必要があります。\n良い戦略は、以下の3つの基本構造を持っています。\n診断 基本方針 行動 診断 診断とは、状況を診断し取り組むべき課題を見極めることです。\n良い診断は死活的に重要な問題点をより分け、複雑に絡み合った状況を明快に整理することができます。\n戦略を立てる作業の多くは、今何が置きているのかを洗い出すことにあります。まずは情報を集めることが何よりも大切です。\n本書ではコンサルが提案するようなフレームに割り当てるだけではまともな戦略はできない。とこき下ろしていますが情報をしっかりと集めた上でフレームに割り当て整理することを診断の段階で行うことは有意義だと私は考えています。\n実際に私がプロダクト戦略を作成するにあたって、SWOT分析でプロダクトの置かれる状況を、インパクトマッピングを用いて現状の施策が一体誰にどのような影響を与えるのかの整理を行いました。\nそれぞれのやり方については、以下の記事や書籍を参照してください。\nSWOT分析 インパクトマッピング 基本方針 基本方針とは、診断で見つかった課題にどう取り組むか、大きな方向性と総合的な方針を示すことです。\n良い基本方針とは、目標でもビジョンではない、何曲に立ち向かう方法を固め、他の選択肢を排除することが基本方針である。と本書では述べられていました。\n決定的な一点に努力を集中させることによって、大きな効果を上げることができます。\nこのため良い戦略の中には、その戦略に従うことによって何に対してリソースを割くのかがはっきりと分かるようになっていることが大切です。\n私が戦略を立てた際には、インパクトマッピングで整理した内容をベースに、プロダクトの置かれた現状やビジョンをもとに勘案し、プロダクトの方向性を決めました。\nリソースを選択する意味では、どのターゲットのセグメントに対して、どのような価値を提供するのかを明確にすることを意識しました。\n行動 基本方針を実行するために設計された一貫性のある一連の行動のことです。 戦略が存在することですべての行動をコーディネートして方針を実行することができます。\nこのため、良い戦略は、行動を実行するための指針が含まれていることが大切となります。\n私が立てた戦略 上記をベースに私が立てた戦略は以下となりました。\n会社で立てた戦略ですので、一部ぼかして書いています。\n1 xx機能の利用者の新規利用コストを低減する かなりシンプルなものになりましたが、以下のように良い戦略の3つの基本構造を満たしていると考えています。\n診断 プロダクトの状況、課題をベースに考えたときにxxの新規利用者を増やすことが会社の利益につながると考えました。 基本方針 新規利用者を確保するために導入コストを下げるという基本方針を定めました。 行動 基本方針を実現するためにいくつかのアプローチを用意し優先順位をつけました。 ここについては行動を連想できるようなワードを戦略に含められればと考えましたが上記対応としました。 悪い戦略とは 最後に陥りがちな悪い戦略のパターンについて書いておきます。\n悪い戦略の特徴\n空疎である わかり切っていることを専門用語や業界用語で煙に巻くような内容 重大な問題に取り組まない 本来困難な課題を克服し、障害を乗り越えるためのものが戦略である。 達成容易性のみを考えた戦略は悪い戦略である。 目標と戦略と取り違えている 売りあげ10%向上など。それはただの目標である。 間違った戦略目標を掲げている 十分な周辺・原因の調査がなく戦略を掲げている状態。 まとめ 今回は、良いプロダクト戦略の作り方について、「良い戦略、悪い戦略」という書籍をベースにまとめました。 一回でいきなり良い戦略は立てられないと考えています。ただ、戦略のない環境はただ闇雲に走っているだけなのでそれが成功したのか失敗したのかすら判断することができない最低の状態です。\n最初は下手な戦略でも良いので、良い戦略とは何かを意識しつつ常に周りの状況を観察しながら、戦略をアップデートしプロダクトと組織の方向性を定めていくことが大切だと思います。\n","date":"2024-01-08T21:55:15+09:00","permalink":"https://bossagyu.com/blog/013-good-strategy-bad-strategy/","title":"プロダクト戦略の作り方"},{"content":"概要 この記事では、Hugoで作ったブログにTwitter Social Cardを設定する方法を説明します。\nTwitter Social Cardとは Twitter Social Cardとは、Twitterで記事をシェアした際に表示される画像のことです。 以下のような画像がTwitter Social Cardです。\nTwitter Social Cardは、以下の種類があります。\nSummary Card Summary Card with Large Image App Card Player Card この中でもブログのシェアを行う場合は、Summary Card か Summary Card with Large Image を利用することが多いです。\nそのれぞれのカードがどのようなものかについてはTwitterの公式ドキュメントを参照してください。\nTwitter Social Cardの設定方法 Twitter Social Cardの設定方法は、以下の2つの方法があります。\nテーマによる設定 テーマに依存しない設定 テーマによる設定 テーマによっては、Twitter Social Cardの設定を行うことができます。\n今回は私が採用しているStackを例に説明します。\nStackでは、config.toml 対して以下のような設定を行うことでTwitter Social Cardの設定が可能です。\n1 2 3 4 5 6 7 8 [opengraph.twitter] site = \u0026#34;\u0026#34; card = \u0026#34;summary\u0026#34; # summary or summary_large_image [defaultImage.opengraph] enabled = true local = false src = \u0026#34;/images/share.webp\u0026#34; # デフォルトで設定したいimageのパス テーマに依存しない設定 テーマによっては、Twitter Social Cardの設定を行うことができません。 自前で実装して、設定を行う必要があります。\nHugoの公式で実装のテンプレートが公開されていますので、それを利用することで容易に実装することが可能です。\nうまくいかない場合 うまくいかない場合はうまく設定が反映されていない、megaタグが正しく設定されていない可能性があります。 Twitterから提供されているデバッグツールを利用して、設定が正しく反映されているか確認してみましょう。\nまとめ この記事では、Hugoで作ったブログにTwitter Social Cardを設定する方法を説明しました。 Social Cardを設定することで、Twitterで記事をシェアした際に、より多くの人に記事を読んでもらうことができますのでぜひ設定しましょう。\n","date":"2024-01-06T21:45:12+09:00","permalink":"https://bossagyu.com/blog/012-social-card/","title":"Twitter Social Cardの設定方法"},{"content":"概要 この記事では、ChatGPTを利用してHugoで作ったブログを多言語対応する方法を説明します。\nGhatGPTを利用して記事を英語化する方法 Markdownで書かれた記事をChatGPTに英語化させます。 英語化を実施するにあたって、なるべき体裁を崩さないようにするために、以下のようなプロンプトをChatGPTへ入力します。\n1 2 3 マークダウンを体裁を崩さずに英語にしてください。 マークダウン以外の余分な出力は行わないでください。 英語化された内容をそのままコピーできる形で出力してください。 その後、日本語で書いた記事をそのまま貼り付けると、英語化されたMarkdownが出力されます。 出力結果の左下のコピーボタンから出力結果をコピーすれば、英語化は完了です。\nまた、ChatGPTを利用する際はGPT3.5ではなく、課金をしてGPT4を利用することを強くおすすめします。 GPT4は月々お金がかかりますが、GPT3.5と比べて圧倒的に正しい回答を返す確率が高いので、英語化以外の用途にも使えます。\nHugoで多言語対応する方法 Hugoで多言語化を行うための設定方法を記載します。\n設定ファイルの作成 config.tomlに以下のような設定を追加します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # デフォルトの言語を設定、設定しない場合英語がデフォルト判定されます。 defaultContentLanguage = \u0026#34;jp\u0026#34; [languages] # 言語ごとに設定を変更します [languages.jp] title = \u0026#34;Bossagyu Blog\u0026#34; languageName = \u0026#34;ja-jp 🇯🇵\u0026#34; LanguageCode = \u0026#34;ja-jp\u0026#34; contentDir = \u0026#34;content\u0026#34; # 日本語ブログ記事を格納するディレクトリ [languages.jp.params] [languages.en] title = \u0026#34;Bossagyu Blog\u0026#34; languageName = \u0026#34;en-US 🇺🇸\u0026#34; LanguageCode = \u0026#34;en-US\u0026#34; contentDir = \u0026#34;content.en\u0026#34; # 英語ブログ記事を格納するディレクトリ [languages.en.params] 上記のような設定を行うことで、contentディレクトリに日本語の記事を、content.enディレクトリに英語の記事を書くことで多言語対応が可能となります。\n最終的なディレクトリ構成は以下のような形になります。\n1 2 3 4 5 6 7 8 9 10 11 project/ ├── content/ │ ├── index.md │ └── blog/ │ ├── index.md │ └── article1.md └── content.en/ ├── index.md └── blog/ ├── index.md └── article1.en.md また英語化したディレクトリの中には 記事名.en.md の拡張子とすることで、デフォルト言語に対する英語の記事として認識され、記事に言語変換用のアイコンが出力されるようになります。 記事についてはGhatGPTを用いて英語化したものをコピー\u0026amp;ペーストするだけでOKです。\nまとめ この記事では、ChatGPTを利用してHugoで作ったブログを多言語対応する方法を説明しました。 ChatGPTを利用することで、英語化を簡単に行うことができます。 また、多言語対応することで記事を日本以外の国にもリーチでき、より多くの人に記事を読んでもらえます。\nローコストで多言語対応できるのでぜひやってみましょう。\n","date":"2023-12-31T20:46:36+09:00","permalink":"https://bossagyu.com/blog/011-hugo-multilingul-support/","title":"ChatGPTを利用してHugoで作ったブログを多言語対応する方法"},{"content":"概要 Faviconを簡単に作る方法を解説します。 また、HugoでFaviconを表示する方法も解説します。\nFaviconとは Faviconとは、ウェブサイトのブックマークやタブ、ホーム画面などに表示されるアイコンのことです。 Googleより検索結果に表示されるためのfaviconのガイドラインが公開されており、 こちらに従うことで検索結果に表示されるようになります。\nFaviconの作成 Faviconを作成するには、以下のサイトを利用します。\nFavicon.ico \u0026amp; App Icon Generator サイトにアクセスすると、以下のような画面が表示されます。\nfaviconを作成したいサイトのURLを入力し、Generate Faviconをクリックします。 その後表示される画面で、「Download the generated favicon」のリンクをクリックすると、faviconがダウンロードできます。\nHugoでFaviconを表示する HugoでFaviconを表示するには、themeによっても違うますが、 bearcub の場合は 以下のようにtomlに設定するだけでfaviconが表示できます。\n1 2 [params] favicon = \u0026#34;images/favicon.ico\u0026#34; まとめ Faviconを作成する方法と、HugoでFaviconを表示する方法を解説しました。\nFaviconは、ブログのブックマークやタブ、ホーム画面などに表示されるので、作成しておくと良いでしょう。\n","date":"2023-12-24T22:14:39+09:00","permalink":"https://bossagyu.com/blog/010-favicon/","title":"Faviconを作ってHugoで表示する方法"},{"content":"概要 Lighthouseを用いて、ブログのパフォーマンスを計測する方法を解説します。\nLighthouseとは LighthouseはGoogleが提供している、Webサイトのパフォーマンスを計測するツールです。 Google Chromeの拡張機能として提供されており、プラグインをインストールすることで利用することができます。\nLighthouseのインストール Lighthouseをchromeウェブストアからインストールします。\n分析したいサイトを開き、Lighthouseのアイコンをクリックします。\nGenerate reportをクリックすると、分析が始まります。\n今回は私のブログのページで実行しました。\n実行すると、以下のような結果が表示されます。\n実行の完了までに約1分くらい時間がかかります。\n結果の見方 Performance ページの読み込み速度や画像の表示速度など、webサイトのパフォーマンスが評価される。 See calculatorのリンクをクリックすると詳細に飛べる。\nAccessibility すべてのユーザーがコンテンツにアクセス、サイト内を効率的に移動できるかどうかを確認する。 スクロールすると、Accessibilityで指摘されている箇所が表示される。\nコードスニペットを貼っているところの色のコントラストが弱いことと、リンクに説明がないことを指摘されています。\nただ、指摘されている内容は自分の記述ではなく、テンプレートに依存している部分なので、これを直そうと思うとHugoのテンプレートをオーバーライドする必要がありますね。。\nBest Practices ウェブページの健全性についてテストを行います。 検証項目については結果から閲覧できます。 SEO ページが検索エンジンの結果ランキング向けに最適化されているかを確認できます。 Progressive Web App スマートフォン上のウェブページの読み込み速度を高速化できているか、PWAに最適化できているかを確認できます。 今回はチェックしてません。\nまとめ Lighthouseを用いて、ブログのパフォーマンスを計測する方法を解説しました。 特にSEOについては、Googleの検索結果に表示されるかどうかに影響するので、しっかりと対応しておきましょう。\n","date":"2023-12-22T23:08:00+09:00","permalink":"https://bossagyu.com/blog/009-light-house/","title":"Lighthouseの使い方の紹介"},{"content":"概要 AWS EventBridgeを用いてLambdaを定期実行する方法を解説します。\n前提 Lambda関数についてはすでに作成されていることを前提としています。\n手順 Lambda関数を選択し「トリガーを追加」を選択します。\nトリガーから「EventBridge」を選択します。\nルールの作成画面が表示されるので、設定します。\n今回はcron形式で5分ごとに実行するように設定しています。\ncronのsyntaxについては Schedule type on EventBridge Scheduler のページを参考にしてください。\n設定が完了するとLambda関数のダイアグラムのトリガーにEventBridgeが追加されます。\nちなみに私はLINEにメッセージを通知するFunctionを作って動かしてみました。\nこんな感じで5分に1回通知がくるようになりました。\nまとめ AWS EventBridgeを用いてLambdaを定期実行する方法を解説しました。\n設定したEventBridgeについてはこのまま放置しておくと、課金が発生するので、不要になったら削除しておきましょう。\n","date":"2023-12-21T23:03:13+09:00","permalink":"https://bossagyu.com/blog/008-aws-eventbrdge/","title":"AWS EventBridgeを用いてLambdaを定期実行する方法"},{"content":"概要 Google検索で引っかかるようにするために、SEO対策を行いましょうとありますが、まずはGoogle検索に認識されないと話になりません。 この記事では、Google Search Consoleを用いて自身が作成した独自ドメインのブログが、Google検索の対象となる方法を解説します。\n実現までの流れ Google Search Consoleの登録 ドメインの所有権の確認 サイトマップの登録 インデックス登録をリクエスト まとめ Google Search Consoleの登録 Google Search Consoleに登録します。\nドメインを選択肢、URLを入力します。\nドメインの所有権の確認 以下のような画像が表示されDNSの所有権を確認します。\n(念のためTXTレコードの内容は黒く塗りつぶしています。) ドメインのTXTにGoogleが指定した文字列を追加することで、所有権を確認することができます。 ドメインのDNSの設定画面に移動し、TXTレコードを追加します。\n私の場合はNetlifyでドメインを取得しているので、NetlifyのDNSの設定画面に移動します。 Domains -\u0026gt; Domain Settings -\u0026gt; DNS Records に移動し、TXTレコードを追加します。 レコードの内容はGoogle Search Consoleに表示されているものをコピーしてValueに貼り付けます。\n(Valueの部分は黒く塗りつぶしています。) DNSの反映を待ちます。ものによっては数時間かかる場合があります。\nDNSの反映はコマンドラインからでも確認できます。\n1 dig -t txt bossagyu.com その後、Google Search Consoleの所有権の確認を押します。\nこれで所有権の確認が完了し、Google Search Consoleにドメインが登録されます。\nサイトマップの登録 サイトマップを登録することで、Googleにサイトの構造を伝え、サイトのクロールを促進することができます。 Hugoで作成したブログの場合は、/sitemap.xmlにサイトマップが作成されているので、これを登録します。\nGoogle Search Consoleの左側のメニューから「サイトマップ」を選択し、サイトマップを追加します。 インデックス登録をリクエスト サイトマップに登録されていても、Googleがクロールして、その後インデックスが登録されるまでには時間がかかります。 私の場合は数日待ってもインデックスが登録されなかったので、インデックス登録をリクエストしました。\nGoogle Search Consoleの検索窓で登録したいURLを検索し、検索結果の右側にある「インデックス登録をリクエスト」を押します。 これでインデックス登録をリクエストできます。 クリックしてから数時間でインデックスが登録されました。\nまとめ Google Search Consoleを用いて自身が作成した独自ドメインのブログが検索に引っかかるようにする方法を解説しました。\nせっかくブログを作成したのに、Google検索に引っかからないのはもったいないので、ぜひ試してみてください。\n","date":"2023-12-18T19:10:04+09:00","permalink":"https://bossagyu.com/blog/007-google-search-console/","title":"Google Search Consoleを用いてブログをGoogle検索の対象にする方法"},{"content":"概要 IntellijでAWS Toolkitを使ってLambdaを効率よく開発する方法を解説します。\n実現までの流れ 事前準備 AWS Toolkitのインストール AWS Toolkitの設定 Lambdaの開発 Lambdaをローカルで実行 まとめ 事前準備 dockerのインストール intellijで利用するAWS Toolkitでは、Lambda動作させるためにDockerを使用します。\nこのため事前に こちらを参考にDockerをインストールしておいてください。\nAWS CLIのインストール AWS CLI(SAM)をインストールします。\nインストール方法は こちら を参考にしてください。\nIntellijにSAM CLI executableのパスを File -\u0026gt; Settings -\u0026gt; Tools -\u0026gt; AWS Toolkit から設定します。\n私の環境ではbrewでインストールしたので、以下のパスを設定しました。 AWS Toolkitのインストール IntellijのプラグインからAWS Toolkitをインストールします。 プラグインのインストールは こちら を参考にしてください。\nAWS Toolkitの設定 AWS Toolkitを利用するためにはAWSの認証情報を設定する必要があります。\nAWS ExplorerからAWSの認証情報を設定します。 Access Key IDとSecret Access KeyをAWSのコンソールから取得し、設定します。 設定が完了したら、AWS ExplorerにAWSのリソースが表示されるようになります。 この画像ではリージョンが us-east-1 になっていますが、Lambdaを作成するリージョンに合わせてください。\nLambdaの開発 以下のようなコードスニペットを作成します。\nlamda-sample.py\n1 2 3 def lambda_handler(event, context): print(\u0026#34;Hello World\u0026#34;) return \u0026#34;Hello World!\u0026#34; AWS ExplorerからLambdaを作成します。\nCreate Lambda Functionを選択し、必要な値を入力します。\nHandlerにはコードスニペットの \u0026lt;ファイル名\u0026gt;.\u0026lt;関数名\u0026gt; を入力してください。\nこれでLambdaの作成が完了しました。\nLambdaをローカルで実行 またToolkitを利用すると、Lambdaをローカルで実行することができます。 Runを選択すると、Lambdaがローカルで実行されます。\nまとめ IntellijでAWS Toolkitを使ってLambdaを効率よく開発する方法を解説しました。 Intellijで開発してローカルで実行できるので、開発効率がかなり上がります。\n","date":"2023-12-12T22:40:05+09:00","permalink":"https://bossagyu.com/blog/006-intellij-lamda-setup/","title":"IntellijでAWS Toolkitを使ってLambdaを効率よく開発する"},{"content":"概要 Github CopilotをIntellijで使う方法を解説します。 合わせてショートカットのチートシートを記載します。\n実現までの流れ Github Copilotの登録 Intellijの設定 Github Copilotの利用 まとめ Github Copilotの登録 Github Copilot のリンクからGithub Copilotに登録します。\nIntellijの設定 IntellijのプラグインからGithub Copilotをインストールします。\nインストールが完了したら、Intellijを再起動します。\nGithub Copilotの利用 ショートカット一覧 Intellijでコードを書いていると、Github Copilotがコードを補完してくれます。\nmacのショートカットの一覧は以下のとおりです。\nショートカット 機能 tab コードを補完する Option + ] 次の補完候補を表示する Option + [ 前の補完候補を表示する Command + → 提案の次の単語のみ受け入れる コメントによるコード補完 Github Copilotはコメントによるコード補完も行うことができます。\n例えば、以下のようなコメントを書くと、コメントの内容に応じてコードを補完してくれます。\n1 2 3 4 // このメソッドは、引数の値を2倍にして返す ← 書いたコメント public int double(int value) { // ← 生成されたコード return value * 2; } まとめ IntellijでGithub Copilotを利用する方法を解説しました。\nこの記事はGithub Copilotを利用して書いており、Markdownでのブログ作成でもかなり補完してくれるので、気になる人は試してみてください。\n","date":"2023-12-11T22:45:40+09:00","permalink":"https://bossagyu.com/blog/005-github-copilot/","title":"IntellijでのGithub Copilotの使い方"},{"content":"概要 macのローカル環境で開発を行う際のpythonの環境構築の方法について記載する。\n今回は以下の２つの仕組みを利用して、pythonのバージョン管理と仮想環境の管理を行う。\npyenv 複数のpythonのバージョンを扱うために利用する。 venv プロジェクトごとに環境を分けるために利用する。 それぞれの違いや必要性の解説はこちらの記事が参考になります。\nPythonのインストール まずは、ローカル環境にPyenvをインストールし、任意のPythonバージョンを利用できるようにします。\npyenvをインストールします。\n1 brew install pyenv インストールしたpyenvのバージョンを確認します。\n1 2 pyenv --version pyenv 2.3.35 zshに設定を追加する。\n1 2 3 echo \u0026#39;export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo -e \u0026#39;if command -v pyenv 1\u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then\\n eval \u0026#34;$(pyenv init -)\u0026#34;\\nfi\u0026#39; \u0026gt;\u0026gt; ~/.zshrc .zshrcの内容を読み込む。\n1 source ~/.zshrc インストール可能なPythonのバージョン一覧を表示する。\n1 pyenv install --list 指定したバージョンをインストールする。\n1 pyenv install 3.11.7 プロジェクトフォルダに指定したPythonのバージョンを利用する。\n1 2 3 cd \u0026lt;作成したプロジェクトフォルダ\u0026gt; pyenv local 3.11.7 pyenv versions globalの場合は全体に反映される。\n1 pyenv global 3.11.7 実行されているpythonのバージョンを確認する。\n1 python -V venvで仮想環境の作成 プロジェクトのディレクトリに仮想環境を作成する。\n1 2 # python -m venv \u0026lt;仮想環境名\u0026gt; python -m venv venv 仮想環境を有効化する。\n1 source venv/bin/activate ディアクティベートは以下のコマンドで実行できる。\n1 deactivate 以上でローカル環境の構築が完了です。\n","date":"2023-12-10T23:19:33+09:00","permalink":"https://bossagyu.com/blog/004-paython-setup/","title":"Pyenvとvenvを用いたローカル環境のセットアップ方法"},{"content":"概要 HugoをでGoogle Analyticsを設定する方法をサクッと解説します。\n実現までの流れ Google Analyticsへの登録 トラッキングIDの取得 Hugoの設定にトラッキングIDを追加 Google Analyticsの登録 [GA4] アナリティクスで新しいウェブサイトまたはアプリのセットアップを行う に従い登録を行います。\nデータストリームを追加すると、トラッキングIDが取得できるのでメモしておきます。 ※ トラッキングIDは日本語訳の影響か、測定IDという表示になっています。\nHugoの設定にトラッキングIDを追加 tomlに設定を追加 config.tomlにgoogleAnalytics = トラッキングIDを追加します。\n1 2 3 4 5 6 baseURL = \u0026#39;https://bossagyu.com\u0026#39; languageCode = \u0026#39;ja-jp\u0026#39; title = \u0026#39;Bossagyu Blog\u0026#39; theme = \u0026#39;hugo-bearcub\u0026#39; googleAnalytics = \u0026#34;G-1234ABCDEF\u0026#34; # ↑ この行を追加、トラッキングIDは自分のものに変更してください。 トラッキングコードを埋め込む テンプレートによってはtomlの設定を入れるだけで読めるものもあるみたいですが、 私の使用しているbearcubのテンプレートは対応してなかったので、 自分でヘッダにトラッキングコードを読み込むように追加します。\nコードスニペットについてはまくまく Hugo ノートを参考にさせていただきました。\nトラッキングコードを読むために layouts/partials/analytics.html を作成する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 {{ if not .Site.IsServer }} {{ with .Site.GoogleAnalytics }} \u0026lt;!-- Google tag (gtag.js) --\u0026gt; \u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id={{ . }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;{{ . }}\u0026#39;); \u0026lt;/script\u0026gt; {{ end }} {{ end }} ページヘッダで analytics.html を読み込むようにする。\n1 2 3 # テンプレートの内容をコピーしてきてオーバーライドする cp themes/hugo-bearcub/layouts/_default/baseof.html layouts/_default/baseof.html vim layouts/_default/baseof.html baseof.htmlに{{- partial \u0026quot;analytics\u0026quot; . -}} を追加する。\n1 2 3 4 5 6 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ with .Site.LanguageCode }}{{ . }}{{ else }}en-US{{ end }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {{- partial \u0026#34;analytics\u0026#34; . -}} \u0026lt;meta http-equiv=\u0026#34;X-Clacks-Overhead\u0026#34; content=\u0026#34;GNU Terry Pratchett\u0026#34; / 上記ソースコードを追加した状態で、再度ビルドするとGoogle Analyticsにデータが送信されるようになります。\ntips こちらの対応をしても、Google Analyticsにデータが連携されていないように見える場合は、タグの追加がうまくいっていない可能性があります。\nまずはタグがちゃんと入っているかの切り分けをするために、googleデベロッパーツールを開きトラッキングがhtml内に含まれているか確認してみるとよいです。\n","date":"2023-12-09T18:09:42+09:00","permalink":"https://bossagyu.com/blog/003-google-analytics/","title":"HugoでGoogle Analyticsの設定をする方法"},{"content":"概要 LINEのBotを利用してアプリケーションを作ってみようと考えたのでまずはBotを利用できる状態にする。\n本ページでは一番最初にLINE Message APIの登録の方法とcurlでコマンドラインからメッセージを送る方法を紹介します。\nMessaging APIを利用する LINE Developers にログインしてプロバイダーを作成する。\nプロバイダーとは(説明)\n1 2 LINE Developersサイトでは、サービスを提供し、ユーザーの情報を取得する開発者個人、 企業、または団体等をサービス提供者（LINEミニアプリではサービス事業主）と呼びます。 なので好きな文字列を入れる。\nそのまま新規チャンネルを作成する。 このまま作成ボタンを押すと新規チャンネルが作成される\nコマンドラインからポストをする Messaging API設定からQRコードを読みこんで友達追加する。\nMessaging API設定から「チャンネルアクセストークン(長期)」を取得 チャンネル基本設定から「あなたのユーザーID」取得\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 TOKEN=\u0026#34;\u0026lt;チャンネルアクセストークン(長期)\u0026gt;\u0026#34; ID=\u0026#34;\u0026lt;あなたのユーザーID\u0026gt;\u0026#34; UUID=$(uuidgen | tr \u0026#34;[:upper:]\u0026#34; \u0026#34;[:lower:]\u0026#34;) curl -v -X POST https://api.line.me/v2/bot/message/push \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -H \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; \\ -H \u0026#34;X-Line-Retry-Key: \u0026#34; \\ -d \u0026#34;{ \\\u0026#34;to\\\u0026#34;: \\\u0026#34;${ID}\\\u0026#34;, \\\u0026#34;messages\\\u0026#34;:[ { \\\u0026#34;type\\\u0026#34;:\\\u0026#34;text\\\u0026#34;, \\\u0026#34;text\\\u0026#34;:\\\u0026#34;Hello, world1\\\u0026#34; } ] }\u0026#34; レスポンスが帰ってきて、LINEのトーク画面でBotからの投稿が行われていれば成功！\n","date":"2023-12-07T09:37:00+09:00","permalink":"https://bossagyu.com/blog/002-line-messaging-api/","title":"LINE Messaging APIの登録と使い方"},{"content":"概要 Hugoで作ったサイトをGithubで管理、Netlifyでビルドした手順を0から作れるよう記載します。\nこの方式にすると手元でMarkDownで書いたブログをGithubにPushするだけで簡単に公開できるようになります。\n流れ Hugoでサイトを生成 Githubにプッシュ Netlifyでデプロイ Hugoで静的サイトを生成 まずはHugoをインストールします。\n1 brew install hugo blogの雛形を作成します。\n1 hugo new site my-blog ブログに適応するテーマをsubmoduleとして追加します。\n1 2 3 4 5 cd my-blog git init # テーマをgithubのsubmoduleとして追加 git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke hugo.tomlに記載することでテーマを適応する。\n1 echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; config.toml サーバを起動させます。\n1 hugo server 起動ログの Web Server is available at http://localhost:51517/ (bind address 127.0.0.1) のような記述の http://localhost:51517/ にアクセスすればローカルに起動した静的サイトが閲覧できます。\nTips Hugoのテーマを変えたい場合は、Hugo Themas から好きなものを選んで変えてください。 これは後からでも変えられるのでとりあえずNetlifyでビルドするところまで走り切るのがおすすめ。 Tomlファイルの書き方は Configure Hugo に記載されています。 Githubにpush Github にリポジトリを作成。\n作成後以下のコマンドを実行し、サイトをpushします。\n1 2 3 4 5 6 7 8 9 10 cd my-blog echo .hugo_build.lock \u0026gt;\u0026gt; .gitignore git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main # \u0026lt;user name\u0026gt;は自分のユーザー名に置き換えてください。 # 今回はmy-blogというリポジトリを作成している例です。 git remote add origin git@github.com:\u0026lt;user name\u0026gt;/my-blog git push -u origin main pushが完了するとGithubのUI上でソースコードが閲覧できる状態になっています。\nNetlifyでデプロイ netlify へアクセスし、デプロイを行う。\nHugoの公式で案内 があるのでこちらを参考に連携を行う。\n指示に従いデプロイを完了すると以下のようにDeployの結果が published になる。\nサイト上に表示されたURLをクリックするとデプロイされたサイトにアクセスできる。 これでデプロイまではおしまい。\n以降は変更を加えてmainにpushするだけで自動デプロイが走り、サイトの内容が更新されるようになる。\n","date":"2023-12-02T00:59:37+09:00","permalink":"https://bossagyu.com/blog/001-hugo-netlify-build/","title":"Hugo + Netlify + Githubでブログを公開する"}]