<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Bossagyu Blog</title><link>https://bossagyu.com/</link><description>Recent content on Bossagyu Blog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>©2023 Bossagyu</copyright><lastBuildDate>Sun, 31 Dec 2023 20:46:36 +0900</lastBuildDate><atom:link href="https://bossagyu.com/index.xml" rel="self" type="application/rss+xml"/><item><title>ChatGPTを利用してHugoで作ったブログを多言語対応する方法</title><link>https://bossagyu.com/blog/011-hugo-multilingul-support/</link><pubDate>Sun, 31 Dec 2023 20:46:36 +0900</pubDate><guid>https://bossagyu.com/blog/011-hugo-multilingul-support/</guid><description>概要 この記事では、ChatGPTを利用してHugoで作ったブログを多言語対応する方法を説明します。
GhatGPTを利用して記事を英語化する方法 Markdownで書かれた記事をChatGPTに英語化させます。 英語化を実施するにあたって、なるべき体裁を崩さないようにするために、以下のようなプロンプトをChatGPTへ入力します。
マークダウンを体裁を崩さずに英語にしてください。 マークダウン以外の余分な出力は行わないでください。 英語化された内容をそのままコピーできる形で出力してください。その後、日本語で書いた記事をそのまま貼り付けると、英語化されたMarkdownが出力されます。 出力結果の左下のコピーボタンから出力結果をコピーすれば、英語化は完了です。
また、ChatGPTを利用する際はGPT3.5ではなく、課金をしてGPT4を利用することを強くおすすめします。 GPT4は月々お金がかかりますが、GPT3.5と比べて圧倒的に正しい回答を返す確率が高いので、英語化以外の用途にも使えます。
Hugoで多言語対応する方法 Hugoで多言語化を行うための設定方法を記載します。
設定ファイルの作成 config.tomlに以下のような設定を追加します。
# デフォルトの言語を設定、設定しない場合英語がデフォルト判定されます。 defaultContentLanguage = &amp;#34;jp&amp;#34; [languages] # 言語ごとに設定を変更します [languages.jp] title = &amp;#34;Bossagyu Blog&amp;#34; languageName = &amp;#34;ja-jp 🇯🇵&amp;#34; LanguageCode = &amp;#34;ja-jp&amp;#34; contentDir = &amp;#34;content&amp;#34; # 日本語ブログ記事を格納するディレクトリ [languages.jp.params] [languages.en] title = &amp;#34;Bossagyu Blog&amp;#34; languageName = &amp;#34;en-US 🇺🇸&amp;#34; LanguageCode = &amp;#34;en-US&amp;#34; contentDir = &amp;#34;content.en&amp;#34; # 英語ブログ記事を格納するディレクトリ [languages.en.params]上記のような設定を行うことで、contentディレクトリに日本語の記事を、content.enディレクトリに英語の記事を書くことで多言語対応が可能となります。
最終的なディレクトリ構成は以下のような形になります。
project/ ├── content/ │ ├── index.md │ └── blog/ │ ├── index.</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>この記事では、ChatGPTを利用してHugoで作ったブログを多言語対応する方法を説明します。</p>
<h2 id="ghatgptを利用して記事を英語化する方法">GhatGPTを利用して記事を英語化する方法</h2>
<p>Markdownで書かれた記事を<a href="https://chat.openai.com/">ChatGPT</a>に英語化させます。
英語化を実施するにあたって、なるべき体裁を崩さないようにするために、以下のようなプロンプトをChatGPTへ入力します。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>マークダウンを体裁を崩さずに英語にしてください。
</span></span><span style="display:flex;"><span>マークダウン以外の余分な出力は行わないでください。
</span></span><span style="display:flex;"><span>英語化された内容をそのままコピーできる形で出力してください。</span></span></code></pre></div><p>その後、日本語で書いた記事をそのまま貼り付けると、英語化されたMarkdownが出力されます。
出力結果の左下のコピーボタンから出力結果をコピーすれば、英語化は完了です。</p>
<p><img src="/blog/img-011-001.png" alt="ChatGPTの画面"></p>
<p>また、ChatGPTを利用する際はGPT3.5ではなく、課金をしてGPT4を利用することを強くおすすめします。
GPT4は月々お金がかかりますが、GPT3.5と比べて圧倒的に正しい回答を返す確率が高いので、英語化以外の用途にも使えます。</p>
<h2 id="hugoで多言語対応する方法">Hugoで多言語対応する方法</h2>
<p>Hugoで多言語化を行うための設定方法を記載します。</p>
<h3 id="設定ファイルの作成">設定ファイルの作成</h3>
<p>config.tomlに以下のような設定を追加します。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#75715e"># デフォルトの言語を設定、設定しない場合英語がデフォルト判定されます。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">defaultContentLanguage</span> = <span style="color:#e6db74">&#34;jp&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">languages</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># 言語ごとに設定を変更します</span>
</span></span><span style="display:flex;"><span>  [<span style="color:#a6e22e">languages</span>.<span style="color:#a6e22e">jp</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#34;Bossagyu Blog&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">languageName</span> = <span style="color:#e6db74">&#34;ja-jp 🇯🇵&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">LanguageCode</span> = <span style="color:#e6db74">&#34;ja-jp&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">contentDir</span> = <span style="color:#e6db74">&#34;content&#34;</span>  <span style="color:#75715e"># 日本語ブログ記事を格納するディレクトリ</span>
</span></span><span style="display:flex;"><span>      [<span style="color:#a6e22e">languages</span>.<span style="color:#a6e22e">jp</span>.<span style="color:#a6e22e">params</span>]
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  [<span style="color:#a6e22e">languages</span>.<span style="color:#a6e22e">en</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#34;Bossagyu Blog&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">languageName</span> = <span style="color:#e6db74">&#34;en-US 🇺🇸&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">LanguageCode</span> = <span style="color:#e6db74">&#34;en-US&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">contentDir</span> = <span style="color:#e6db74">&#34;content.en&#34;</span> <span style="color:#75715e"># 英語ブログ記事を格納するディレクトリ</span>
</span></span><span style="display:flex;"><span>      [<span style="color:#a6e22e">languages</span>.<span style="color:#a6e22e">en</span>.<span style="color:#a6e22e">params</span>]</span></span></code></pre></div><p>上記のような設定を行うことで、<code>content</code>ディレクトリに日本語の記事を、<code>content.en</code>ディレクトリに英語の記事を書くことで多言語対応が可能となります。</p>
<p>最終的なディレクトリ構成は以下のような形になります。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>project/
</span></span><span style="display:flex;"><span>├── content/
</span></span><span style="display:flex;"><span>│   ├── index.md
</span></span><span style="display:flex;"><span>│   └── blog/
</span></span><span style="display:flex;"><span>│       ├── index.md
</span></span><span style="display:flex;"><span>│       └── article1.md
</span></span><span style="display:flex;"><span>└── content.en/
</span></span><span style="display:flex;"><span>    ├── index.md
</span></span><span style="display:flex;"><span>    └── blog/
</span></span><span style="display:flex;"><span>        ├── index.md
</span></span><span style="display:flex;"><span>        └── article1.en.md</span></span></code></pre></div><p>また英語化したディレクトリの中には <code>記事名.en.md</code> の拡張子とすることで、デフォルト言語に対する英語の記事として認識され、記事に言語変換用のアイコンが出力されるようになります。
記事についてはGhatGPTを用いて英語化したものをコピー&amp;ペーストするだけでOKです。</p>
<h2 id="まとめ">まとめ</h2>
<p>この記事では、ChatGPTを利用してHugoで作ったブログを多言語対応する方法を説明しました。
ChatGPTを利用することで、英語化を簡単に行うことができます。
また、多言語対応することで記事を日本以外の国にもリーチでき、より多くの人に記事を読んでもらえます。</p>
<p>ローコストで多言語対応できるのでぜひやってみましょう。</p>
]]></content:encoded></item><item><title>Using ChatGPT to Make a Hugo Blog Multilingual</title><link>https://bossagyu.com/en/blog/011-hugo-multilingul-support/</link><pubDate>Sun, 31 Dec 2023 20:46:36 +0900</pubDate><guid>https://bossagyu.com/en/blog/011-hugo-multilingul-support/</guid><description>Overview This article explains how to use ChatGPT to make a blog created with Hugo multilingual.
Translating Articles into English with ChatGPT You can translate articles written in Markdown into English using ChatGPT. When doing so, use the following prompt to ensure that the format remains intact:
Please translate this Markdown into English without altering its format. Ensure that no extraneous output is included. Present the translated content in a format that can be easily copied.</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>This article explains how to use ChatGPT to make a blog created with Hugo multilingual.</p>
<h2 id="translating-articles-into-english-with-chatgpt">Translating Articles into English with ChatGPT</h2>
<p>You can translate articles written in Markdown into English using <a href="https://chat.openai.com/">ChatGPT</a>. When doing so, use the following prompt to ensure that the format remains intact:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Please translate this Markdown into English without altering its format.
</span></span><span style="display:flex;"><span>Ensure that no extraneous output is included.
</span></span><span style="display:flex;"><span>Present the translated content in a format that can be easily copied.</span></span></code></pre></div><p>Paste your article in Japanese, and ChatGPT will output the translated Markdown. You can copy the output directly by clicking the copy button at the bottom left of the output.</p>
<p><img src="/blog/img-011-001.png" alt="ChatGPT Screen"></p>
<p>It is highly recommended to use GPT-4 instead of GPT-3.5, despite the subscription cost. GPT-4 significantly outperforms GPT-3.5 in providing accurate responses, making it useful for purposes beyond just translation.</p>
<h2 id="making-hugo-multilingual">Making Hugo Multilingual</h2>
<p>Here are the steps to make your Hugo site multilingual.</p>
<h3 id="creating-configuration-files">Creating Configuration Files</h3>
<p>Add the following settings to your config.toml:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#75715e"># Set the default language, without this setting English is assumed default.</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">defaultContentLanguage</span> = <span style="color:#e6db74">&#34;jp&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">languages</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Set configurations for each language</span>
</span></span><span style="display:flex;"><span>  [<span style="color:#a6e22e">languages</span>.<span style="color:#a6e22e">jp</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#34;Bossagyu Blog&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">languageName</span> = <span style="color:#e6db74">&#34;ja-jp 🇯🇵&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">LanguageCode</span> = <span style="color:#e6db74">&#34;ja-jp&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">contentDir</span> = <span style="color:#e6db74">&#34;content&#34;</span>  <span style="color:#75715e"># Directory for Japanese blog articles</span>
</span></span><span style="display:flex;"><span>      [<span style="color:#a6e22e">languages</span>.<span style="color:#a6e22e">jp</span>.<span style="color:#a6e22e">params</span>]
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  [<span style="color:#a6e22e">languages</span>.<span style="color:#a6e22e">en</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#34;Bossagyu Blog&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">languageName</span> = <span style="color:#e6db74">&#34;en-US 🇺🇸&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">LanguageCode</span> = <span style="color:#e6db74">&#34;en-US&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">contentDir</span> = <span style="color:#e6db74">&#34;content.en&#34;</span> <span style="color:#75715e"># Directory for English blog articles</span>
</span></span><span style="display:flex;"><span>      [<span style="color:#a6e22e">languages</span>.<span style="color:#a6e22e">en</span>.<span style="color:#a6e22e">params</span>]</span></span></code></pre></div><p>With the above settings, you can write Japanese articles in the <code>content</code> directory and English articles in the <code>content.en</code> directory to support multiple languages.</p>
<p>The final directory structure will look like this:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>project/
</span></span><span style="display:flex;"><span>├── content/
</span></span><span style="display:flex;"><span>│   ├── index.md
</span></span><span style="display:flex;"><span>│   └── blog/
</span></span><span style="display:flex;"><span>│       ├── index.md
</span></span><span style="display:flex;"><span>│       └── article1.md
</span></span><span style="display:flex;"><span>└── content.en/
</span></span><span style="display:flex;"><span>    ├── index.md
</span></span><span style="display:flex;"><span>    └── blog/
</span></span><span style="display:flex;"><span>        ├── index.md
</span></span><span style="display:flex;"><span>        └── article1.en.md</span></span></code></pre></div><p>In the English directory, naming files as <code>article-name.en.md</code> identifies them as English versions of the default language articles, and language switch icons will be added to the articles. For the articles, just copy and paste the translations from ChatGPT.</p>
<h2 id="summary">Summary</h2>
<p>This article explained how to make a Hugo blog multilingual using ChatGPT. Utilizing ChatGPT simplifies the translation process. Multilingual support can help reach audiences outside Japan, increasing readership.</p>
<p>Since it&rsquo;s low-cost and efficient, it&rsquo;s worth giving it a try.</p>
]]></content:encoded></item><item><title>Creating and Displaying a Favicon with Hugo</title><link>https://bossagyu.com/en/blog/010-favicon/</link><pubDate>Sun, 24 Dec 2023 22:14:39 +0900</pubDate><guid>https://bossagyu.com/en/blog/010-favicon/</guid><description>Overview This article explains a simple method to create a favicon. It also covers how to display a favicon in Hugo.
What is a Favicon? A favicon is an icon that appears in bookmarks, tabs, and home screens for websites. Google has published guidelines for favicons that appear in search results. Adhering to these guidelines can help your favicon appear in search results.
Creating a Favicon To create a favicon, use the following site:</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>This article explains a simple method to create a favicon. It also covers how to display a favicon in Hugo.</p>
<h2 id="what-is-a-favicon">What is a Favicon?</h2>
<p>A favicon is an icon that appears in bookmarks, tabs, and home screens for websites. Google has published <a href="https://developers.google.com/search/docs/appearance/favicon-in-search?hl=ja#guidelines">guidelines for favicons</a> that appear in search results. Adhering to these guidelines can help your favicon appear in search results.</p>
<h2 id="creating-a-favicon">Creating a Favicon</h2>
<p>To create a favicon, use the following site:</p>
<ul>
<li><a href="https://www.favicon-generator.org/">Favicon.ico &amp; App Icon Generator</a></li>
</ul>
<p>When you visit the site, you&rsquo;ll see a screen like this.<br>
<img src="/blog/img-010-001.png" alt="Favicon Generator"></p>
<p>Enter the URL of the site you want a favicon for and click on Generate Favicon. Then, on the displayed screen, click the &lsquo;Download the generated favicon&rsquo; link to download the favicon.</p>
<h2 id="displaying-a-favicon-in-hugo">Displaying a Favicon in Hugo</h2>
<p>To display a favicon in Hugo, the process varies depending on the theme. For the <a href="https://github.com/clente/hugo-bearcub/tree/main">bearcub theme</a>, you can simply set it in the toml like this:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#f92672">[</span>params<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  favicon <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;images/favicon.ico&#34;</span></span></span></code></pre></div><h2 id="summary">Summary</h2>
<p>This article explained how to create a favicon and display it in Hugo. Favicons are displayed in bookmarks, tabs, and home screens, so it&rsquo;s a good idea to create one for your blog.</p>
]]></content:encoded></item><item><title>Faviconを作ってHugoで表示する方法</title><link>https://bossagyu.com/blog/010-favicon/</link><pubDate>Sun, 24 Dec 2023 22:14:39 +0900</pubDate><guid>https://bossagyu.com/blog/010-favicon/</guid><description>概要 Faviconを簡単に作る方法を解説します。 また、HugoでFaviconを表示する方法も解説します。
Faviconとは Faviconとは、ウェブサイトのブックマークやタブ、ホーム画面などに表示されるアイコンのことです。 Googleより検索結果に表示されるためのfaviconのガイドラインが公開されており、 こちらに従うことで検索結果に表示されるようになります。
Faviconの作成 Faviconを作成するには、以下のサイトを利用します。
Favicon.ico &amp;amp; App Icon Generator サイトにアクセスすると、以下のような画面が表示されます。
faviconを作成したいサイトのURLを入力し、Generate Faviconをクリックします。 その後表示される画面で、「Download the generated favicon」のリンクをクリックすると、faviconがダウンロードできます。
HugoでFaviconを表示する HugoでFaviconを表示するには、themeによっても違うますが、 bearcub の場合は 以下のようにtomlに設定するだけでfaviconが表示できます。
[params] favicon = &amp;#34;images/favicon.ico&amp;#34;まとめ Faviconを作成する方法と、HugoでFaviconを表示する方法を解説しました。
Faviconは、ブログのブックマークやタブ、ホーム画面などに表示されるので、作成しておくと良いでしょう。</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>Faviconを簡単に作る方法を解説します。
また、HugoでFaviconを表示する方法も解説します。</p>
<h2 id="faviconとは">Faviconとは</h2>
<p>Faviconとは、ウェブサイトのブックマークやタブ、ホーム画面などに表示されるアイコンのことです。
Googleより検索結果に表示されるための<a href="https://developers.google.com/search/docs/appearance/favicon-in-search?hl=ja#guidelines">faviconのガイドライン</a>が公開されており、
こちらに従うことで検索結果に表示されるようになります。</p>
<h2 id="faviconの作成">Faviconの作成</h2>
<p>Faviconを作成するには、以下のサイトを利用します。</p>
<ul>
<li><a href="https://www.favicon-generator.org/">Favicon.ico &amp; App Icon Generator</a></li>
</ul>
<p>サイトにアクセスすると、以下のような画面が表示されます。<br>
<img src="/blog/img-010-001.png" alt="Favicon Generator"></p>
<p>faviconを作成したいサイトのURLを入力し、Generate Faviconをクリックします。
その後表示される画面で、「Download the generated favicon」のリンクをクリックすると、faviconがダウンロードできます。</p>
<h2 id="hugoでfaviconを表示する">HugoでFaviconを表示する</h2>
<p>HugoでFaviconを表示するには、themeによっても違うますが、 <a href="https://github.com/clente/hugo-bearcub/tree/main">bearcub</a> の場合は
以下のようにtomlに設定するだけでfaviconが表示できます。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#f92672">[</span>params<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  favicon <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;images/favicon.ico&#34;</span></span></span></code></pre></div><h2 id="まとめ">まとめ</h2>
<p>Faviconを作成する方法と、HugoでFaviconを表示する方法を解説しました。<br>
Faviconは、ブログのブックマークやタブ、ホーム画面などに表示されるので、作成しておくと良いでしょう。</p>
]]></content:encoded></item><item><title>Introduction to Using Lighthouse</title><link>https://bossagyu.com/en/blog/009-light-house/</link><pubDate>Fri, 22 Dec 2023 23:08:00 +0900</pubDate><guid>https://bossagyu.com/en/blog/009-light-house/</guid><description>Overview This article explains how to measure your blog&amp;rsquo;s performance using Lighthouse.
What is Lighthouse? Lighthouse is a performance measurement tool for websites provided by Google. It&amp;rsquo;s available as a Google Chrome extension and can be used by installing the plugin.
Installing Lighthouse Install Lighthouse from the Chrome Web Store.
Open the site you want to analyze and click on the Lighthouse icon.
Click on Generate report to start the analysis.</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>This article explains how to measure your blog&rsquo;s performance using Lighthouse.</p>
<h2 id="what-is-lighthouse">What is Lighthouse?</h2>
<p>Lighthouse is a performance measurement tool for websites provided by Google. It&rsquo;s available as a Google Chrome extension and can be used by installing the plugin.</p>
<h2 id="installing-lighthouse">Installing Lighthouse</h2>
<p>Install Lighthouse from the Chrome Web Store.<br>
<img src="/blog/img-009-001.png" alt="Lighthouse Chrome Store"></p>
<p>Open the site you want to analyze and click on the Lighthouse icon.<br>
<img src="/blog/img-009-002.png" alt="Lighthouse Icon"></p>
<p>Click on Generate report to start the analysis.<br>
This time, I ran it on my <a href="https://bossagyu.com/blog/001-hugo-netlify-build/">blog page</a>.<br>
<img src="/blog/img-009-003.png" alt="Lighthouse Execution Screen"></p>
<p>The results are displayed as follows, taking about 1 minute to complete.<br>
<img src="/blog/img-009-004.png" alt="Lighthouse Results"></p>
<h2 id="interpreting-the-results">Interpreting the Results</h2>
<h3 id="performance">Performance</h3>
<p>Evaluates web performance, like page loading and image display speeds. Clicking the See calculator link takes you to more details.<br>
<img src="/blog/img-009-005.png" alt="Lighthouse Performance"></p>
<h3 id="accessibility">Accessibility</h3>
<p>Checks whether all users can access content and navigate efficiently within the site. Scrolling down shows areas flagged by Accessibility.<br>
<img src="/blog/img-009-006.png" alt="Lighthouse Accessibility"></p>
<p>It points out weak color contrast in the code snippets and missing descriptions in links.</p>
<p>However, the flagged content is not from my writing but depends on the template, so to fix this, it would be necessary to override the Hugo template.</p>
<h3 id="best-practices">Best Practices</h3>
<p>Tests the integrity of web pages. You can view the testing items in the results.<br>
<img src="/blog/img-009-007.png" alt="Lighthouse Best Practices"></p>
<h3 id="seo">SEO</h3>
<p>You can check if the page is optimized for search engine result rankings.<br>
<img src="/blog/img-009-008.png" alt="Lighthouse SEO"></p>
<h3 id="progressive-web-app">Progressive Web App</h3>
<p>Checks if the loading speed of web pages on smartphones is optimized and if it&rsquo;s suitable for PWAs. This wasn&rsquo;t checked in this case.</p>
<h2 id="summary">Summary</h2>
<p>The article explained how to measure the performance of a blog using Lighthouse.
Especially for SEO, as it affects visibility in Google search results, it&rsquo;s important to address these issues adequately.</p>
]]></content:encoded></item><item><title>Lighthouseの使い方の紹介</title><link>https://bossagyu.com/blog/009-light-house/</link><pubDate>Fri, 22 Dec 2023 23:08:00 +0900</pubDate><guid>https://bossagyu.com/blog/009-light-house/</guid><description>概要 Lighthouseを用いて、ブログのパフォーマンスを計測する方法を解説します。
Lighthouseとは LighthouseはGoogleが提供している、Webサイトのパフォーマンスを計測するツールです。 Google Chromeの拡張機能として提供されており、プラグインをインストールすることで利用することができます。
Lighthouseのインストール Lighthouseをchromeウェブストアからインストールします。
分析したいサイトを開き、Lighthouseのアイコンをクリックします。
Generate reportをクリックすると、分析が始まります。
今回は私のブログのページで実行しました。
実行すると、以下のような結果が表示されます。
実行の完了までに約1分くらい時間がかかります。
結果の見方 Performance ページの読み込み速度や画像の表示速度など、webサイトのパフォーマンスが評価される。 See calculatorのリンクをクリックすると詳細に飛べる。
Accessibility すべてのユーザーがコンテンツにアクセス、サイト内を効率的に移動できるかどうかを確認する。 スクロールすると、Accessibilityで指摘されている箇所が表示される。
コードスニペットを貼っているところの色のコントラストが弱いことと、リンクに説明がないことを指摘されています。
ただ、指摘されている内容は自分の記述ではなく、テンプレートに依存している部分なので、これを直そうと思うとHugoのテンプレートをオーバーライドする必要がありますね。。
Best Practices ウェブページの健全性についてテストを行います。 検証項目については結果から閲覧できます。 SEO ページが検索エンジンの結果ランキング向けに最適化されているかを確認できます。 Progressive Web App スマートフォン上のウェブページの読み込み速度を高速化できているか、PWAに最適化できているかを確認できます。 今回はチェックしてません。
まとめ Lighthouseを用いて、ブログのパフォーマンスを計測する方法を解説しました。 特にSEOについては、Googleの検索結果に表示されるかどうかに影響するので、しっかりと対応しておきましょう。</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>Lighthouseを用いて、ブログのパフォーマンスを計測する方法を解説します。</p>
<h2 id="lighthouseとは">Lighthouseとは</h2>
<p>LighthouseはGoogleが提供している、Webサイトのパフォーマンスを計測するツールです。
Google Chromeの拡張機能として提供されており、プラグインをインストールすることで利用することができます。</p>
<h2 id="lighthouseのインストール">Lighthouseのインストール</h2>
<p>Lighthouseをchromeウェブストアからインストールします。<br>
<img src="/blog/img-009-001.png" alt="Lighthouse chromeストア"></p>
<p>分析したいサイトを開き、Lighthouseのアイコンをクリックします。<br>
<img src="/blog/img-009-002.png" alt="Lighthouse アイコン"></p>
<p>Generate reportをクリックすると、分析が始まります。<br>
今回は私の<a href="https://bossagyu.com/blog/001-hugo-netlify-build/">ブログのページ</a>で実行しました。<br>
<img src="/blog/img-009-003.png" alt="Lighthouse 実行画面"></p>
<p>実行すると、以下のような結果が表示されます。<br>
実行の完了までに約1分くらい時間がかかります。<br>
<img src="/blog/img-009-004.png" alt="Lighthouse 結果"></p>
<h2 id="結果の見方">結果の見方</h2>
<h3 id="performance">Performance</h3>
<p>ページの読み込み速度や画像の表示速度など、webサイトのパフォーマンスが評価される。
See calculatorのリンクをクリックすると詳細に飛べる。<br>
<img src="/blog/img-009-005.png" alt="Lighthouse Performance"></p>
<h3 id="accessibility">Accessibility</h3>
<p>すべてのユーザーがコンテンツにアクセス、サイト内を効率的に移動できるかどうかを確認する。
スクロールすると、Accessibilityで指摘されている箇所が表示される。<br>
<img src="/blog/img-009-006.png" alt="Lighthouse Accessibility"></p>
<p>コードスニペットを貼っているところの色のコントラストが弱いことと、リンクに説明がないことを指摘されています。</p>
<p>ただ、指摘されている内容は自分の記述ではなく、テンプレートに依存している部分なので、これを直そうと思うとHugoのテンプレートをオーバーライドする必要がありますね。。</p>
<h3 id="best-practices">Best Practices</h3>
<p>ウェブページの健全性についてテストを行います。
検証項目については結果から閲覧できます。
<img src="/blog/img-009-007.png" alt="Lighthouse Best Practices"></p>
<h3 id="seo">SEO</h3>
<p>ページが検索エンジンの結果ランキング向けに最適化されているかを確認できます。
<img src="/blog/img-009-008.png" alt="Lighthouse SEO"></p>
<h3 id="progressive-web-app">Progressive Web App</h3>
<p>スマートフォン上のウェブページの読み込み速度を高速化できているか、PWAに最適化できているかを確認できます。
今回はチェックしてません。</p>
<h2 id="まとめ">まとめ</h2>
<p>Lighthouseを用いて、ブログのパフォーマンスを計測する方法を解説しました。
特にSEOについては、Googleの検索結果に表示されるかどうかに影響するので、しっかりと対応しておきましょう。</p>
]]></content:encoded></item><item><title>AWS EventBridgeを用いてLambdaを定期実行する方法</title><link>https://bossagyu.com/blog/008-aws-eventbrdge/</link><pubDate>Thu, 21 Dec 2023 23:03:13 +0900</pubDate><guid>https://bossagyu.com/blog/008-aws-eventbrdge/</guid><description>概要 AWS EventBridgeを用いてLambdaを定期実行する方法を解説します。
前提 Lambda関数についてはすでに作成されていることを前提としています。
手順 Lambda関数を選択し「トリガーを追加」を選択します。
トリガーから「EventBridge」を選択します。
ルールの作成画面が表示されるので、設定します。
今回はcron形式で5分ごとに実行するように設定しています。
cronのsyntaxについては Schedule type on EventBridge Scheduler のページを参考にしてください。
設定が完了するとLambda関数のダイアグラムのトリガーにEventBridgeが追加されます。
ちなみに私はLINEにメッセージを通知するFunctionを作って動かしてみました。
こんな感じで5分に1回通知がくるようになりました。
まとめ AWS EventBridgeを用いてLambdaを定期実行する方法を解説しました。
設定したEventBridgeについてはこのまま放置しておくと、課金が発生するので、不要になったら削除しておきましょう。</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>AWS EventBridgeを用いてLambdaを定期実行する方法を解説します。</p>
<h2 id="前提">前提</h2>
<p>Lambda関数についてはすでに作成されていることを前提としています。</p>
<h2 id="手順">手順</h2>
<p>Lambda関数を選択し「トリガーを追加」を選択します。<br>
<img src="/blog/img-008-001.png" alt="img-008-001.png"></p>
<p>トリガーから「EventBridge」を選択します。<br>
<img src="/blog/img-008-002.png" alt="img-008-002.png"></p>
<p>ルールの作成画面が表示されるので、設定します。<br>
今回はcron形式で5分ごとに実行するように設定しています。<br>
cronのsyntaxについては <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html#cron-based">Schedule type on EventBridge Scheduler</a> のページを参考にしてください。<br>
<img src="/blog/img-008-003.png" alt="img-008-003.png"></p>
<p>設定が完了するとLambda関数のダイアグラムのトリガーにEventBridgeが追加されます。<br>
<img src="/blog/img-008-004.png" alt="img-008-004.png"></p>
<p>ちなみに私はLINEにメッセージを通知するFunctionを作って動かしてみました。<br>
こんな感じで5分に1回通知がくるようになりました。</p>
<p><img src="/blog/img-008-005.png" alt="img-008-005.png"></p>
<h2 id="まとめ">まとめ</h2>
<p>AWS EventBridgeを用いてLambdaを定期実行する方法を解説しました。<br>
設定したEventBridgeについてはこのまま放置しておくと、課金が発生するので、不要になったら削除しておきましょう。</p>
]]></content:encoded></item><item><title>Scheduling Lambda Functions Regularly Using AWS EventBridge</title><link>https://bossagyu.com/en/blog/008-aws-eventbrdge/</link><pubDate>Thu, 21 Dec 2023 23:03:13 +0900</pubDate><guid>https://bossagyu.com/en/blog/008-aws-eventbrdge/</guid><description>Overview This article explains how to schedule regular executions of Lambda functions using AWS EventBridge.
Prerequisite It is assumed that the Lambda function has already been created.
Steps Select the Lambda function and choose &amp;lsquo;Add trigger&amp;rsquo;.
Select &amp;lsquo;EventBridge&amp;rsquo; from the triggers.
The rule creation screen will appear. Configure the settings.
For this example, I set it to execute every 5 minutes using a cron expression.
For cron syntax, refer to the Schedule type on EventBridge Scheduler page.</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>This article explains how to schedule regular executions of Lambda functions using AWS EventBridge.</p>
<h2 id="prerequisite">Prerequisite</h2>
<p>It is assumed that the Lambda function has already been created.</p>
<h2 id="steps">Steps</h2>
<p>Select the Lambda function and choose &lsquo;Add trigger&rsquo;.<br>
<img src="/blog/img-008-001.png" alt="img-008-001.png"></p>
<p>Select &lsquo;EventBridge&rsquo; from the triggers.<br>
<img src="/blog/img-008-002.png" alt="img-008-002.png"></p>
<p>The rule creation screen will appear. Configure the settings.<br>
For this example, I set it to execute every 5 minutes using a cron expression.<br>
For cron syntax, refer to the <a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html#cron-based">Schedule type on EventBridge Scheduler</a> page.<br>
<img src="/blog/img-008-003.png" alt="img-008-003.png"></p>
<p>Once configured, EventBridge will be added to the triggers in the Lambda function diagram.<br>
<img src="/blog/img-008-004.png" alt="img-008-004.png"></p>
<p>As an aside, I created and tested a Function to send messages to LINE.<br>
Now, it sends notifications every 5 minutes like this.</p>
<p><img src="/blog/img-008-005.png" alt="img-008-005.png"></p>
<h2 id="summary">Summary</h2>
<p>This article explained how to schedule Lambda functions regularly using AWS EventBridge.<br>
Keep in mind that leaving the configured EventBridge running can incur charges, so delete it if it&rsquo;s no longer needed.</p>
]]></content:encoded></item><item><title>Google Search Consoleを用いてブログをGoogle検索の対象にする方法</title><link>https://bossagyu.com/blog/007-google-search-console/</link><pubDate>Mon, 18 Dec 2023 19:10:04 +0900</pubDate><guid>https://bossagyu.com/blog/007-google-search-console/</guid><description>概要 Google検索で引っかかるようにするために、SEO対策を行いましょうとありますが、まずはGoogle検索に認識されないと話になりません。 この記事では、Google Search Consoleを用いて自身が作成した独自ドメインのブログが、Google検索の対象となる方法を解説します。
実現までの流れ Google Search Consoleの登録 ドメインの所有権の確認 サイトマップの登録 インデックス登録をリクエスト まとめ Google Search Consoleの登録 Google Search Consoleに登録します。
ドメインを選択肢、URLを入力します。
ドメインの所有権の確認 以下のような画像が表示されDNSの所有権を確認します。
(念のためTXTレコードの内容は黒く塗りつぶしています。) ドメインのTXTにGoogleが指定した文字列を追加することで、所有権を確認することができます。 ドメインのDNSの設定画面に移動し、TXTレコードを追加します。
私の場合はNetlifyでドメインを取得しているので、NetlifyのDNSの設定画面に移動します。 Domains -&amp;gt; Domain Settings -&amp;gt; DNS Records に移動し、TXTレコードを追加します。 レコードの内容はGoogle Search Consoleに表示されているものをコピーしてValueに貼り付けます。
(Valueの部分は黒く塗りつぶしています。) DNSの反映を待ちます。ものによっては数時間かかる場合があります。
DNSの反映はコマンドラインからでも確認できます。
dig -t txt bossagyu.comその後、Google Search Consoleの所有権の確認を押します。
これで所有権の確認が完了し、Google Search Consoleにドメインが登録されます。
サイトマップの登録 サイトマップを登録することで、Googleにサイトの構造を伝え、サイトのクロールを促進することができます。 Hugoで作成したブログの場合は、/sitemap.xmlにサイトマップが作成されているので、これを登録します。
Google Search Consoleの左側のメニューから「サイトマップ」を選択し、サイトマップを追加します。 インデックス登録をリクエスト サイトマップに登録されていても、Googleがクロールして、その後インデックスが登録されるまでには時間がかかります。 私の場合は数日待ってもインデックスが登録されなかったので、インデックス登録をリクエストしました。
Google Search Consoleの検索窓で登録したいURLを検索し、検索結果の右側にある「インデックス登録をリクエスト」を押します。 これでインデックス登録をリクエストできます。 クリックしてから数時間でインデックスが登録されました。
まとめ Google Search Consoleを用いて自身が作成した独自ドメインのブログが検索に引っかかるようにする方法を解説しました。
せっかくブログを作成したのに、Google検索に引っかからないのはもったいないので、ぜひ試してみてください。</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>Google検索で引っかかるようにするために、SEO対策を行いましょうとありますが、まずはGoogle検索に認識されないと話になりません。
この記事では、Google Search Consoleを用いて自身が作成した独自ドメインのブログが、Google検索の対象となる方法を解説します。</p>
<h2 id="実現までの流れ">実現までの流れ</h2>
<ol>
<li>Google Search Consoleの登録</li>
<li>ドメインの所有権の確認</li>
<li>サイトマップの登録</li>
<li>インデックス登録をリクエスト</li>
<li>まとめ</li>
</ol>
<h2 id="google-search-consoleの登録">Google Search Consoleの登録</h2>
<p><a href="https://search.google.com/search-console/welcome">Google Search Console</a>に登録します。</p>
<p>ドメインを選択肢、URLを入力します。<br>
<img src="/blog/img-007-001.png" alt="img-007-001.png"></p>
<h2 id="ドメインの所有権の確認">ドメインの所有権の確認</h2>
<p>以下のような画像が表示されDNSの所有権を確認します。<br>
(念のためTXTレコードの内容は黒く塗りつぶしています。)
<img src="/blog/img-007-002.png" alt="img-007-002.png"></p>
<p>ドメインのTXTにGoogleが指定した文字列を追加することで、所有権を確認することができます。
ドメインのDNSの設定画面に移動し、TXTレコードを追加します。</p>
<p>私の場合はNetlifyでドメインを取得しているので、NetlifyのDNSの設定画面に移動します。
<code>Domains -&gt; Domain Settings -&gt; DNS Records</code> に移動し、TXTレコードを追加します。
<img src="/blog/img-007-003.png" alt="img-007-003.png"></p>
<p>レコードの内容はGoogle Search Consoleに表示されているものをコピーしてValueに貼り付けます。<br>
(Valueの部分は黒く塗りつぶしています。)
<img src="/blog/img-007-004.png" alt="img-007-004.png"></p>
<p>DNSの反映を待ちます。ものによっては数時間かかる場合があります。</p>
<p>DNSの反映はコマンドラインからでも確認できます。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>dig -t txt bossagyu.com</span></span></code></pre></div><p>その後、Google Search Consoleの所有権の確認を押します。<br>
これで所有権の確認が完了し、Google Search Consoleにドメインが登録されます。</p>
<h2 id="サイトマップの登録">サイトマップの登録</h2>
<p>サイトマップを登録することで、Googleにサイトの構造を伝え、サイトのクロールを促進することができます。
Hugoで作成したブログの場合は、<code>/sitemap.xml</code>にサイトマップが作成されているので、これを登録します。</p>
<p>Google Search Consoleの左側のメニューから「サイトマップ」を選択し、サイトマップを追加します。
<img src="/blog/img-007-005.png" alt="img-007-005.png"></p>
<h2 id="インデックス登録をリクエスト">インデックス登録をリクエスト</h2>
<p>サイトマップに登録されていても、Googleがクロールして、その後インデックスが登録されるまでには時間がかかります。
私の場合は数日待ってもインデックスが登録されなかったので、インデックス登録をリクエストしました。</p>
<p>Google Search Consoleの検索窓で登録したいURLを検索し、検索結果の右側にある「インデックス登録をリクエスト」を押します。
<img src="/blog/img-007-006.png" alt="img-007-006.png"></p>
<p>これでインデックス登録をリクエストできます。
クリックしてから数時間でインデックスが登録されました。</p>
<h2 id="まとめ">まとめ</h2>
<p>Google Search Consoleを用いて自身が作成した独自ドメインのブログが検索に引っかかるようにする方法を解説しました。<br>
せっかくブログを作成したのに、Google検索に引っかからないのはもったいないので、ぜひ試してみてください。</p>
]]></content:encoded></item><item><title>Using Google Search Console to Make Your Blog Searchable on Google</title><link>https://bossagyu.com/en/blog/007-google-search-console/</link><pubDate>Mon, 18 Dec 2023 19:10:04 +0900</pubDate><guid>https://bossagyu.com/en/blog/007-google-search-console/</guid><description>Overview To appear in Google searches, it&amp;rsquo;s not enough just to apply SEO strategies; your site must first be recognized by Google. This article explains how to make your own custom domain blog appear in Google search results using Google Search Console.
Steps to Implementation Registering with Google Search Console Verifying Domain Ownership Registering the Sitemap Requesting Index Registration Summary Registering with Google Search Console Register on Google Search Console.</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>To appear in Google searches, it&rsquo;s not enough just to apply SEO strategies; your site must first be recognized by Google. This article explains how to make your own custom domain blog appear in Google search results using Google Search Console.</p>
<h2 id="steps-to-implementation">Steps to Implementation</h2>
<ol>
<li>Registering with Google Search Console</li>
<li>Verifying Domain Ownership</li>
<li>Registering the Sitemap</li>
<li>Requesting Index Registration</li>
<li>Summary</li>
</ol>
<h2 id="registering-with-google-search-console">Registering with Google Search Console</h2>
<p>Register on <a href="https://search.google.com/search-console/welcome">Google Search Console</a>.</p>
<p>Choose your domain and enter the URL.<br>
<img src="/blog/img-007-001.png" alt="img-007-001.png"></p>
<h2 id="verifying-domain-ownership">Verifying Domain Ownership</h2>
<p>A screen like the following will appear to verify DNS ownership.<br>
(The TXT record content is blacked out for privacy.)<br>
<img src="/blog/img-007-002.png" alt="img-007-002.png"></p>
<p>You can verify ownership by adding a string specified by Google to your domain&rsquo;s TXT record.
Go to your domain&rsquo;s DNS settings and add a TXT record.</p>
<p>In my case, I acquired the domain through Netlify, so I went to Netlify&rsquo;s DNS settings.
Navigate to <code>Domains -&gt; Domain Settings -&gt; DNS Records</code> and add the TXT record.<br>
<img src="/blog/img-007-003.png" alt="img-007-003.png"></p>
<p>Copy the content displayed on Google Search Console and paste it into the Value field.<br>
(The Value part is blacked out for privacy.)<br>
<img src="/blog/img-007-004.png" alt="img-007-004.png"></p>
<p>Wait for DNS updates, which can take a few hours depending on the provider.</p>
<p>You can check DNS propagation from the command line.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>dig -t txt bossagyu.com</span></span></code></pre></div><p>Afterward, press the verify ownership button on Google Search Console.<br>
This completes the verification process, and your domain will be registered with Google Search Console.</p>
<h2 id="registering-the-sitemap">Registering the Sitemap</h2>
<p>Registering a sitemap informs Google about the structure of your site, facilitating the crawling process.
For blogs created with Hugo, the sitemap is available at <code>/sitemap.xml</code>, which you should register.</p>
<p>From the left menu of Google Search Console, select &lsquo;Sitemaps&rsquo; and add your sitemap.<br>
<img src="/blog/img-007-005.png" alt="img-007-005.png"></p>
<h2 id="requesting-index-registration">Requesting Index Registration</h2>
<p>Even if your site is registered in the sitemap, it can take time for Google to crawl and index it.
In my case, I requested index registration after waiting several days without being indexed.</p>
<p>Search for the URL you want to register in Google Search Console, and click on &lsquo;Request Indexing&rsquo; found on the right side of the search result.<br>
<img src="/blog/img-007-006.png" alt="img-007-006.png"></p>
<p>This requests index registration.
It took a few hours for the index to be registered after clicking.</p>
<h2 id="summary">Summary</h2>
<p>This article explained how to make your custom domain blog searchable using Google Search Console.<br>
It&rsquo;s a waste not to have your blog appear in Google searches after all the effort of creating it, so give it a try.</p>
]]></content:encoded></item><item><title>Efficient Lambda Development with AWS Toolkit in IntelliJ</title><link>https://bossagyu.com/en/blog/006-intellij-lamda-setup/</link><pubDate>Tue, 12 Dec 2023 22:40:05 +0900</pubDate><guid>https://bossagyu.com/en/blog/006-intellij-lamda-setup/</guid><description>Overview This article explains how to efficiently develop Lambda functions using the AWS Toolkit in IntelliJ.
Steps to Implementation Preliminary Preparation Installing AWS Toolkit Configuring AWS Toolkit Developing Lambda Executing Lambda Locally Summary Preliminary Preparation Installing Docker AWS Toolkit in IntelliJ uses Docker to run Lambda.
Prior to proceeding, please install Docker by referring to these instructions.
Installing AWS CLI Install AWS CLI (SAM).
For installation, refer to these instructions.</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>This article explains how to efficiently develop Lambda functions using the AWS Toolkit in IntelliJ.</p>
<h2 id="steps-to-implementation">Steps to Implementation</h2>
<ol>
<li>Preliminary Preparation</li>
<li>Installing AWS Toolkit</li>
<li>Configuring AWS Toolkit</li>
<li>Developing Lambda</li>
<li>Executing Lambda Locally</li>
<li>Summary</li>
</ol>
<h2 id="preliminary-preparation">Preliminary Preparation</h2>
<h3 id="installing-docker">Installing Docker</h3>
<p>AWS Toolkit in IntelliJ uses Docker to run Lambda.<br>
Prior to proceeding, please install Docker by referring to <a href="https://docs.docker.jp/docker-for-mac/install.html">these instructions</a>.</p>
<h3 id="installing-aws-cli">Installing AWS CLI</h3>
<p>Install AWS CLI (SAM).<br>
For installation, refer to <a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2-mac.html">these instructions</a>.</p>
<p>In IntelliJ, set the path for SAM CLI executable under <code>File -&gt; Settings -&gt; Tools -&gt; AWS Toolkit</code>.<br>
In my case, as I installed it through brew, I set the following path.<br>
<img src="/blog/img-006-005.png" alt="img-006-005.png"></p>
<h2 id="installing-aws-toolkit">Installing AWS Toolkit</h2>
<p>Install the AWS Toolkit via IntelliJ plugins.
Refer to <a href="https://www.jetbrains.com/help/idea/managing-plugins.html#install_plugin">this guide</a> for plugin installation.</p>
<h2 id="configuring-aws-toolkit">Configuring AWS Toolkit</h2>
<p>To use AWS Toolkit, you need to set up your AWS credentials.</p>
<p>Set up AWS credentials through AWS Explorer.<br>
<img src="/blog/img-006-001.png" alt="img-006-001.png"></p>
<p>Obtain and configure your Access Key ID and Secret Access Key from the AWS console.
Once configured, AWS resources should appear in AWS Explorer.<br>
<img src="/blog/img-006-002.png" alt="img-006-002.png"></p>
<p>Note: In this image, the region is set to <code>us-east-1</code>. Please adjust according to the region where you intend to create your Lambda.</p>
<h2 id="developing-lambda">Developing Lambda</h2>
<p>Create a code snippet like the following.</p>
<p>lambda-sample.py</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">lambda_handler</span>(event, context):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Hello World&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span></span></span></code></pre></div><p>Create a Lambda through AWS Explorer.<br>
<img src="/blog/img-006-003.png" alt="img-006-003.png"></p>
<p>Select Create Lambda Function and input the necessary values.<br>
For the Handler, enter <code>&lt;filename&gt;.&lt;function name&gt;</code> from your code snippet.<br>
<img src="/blog/img-006-004.png" alt="img-006-004.png"></p>
<p>This completes the creation of your Lambda.</p>
<h2 id="executing-lambda-locally">Executing Lambda Locally</h2>
<p>The Toolkit also allows you to execute Lambda locally.
<img src="/blog/img-006-006.png" alt="img-006-006.png"></p>
<p>Selecting Run will execute the Lambda locally.</p>
<h2 id="summary">Summary</h2>
<p>This article provided a guide on efficiently developing Lambda using AWS Toolkit in IntelliJ.
Developing in IntelliJ and executing locally can significantly improve development efficiency.</p>
]]></content:encoded></item><item><title>IntellijでAWS Toolkitを使ってLambdaを効率よく開発する</title><link>https://bossagyu.com/blog/006-intellij-lamda-setup/</link><pubDate>Tue, 12 Dec 2023 22:40:05 +0900</pubDate><guid>https://bossagyu.com/blog/006-intellij-lamda-setup/</guid><description>概要 IntellijでAWS Toolkitを使ってLambdaを効率よく開発する方法を解説します。
実現までの流れ 事前準備 AWS Toolkitのインストール AWS Toolkitの設定 Lambdaの開発 Lambdaをローカルで実行 まとめ 事前準備 dockerのインストール intellijで利用するAWS Toolkitでは、Lambda動作させるためにDockerを使用します。
このため事前に こちらを参考にDockerをインストールしておいてください。
AWS CLIのインストール AWS CLI(SAM)をインストールします。
インストール方法は こちら を参考にしてください。
IntellijにSAM CLI executableのパスを File -&amp;gt; Settings -&amp;gt; Tools -&amp;gt; AWS Toolkit から設定します。
私の環境ではbrewでインストールしたので、以下のパスを設定しました。 AWS Toolkitのインストール IntellijのプラグインからAWS Toolkitをインストールします。 プラグインのインストールは こちら を参考にしてください。
AWS Toolkitの設定 AWS Toolkitを利用するためにはAWSの認証情報を設定する必要があります。
AWS ExplorerからAWSの認証情報を設定します。 Access Key IDとSecret Access KeyをAWSのコンソールから取得し、設定します。 設定が完了したら、AWS ExplorerにAWSのリソースが表示されるようになります。 この画像ではリージョンが us-east-1 になっていますが、Lambdaを作成するリージョンに合わせてください。
Lambdaの開発 以下のようなコードスニペットを作成します。
lamda-sample.py
def lambda_handler(event, context): print(&amp;#34;Hello World&amp;#34;) return &amp;#34;Hello World!</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>IntellijでAWS Toolkitを使ってLambdaを効率よく開発する方法を解説します。</p>
<h2 id="実現までの流れ">実現までの流れ</h2>
<ol>
<li>事前準備</li>
<li>AWS Toolkitのインストール</li>
<li>AWS Toolkitの設定</li>
<li>Lambdaの開発</li>
<li>Lambdaをローカルで実行</li>
<li>まとめ</li>
</ol>
<h2 id="事前準備">事前準備</h2>
<h3 id="dockerのインストール">dockerのインストール</h3>
<p>intellijで利用するAWS Toolkitでは、Lambda動作させるためにDockerを使用します。<br>
このため事前に <a href="https://docs.docker.jp/docker-for-mac/install.html">こちら</a>を参考にDockerをインストールしておいてください。</p>
<h3 id="aws-cliのインストール">AWS CLIのインストール</h3>
<p>AWS CLI(SAM)をインストールします。<br>
インストール方法は <a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2-mac.html">こちら</a> を参考にしてください。</p>
<p>IntellijにSAM CLI executableのパスを <code>File -&gt; Settings -&gt; Tools -&gt; AWS Toolkit</code> から設定します。<br>
私の環境ではbrewでインストールしたので、以下のパスを設定しました。
<img src="/blog/img-006-005.png" alt="img-006-005.png"></p>
<h2 id="aws-toolkitのインストール">AWS Toolkitのインストール</h2>
<p>IntellijのプラグインからAWS Toolkitをインストールします。
プラグインのインストールは <a href="https://www.jetbrains.com/help/idea/managing-plugins.html#install_plugin">こちら</a> を参考にしてください。</p>
<h2 id="aws-toolkitの設定">AWS Toolkitの設定</h2>
<p>AWS Toolkitを利用するためにはAWSの認証情報を設定する必要があります。</p>
<p>AWS ExplorerからAWSの認証情報を設定します。
<img src="/blog/img-006-001.png" alt="img-006-001.png"></p>
<p>Access Key IDとSecret Access KeyをAWSのコンソールから取得し、設定します。
設定が完了したら、AWS ExplorerにAWSのリソースが表示されるようになります。
<img src="/blog/img-006-002.png" alt="img-006-002.png"></p>
<p>この画像ではリージョンが <code>us-east-1</code> になっていますが、Lambdaを作成するリージョンに合わせてください。</p>
<h2 id="lambdaの開発">Lambdaの開発</h2>
<p>以下のようなコードスニペットを作成します。</p>
<p>lamda-sample.py</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">lambda_handler</span>(event, context):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Hello World&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span></span></span></code></pre></div><p>AWS ExplorerからLambdaを作成します。<br>
<img src="/blog/img-006-003.png" alt="img-006-003.png"></p>
<p>Create Lambda Functionを選択し、必要な値を入力します。<br>
Handlerにはコードスニペットの <code>&lt;ファイル名&gt;.&lt;関数名&gt;</code> を入力してください。<br>
<img src="/blog/img-006-004.png" alt="img-006-004.png"></p>
<p>これでLambdaの作成が完了しました。</p>
<h2 id="lambdaをローカルで実行">Lambdaをローカルで実行</h2>
<p>またToolkitを利用すると、Lambdaをローカルで実行することができます。
<img src="/blog/img-006-006.png" alt="img-006-006.png"></p>
<p>Runを選択すると、Lambdaがローカルで実行されます。</p>
<h2 id="まとめ">まとめ</h2>
<p>IntellijでAWS Toolkitを使ってLambdaを効率よく開発する方法を解説しました。
Intellijで開発してローカルで実行できるので、開発効率がかなり上がります。</p>
]]></content:encoded></item><item><title>How to Use GitHub Copilot in IntelliJ</title><link>https://bossagyu.com/en/blog/005-github-copilot/</link><pubDate>Mon, 11 Dec 2023 22:45:40 +0900</pubDate><guid>https://bossagyu.com/en/blog/005-github-copilot/</guid><description>Overview This article explains how to use GitHub Copilot in IntelliJ. Additionally, a cheat sheet of shortcuts is provided.
Steps to Implementation Register for GitHub Copilot Configure IntelliJ Use GitHub Copilot Summary Registering for GitHub Copilot Register for GitHub Copilot through the GitHub Copilot link.
Configuring IntelliJ Install the GitHub Copilot plugin from IntelliJ plugins.
Once installed, restart IntelliJ.
Using GitHub Copilot When you write code in IntelliJ, GitHub Copilot will assist with code completion.</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>This article explains how to use GitHub Copilot in IntelliJ.
Additionally, a cheat sheet of shortcuts is provided.</p>
<h2 id="steps-to-implementation">Steps to Implementation</h2>
<ol>
<li>Register for GitHub Copilot</li>
<li>Configure IntelliJ</li>
<li>Use GitHub Copilot</li>
<li>Summary</li>
</ol>
<h2 id="registering-for-github-copilot">Registering for GitHub Copilot</h2>
<p>Register for GitHub Copilot through the <a href="https://copilot.github.com/">GitHub Copilot</a> link.</p>
<h2 id="configuring-intellij">Configuring IntelliJ</h2>
<p>Install the GitHub Copilot plugin from IntelliJ plugins.</p>
<p><img src="/blog/img-005-001.png" alt="GitHub Copilot plugin"></p>
<p>Once installed, restart IntelliJ.</p>
<h2 id="using-github-copilot">Using GitHub Copilot</h2>
<p>When you write code in IntelliJ, GitHub Copilot will assist with code completion.</p>
<p>Here is a list of shortcuts for Mac:</p>
<table>
<thead>
<tr>
<th>Shortcut</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>tab</code></td>
<td>Complete the code</td>
</tr>
<tr>
<td><code>Option</code> + <code>]</code></td>
<td>Show the next completion suggestion</td>
</tr>
<tr>
<td><code>Option</code> + <code>[</code></td>
<td>Show the previous completion suggestion</td>
</tr>
<tr>
<td><code>Command</code> + <code>→</code></td>
<td>Accept only the next word of the suggestion</td>
</tr>
</tbody>
</table>
<h2 id="summary">Summary</h2>
<p>This article explained how to use GitHub Copilot in IntelliJ.
It&rsquo;s worth noting that this article was written using GitHub Copilot, and it significantly assists with blog creation in Markdown, so those interested should give it a try.</p>
]]></content:encoded></item><item><title>IntellijでのGithub Copilotの使い方</title><link>https://bossagyu.com/blog/005-github-copilot/</link><pubDate>Mon, 11 Dec 2023 22:45:40 +0900</pubDate><guid>https://bossagyu.com/blog/005-github-copilot/</guid><description>概要 Github CopilotをIntellijで使う方法を解説します。 合わせてショートカットのチートシートを記載します。
実現までの流れ Github Copilotの登録 Intellijの設定 Github Copilotの利用 まとめ Github Copilotの登録 Github Copilot のリンクからGithub Copilotに登録します。
Intellijの設定 IntellijのプラグインからGithub Copilotをインストールします。
インストールが完了したら、Intellijを再起動します。
Github Copilotの利用 Intellijでコードを書いていると、Github Copilotがコードを補完してくれます。
macのショートカットの一覧は以下のとおりです。
ショートカット 機能 tab コードを補完する Option + ] 次の補完候補を表示する Option + [ 前の補完候補を表示する Command + → 提案の次の単語のみ受け入れる まとめ IntellijでGithub Copilotを利用する方法を解説しました。
この記事はGithub Copilotを利用して書いており、Markdownでのブログ作成でもかなり補完してくれるので、気になる人は試してみてください。</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>Github CopilotをIntellijで使う方法を解説します。
合わせてショートカットのチートシートを記載します。</p>
<h2 id="実現までの流れ">実現までの流れ</h2>
<ol>
<li>Github Copilotの登録</li>
<li>Intellijの設定</li>
<li>Github Copilotの利用</li>
<li>まとめ</li>
</ol>
<h2 id="github-copilotの登録">Github Copilotの登録</h2>
<p><a href="https://copilot.github.com/">Github Copilot</a> のリンクからGithub Copilotに登録します。</p>
<h2 id="intellijの設定">Intellijの設定</h2>
<p>IntellijのプラグインからGithub Copilotをインストールします。</p>
<p><img src="/blog/img-005-001.png" alt="Github Copilot plugin"></p>
<p>インストールが完了したら、Intellijを再起動します。</p>
<h2 id="github-copilotの利用">Github Copilotの利用</h2>
<p>Intellijでコードを書いていると、Github Copilotがコードを補完してくれます。</p>
<p>macのショートカットの一覧は以下のとおりです。</p>
<table>
<thead>
<tr>
<th>ショートカット</th>
<th>機能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>tab</code></td>
<td>コードを補完する</td>
</tr>
<tr>
<td><code>Option</code> + <code>]</code></td>
<td>次の補完候補を表示する</td>
</tr>
<tr>
<td><code>Option</code> + <code>[</code></td>
<td>前の補完候補を表示する</td>
</tr>
<tr>
<td><code>Command</code> + <code>→</code></td>
<td>提案の次の単語のみ受け入れる</td>
</tr>
</tbody>
</table>
<h2 id="まとめ">まとめ</h2>
<p>IntellijでGithub Copilotを利用する方法を解説しました。<br>
この記事はGithub Copilotを利用して書いており、Markdownでのブログ作成でもかなり補完してくれるので、気になる人は試してみてください。</p>
]]></content:encoded></item><item><title>Pyenvとvenvを用いたローカル環境のセットアップ方法</title><link>https://bossagyu.com/blog/004-paython-setup/</link><pubDate>Sun, 10 Dec 2023 23:19:33 +0900</pubDate><guid>https://bossagyu.com/blog/004-paython-setup/</guid><description>概要 macのローカル環境で開発を行う際のpythonの環境構築の方法について記載する。
今回は以下の２つの仕組みを利用して、pythonのバージョン管理と仮想環境の管理を行う。
pyenv 複数のpythonのバージョンを扱うために利用する。 venv プロジェクトごとに環境を分けるために利用する。 それぞれの違いや必要性の解説はこちらの記事が参考になります。
Pythonのインストール まずは、ローカル環境にPyenvをインストールし、任意のPythonバージョンを利用できるようにします。
pyenvをインストールします。
brew install pyenvインストールしたpyenvのバージョンを確認します。
pyenv --version pyenv 2.3.35zshに設定を追加する。
echo &amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo -e &amp;#39;if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n eval &amp;#34;$(pyenv init -)&amp;#34;\nfi&amp;#39; &amp;gt;&amp;gt; ~/.zshrc.zshrcの内容を読み込む。
source ~/.zshrcインストール可能なPythonのバージョン一覧を表示する。
pyenv install --list指定したバージョンをインストールする。
pyenv install 3.11.7プロジェクトフォルダに指定したPythonのバージョンを利用する。
cd &amp;lt;作成したプロジェクトフォルダ&amp;gt; pyenv local 3.11.7 pyenv versionsglobalの場合は全体に反映される。
pyenv global 3.11.7実行されているpythonのバージョンを確認する。
python -Vvenvで仮想環境の作成 プロジェクトのディレクトリに仮想環境を作成する。
# python -m venv &amp;lt;仮想環境名&amp;gt; python -m venv venv仮想環境を有効化する。</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>macのローカル環境で開発を行う際のpythonの環境構築の方法について記載する。<br>
今回は以下の２つの仕組みを利用して、pythonのバージョン管理と仮想環境の管理を行う。</p>
<ul>
<li>pyenv
<ul>
<li>複数のpythonのバージョンを扱うために利用する。</li>
</ul>
</li>
<li>venv
<ul>
<li>プロジェクトごとに環境を分けるために利用する。</li>
</ul>
</li>
</ul>
<p>それぞれの違いや必要性の解説は<a href="https://jimaru.blog/programming/python/venv_pyenv_choice/">こちら</a>の記事が参考になります。</p>
<h2 id="pythonのインストール">Pythonのインストール</h2>
<p>まずは、ローカル環境にPyenvをインストールし、任意のPythonバージョンを利用できるようにします。</p>
<p>pyenvをインストールします。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>brew install pyenv</span></span></code></pre></div><p>インストールしたpyenvのバージョンを確認します。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pyenv --version
</span></span><span style="display:flex;"><span>pyenv 2.3.35</span></span></code></pre></div><p>zshに設定を追加する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;export PYENV_ROOT=&#34;$HOME/.pyenv&#34;&#39;</span> &gt;&gt; ~/.zshrc    
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;export PATH=&#34;$PYENV_ROOT/bin:$PATH&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span><span style="display:flex;"><span>echo -e <span style="color:#e6db74">&#39;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &#34;$(pyenv init -)&#34;\nfi&#39;</span> &gt;&gt; ~/.zshrc</span></span></code></pre></div><p><code>.zshrc</code>の内容を読み込む。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>source ~/.zshrc</span></span></code></pre></div><p>インストール可能なPythonのバージョン一覧を表示する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pyenv install --list</span></span></code></pre></div><p>指定したバージョンをインストールする。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pyenv install 3.11.7</span></span></code></pre></div><p>プロジェクトフォルダに指定したPythonのバージョンを利用する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd &lt;作成したプロジェクトフォルダ&gt;
</span></span><span style="display:flex;"><span>pyenv local 3.11.7
</span></span><span style="display:flex;"><span>pyenv versions</span></span></code></pre></div><p>globalの場合は全体に反映される。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pyenv global 3.11.7</span></span></code></pre></div><p>実行されているpythonのバージョンを確認する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>python -V</span></span></code></pre></div><h2 id="venvで仮想環境の作成">venvで仮想環境の作成</h2>
<p>プロジェクトのディレクトリに仮想環境を作成する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># python -m venv &lt;仮想環境名&gt;</span>
</span></span><span style="display:flex;"><span>python -m venv venv</span></span></code></pre></div><p>仮想環境を有効化する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>source venv/bin/activate</span></span></code></pre></div><p>ディアクティベートは以下のコマンドで実行できる。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>deactivate</span></span></code></pre></div><p>以上でローカル環境の構築が完了です。</p>
]]></content:encoded></item><item><title>Setting Up a Local Environment Using Pyenv and venv</title><link>https://bossagyu.com/en/blog/004-paython-setup/</link><pubDate>Sun, 10 Dec 2023 23:19:33 +0900</pubDate><guid>https://bossagyu.com/en/blog/004-paython-setup/</guid><description>Overview This article documents how to set up a Python environment for development on a Mac local environment.
In this case, we will use two systems to manage different versions of Python and virtual environments:
pyenv Used to handle multiple versions of Python. venv Used to separate environments for each project. For explanations on the differences and the necessity of each, this article is a helpful reference.
Installing Python First, install Pyenv on your local environment to use a specific version of Python.</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>This article documents how to set up a Python environment for development on a Mac local environment.<br>
In this case, we will use two systems to manage different versions of Python and virtual environments:</p>
<ul>
<li>pyenv
<ul>
<li>Used to handle multiple versions of Python.</li>
</ul>
</li>
<li>venv
<ul>
<li>Used to separate environments for each project.</li>
</ul>
</li>
</ul>
<p>For explanations on the differences and the necessity of each, this <a href="https://jimaru.blog/programming/python/venv_pyenv_choice/">article</a> is a helpful reference.</p>
<h2 id="installing-python">Installing Python</h2>
<p>First, install Pyenv on your local environment to use a specific version of Python.</p>
<p>Install pyenv.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>brew install pyenv</span></span></code></pre></div><p>Check the installed version of pyenv.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pyenv --version
</span></span><span style="display:flex;"><span>pyenv 2.3.35</span></span></code></pre></div><p>Add settings to zsh.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;export PYENV_ROOT=&#34;$HOME/.pyenv&#34;&#39;</span> &gt;&gt; ~/.zshrc    
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;export PATH=&#34;$PYENV_ROOT/bin:$PATH&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span><span style="display:flex;"><span>echo -e <span style="color:#e6db74">&#39;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &#34;$(pyenv init -)&#34;\nfi&#39;</span> &gt;&gt; ~/.zshrc</span></span></code></pre></div><p>Reload <code>.zshrc</code>.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>source ~/.zshrc</span></span></code></pre></div><p>Display a list of installable Python versions.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pyenv install --list</span></span></code></pre></div><p>Install the specified version.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pyenv install 3.11.7</span></span></code></pre></div><p>Use the specified Python version in your project folder.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd &lt;created project folder&gt;
</span></span><span style="display:flex;"><span>pyenv local 3.11.7
</span></span><span style="display:flex;"><span>pyenv versions</span></span></code></pre></div><p>If global, it will be applied to the entire system.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pyenv global 3.11.7</span></span></code></pre></div><p>Check the version of Python being executed.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>python -V</span></span></code></pre></div><h2 id="creating-a-virtual-environment-with-venv">Creating a Virtual Environment with venv</h2>
<p>Create a virtual environment in the project directory.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># python -m venv &lt;virtual environment name&gt;</span>
</span></span><span style="display:flex;"><span>python -m venv venv</span></span></code></pre></div><p>Activate the virtual environment.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>source venv/bin/activate</span></span></code></pre></div><p>To deactivate, execute the following command.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>deactivate</span></span></code></pre></div><p>This completes the setup of the local environment.</p>
]]></content:encoded></item><item><title>How to Set Up Google Analytics with Hugo</title><link>https://bossagyu.com/en/blog/003-google-analytics/</link><pubDate>Sat, 09 Dec 2023 18:09:42 +0900</pubDate><guid>https://bossagyu.com/en/blog/003-google-analytics/</guid><description>Overview This article briefly explains how to set up Google Analytics with Hugo.
Steps to Implementation Register with Google Analytics Obtain the Tracking ID Add the Tracking ID to Hugo&amp;rsquo;s configuration Registering with Google Analytics Follow the instructions on Setting up a new website or app with GA4 to register.
When you add a data stream, you will get a Tracking ID, so make a note of it. ※ The Tracking ID may be displayed as &amp;ldquo;Measurement ID&amp;rdquo; due to translation.</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>This article briefly explains how to set up Google Analytics with Hugo.</p>
<h2 id="steps-to-implementation">Steps to Implementation</h2>
<ol>
<li>Register with Google Analytics</li>
<li>Obtain the Tracking ID</li>
<li>Add the Tracking ID to Hugo&rsquo;s configuration</li>
</ol>
<h2 id="registering-with-google-analytics">Registering with Google Analytics</h2>
<p>Follow the instructions on <a href="https://support.google.com/analytics/answer/9304153?hl=ja">Setting up a new website or app with GA4</a> to register.<br>
When you add a data stream, you will get a Tracking ID, so make a note of it.
<img src="/blog/img-003-001.png" alt="img-003-001.png">
※ The Tracking ID may be displayed as &ldquo;Measurement ID&rdquo; due to translation.</p>
<h2 id="adding-tracking-id-to-hugos-configuration">Adding Tracking ID to Hugo&rsquo;s Configuration</h2>
<h3 id="add-settings-in-toml">Add settings in toml</h3>
<p>Add <code>googleAnalytics = Tracking ID</code> to your config.toml.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">baseURL</span> = <span style="color:#e6db74">&#39;https://bossagyu.com&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">languageCode</span> = <span style="color:#e6db74">&#39;ja-jp&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#39;Bossagyu Blog&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">theme</span> = <span style="color:#e6db74">&#39;hugo-bearcub&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">googleAnalytics</span> = <span style="color:#e6db74">&#34;G-1234ABCDEF&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ↑ Add this line, replace the Tracking ID with your own.</span></span></span></code></pre></div><h3 id="embedding-the-tracking-code">Embedding the Tracking Code</h3>
<p>Some templates might read settings from the toml file, but the <a href="https://github.com/clente/hugo-bearcub/tree/main">bearcub</a> template I use does not support this, so I added the tracking code to the header myself.</p>
<p>For the code snippet, I referred to <a href="https://github.com/clente/hugo-bearcub/tree/main">Makumaku Hugo Notes</a>.</p>
<p>Create <code>layouts/partials/analytics.html</code> to load the tracking code.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{ if not .Site.IsServer }}
</span></span><span style="display:flex;"><span>{{ with .Site.GoogleAnalytics }}
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- Google tag (gtag.js) --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">async</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://www.googletagmanager.com/gtag/js?id={{ . }}&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>    window.<span style="color:#a6e22e">dataLayer</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">dataLayer</span> <span style="color:#f92672">||</span> [];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">gtag</span>(){<span style="color:#a6e22e">dataLayer</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">arguments</span>);}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">gtag</span>(<span style="color:#e6db74">&#39;js&#39;</span>, <span style="color:#66d9ef">new</span> Date());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">gtag</span>(<span style="color:#e6db74">&#39;config&#39;</span>, <span style="color:#e6db74">&#39;{{ . }}&#39;</span>);
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>{{ end }}
</span></span><span style="display:flex;"><span>{{ end }}</span></span></code></pre></div><p>Make the page header load <code>analytics.html</code>.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Copy the content of the template to override it</span>
</span></span><span style="display:flex;"><span>cp themes/hugo-bearcub/layouts/_default/baseof.html layouts/_default/baseof.html 
</span></span><span style="display:flex;"><span>vim layouts/_default/baseof.html </span></span></code></pre></div><p>Add <code>{{- partial &quot;analytics&quot; . -}}</code> to baseof.html.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ with .Site.LanguageCode }}{{ . }}{{ else }}en-US{{ end }}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>  {{- partial &#34;analytics&#34; . -}}
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;X-Clacks-Overhead&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;GNU Terry Pratchett&#34;</span> <span style="color:#960050;background-color:#1e0010">/</span></span></span></code></pre></div><p>After adding the above source code and rebuilding, data will be sent to Google Analytics.</p>
<h2 id="tips">Tips</h2>
<p>If it seems like data is not being transmitted to Google Analytics despite these steps, it&rsquo;s possible that the tags have not been added correctly.<br>
To troubleshoot, first check if the tracking is included in the HTML by using Google Developer Tools.</p>
]]></content:encoded></item><item><title>HugoでGoogle Analyticsの設定をする方法</title><link>https://bossagyu.com/blog/003-google-analytics/</link><pubDate>Sat, 09 Dec 2023 18:09:42 +0900</pubDate><guid>https://bossagyu.com/blog/003-google-analytics/</guid><description>概要 HugoをでGoogle Analyticsを設定する方法をサクッと解説します。
実現までの流れ Google Analyticsへの登録 トラッキングIDの取得 Hugoの設定にトラッキングIDを追加 Google Analyticsの登録 [GA4] アナリティクスで新しいウェブサイトまたはアプリのセットアップを行う に従い登録を行います。
データストリームを追加すると、トラッキングIDが取得できるのでメモしておきます。 ※ トラッキングIDは日本語訳の影響か、測定IDという表示になっています。
Hugoの設定にトラッキングIDを追加 tomlに設定を追加 config.tomlにgoogleAnalytics = トラッキングIDを追加します。
baseURL = &amp;#39;https://bossagyu.com&amp;#39; languageCode = &amp;#39;ja-jp&amp;#39; title = &amp;#39;Bossagyu Blog&amp;#39; theme = &amp;#39;hugo-bearcub&amp;#39; googleAnalytics = &amp;#34;G-1234ABCDEF&amp;#34; # ↑ この行を追加、トラッキングIDは自分のものに変更してください。トラッキングコードを埋め込む テンプレートによってはtomlの設定を入れるだけで読めるものもあるみたいですが、 私の使用しているbearcubのテンプレートは対応してなかったので、 自分でヘッダにトラッキングコードを読み込むように追加します。
コードスニペットについてはまくまく Hugo ノートを参考にさせていただきました。
トラッキングコードを読むために layouts/partials/analytics.html を作成する。
{{ if not .Site.IsServer }} {{ with .Site.GoogleAnalytics }} &amp;lt;!-- Google tag (gtag.js) --&amp;gt; &amp;lt;script async src=&amp;#34;https://www.googletagmanager.com/gtag/js?id={{ . }}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; window.dataLayer = window.</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>HugoをでGoogle Analyticsを設定する方法をサクッと解説します。</p>
<h2 id="実現までの流れ">実現までの流れ</h2>
<ol>
<li>Google Analyticsへの登録</li>
<li>トラッキングIDの取得</li>
<li>Hugoの設定にトラッキングIDを追加</li>
</ol>
<h2 id="google-analyticsの登録">Google Analyticsの登録</h2>
<p><a href="https://support.google.com/analytics/answer/9304153?hl=ja">[GA4] アナリティクスで新しいウェブサイトまたはアプリのセットアップを行う</a>
に従い登録を行います。<br>
データストリームを追加すると、トラッキングIDが取得できるのでメモしておきます。
<img src="/blog/img-003-001.png" alt="img-003-001.png">
※ トラッキングIDは日本語訳の影響か、測定IDという表示になっています。</p>
<h2 id="hugoの設定にトラッキングidを追加">Hugoの設定にトラッキングIDを追加</h2>
<h3 id="tomlに設定を追加">tomlに設定を追加</h3>
<p>config.tomlに<code>googleAnalytics = トラッキングID</code>を追加します。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">baseURL</span> = <span style="color:#e6db74">&#39;https://bossagyu.com&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">languageCode</span> = <span style="color:#e6db74">&#39;ja-jp&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#39;Bossagyu Blog&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">theme</span> = <span style="color:#e6db74">&#39;hugo-bearcub&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">googleAnalytics</span> = <span style="color:#e6db74">&#34;G-1234ABCDEF&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ↑ この行を追加、トラッキングIDは自分のものに変更してください。</span></span></span></code></pre></div><h3 id="トラッキングコードを埋め込む">トラッキングコードを埋め込む</h3>
<p>テンプレートによってはtomlの設定を入れるだけで読めるものもあるみたいですが、
私の使用している<a href="https://github.com/clente/hugo-bearcub/tree/main">bearcub</a>のテンプレートは対応してなかったので、
自分でヘッダにトラッキングコードを読み込むように追加します。</p>
<p>コードスニペットについては<a href="https://github.com/clente/hugo-bearcub/tree/main">まくまく Hugo ノート</a>を参考にさせていただきました。</p>
<p>トラッキングコードを読むために <code>layouts/partials/analytics.html</code> を作成する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{ if not .Site.IsServer }}
</span></span><span style="display:flex;"><span>{{ with .Site.GoogleAnalytics }}
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- Google tag (gtag.js) --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">async</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://www.googletagmanager.com/gtag/js?id={{ . }}&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>    window.<span style="color:#a6e22e">dataLayer</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">dataLayer</span> <span style="color:#f92672">||</span> [];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">gtag</span>(){<span style="color:#a6e22e">dataLayer</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">arguments</span>);}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">gtag</span>(<span style="color:#e6db74">&#39;js&#39;</span>, <span style="color:#66d9ef">new</span> Date());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">gtag</span>(<span style="color:#e6db74">&#39;config&#39;</span>, <span style="color:#e6db74">&#39;{{ . }}&#39;</span>);
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>{{ end }}
</span></span><span style="display:flex;"><span>{{ end }}</span></span></code></pre></div><p>ページヘッダで <code>analytics.html</code> を読み込むようにする。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># テンプレートの内容をコピーしてきてオーバーライドする</span>
</span></span><span style="display:flex;"><span>cp themes/hugo-bearcub/layouts/_default/baseof.html layouts/_default/baseof.html 
</span></span><span style="display:flex;"><span>vim layouts/_default/baseof.html </span></span></code></pre></div><p>baseof.htmlに<code>{{- partial &quot;analytics&quot; . -}}</code> を追加する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ with .Site.LanguageCode }}{{ . }}{{ else }}en-US{{ end }}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>  {{- partial &#34;analytics&#34; . -}}
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;X-Clacks-Overhead&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;GNU Terry Pratchett&#34;</span> <span style="color:#960050;background-color:#1e0010">/</span></span></span></code></pre></div><p>上記ソースコードを追加した状態で、再度ビルドするとGoogle Analyticsにデータが送信されるようになります。</p>
<h2 id="tips">tips</h2>
<p>こちらの対応をしても、Google Analyticsにデータが連携されていないように見える場合は、タグの追加がうまくいっていない可能性があります。<br>
まずはタグがちゃんと入っているかの切り分けをするために、googleデベロッパーツールを開きトラッキングがhtml内に含まれているか確認してみるとよいです。</p>
]]></content:encoded></item><item><title>LINE Messaging APIの登録と使い方</title><link>https://bossagyu.com/blog/002-line-messaging-api/</link><pubDate>Thu, 07 Dec 2023 09:37:00 +0900</pubDate><guid>https://bossagyu.com/blog/002-line-messaging-api/</guid><description>概要 LINEのBotを利用してアプリケーションを作ってみようと考えたのでまずはBotを利用できる状態にする。
本ページでは一番最初にLINE Message APIの登録の方法とcurlでコマンドラインからメッセージを送る方法を紹介します。
Messaging APIを利用する LINE Developers にログインしてプロバイダーを作成する。
プロバイダーとは(説明)
LINE Developersサイトでは、サービスを提供し、ユーザーの情報を取得する開発者個人、 企業、または団体等をサービス提供者（LINEミニアプリではサービス事業主）と呼びます。なので好きな文字列を入れる。
そのまま新規チャンネルを作成する。 このまま作成ボタンを押すと新規チャンネルが作成される
コマンドラインからポストをする Messaging API設定からQRコードを読みこんで友達追加する。
Messaging API設定から「チャンネルアクセストークン(長期)」を取得 チャンネル基本設定から「あなたのユーザーID」取得
TOKEN=&amp;#34;&amp;lt;チャンネルアクセストークン(長期)&amp;gt;&amp;#34; ID=&amp;#34;&amp;lt;あなたのユーザーID&amp;gt;&amp;#34; UUID=$(uuidgen | tr &amp;#34;[:upper:]&amp;#34; &amp;#34;[:lower:]&amp;#34;) curl -v -X POST https://api.line.me/v2/bot/message/push \ -H &amp;#39;Content-Type: application/json&amp;#39; \ -H &amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; \ -H &amp;#34;X-Line-Retry-Key: &amp;#34; \ -d &amp;#34;{ \&amp;#34;to\&amp;#34;: \&amp;#34;${ID}\&amp;#34;, \&amp;#34;messages\&amp;#34;:[ { \&amp;#34;type\&amp;#34;:\&amp;#34;text\&amp;#34;, \&amp;#34;text\&amp;#34;:\&amp;#34;Hello, world1\&amp;#34; } ] }&amp;#34;レスポンスが帰ってきて、LINEのトーク画面でBotからの投稿が行われていれば成功！</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>LINEのBotを利用してアプリケーションを作ってみようと考えたのでまずはBotを利用できる状態にする。<br>
本ページでは一番最初にLINE Message APIの登録の方法とcurlでコマンドラインからメッセージを送る方法を紹介します。</p>
<h2 id="messaging-apiを利用する">Messaging APIを利用する</h2>
<p><a href="https://developers.line.biz/console/">LINE Developers</a> にログインしてプロバイダーを作成する。</p>
<p><img src="/blog/img-002-001.png" alt="img-002-001.png"></p>
<p>プロバイダーとは(<a href="https://developers.line.biz/ja/docs/line-developers-console/overview/#provider">説明</a>)</p>





<pre tabindex="0"><code>LINE Developersサイトでは、サービスを提供し、ユーザーの情報を取得する開発者個人、
企業、または団体等をサービス提供者（LINEミニアプリではサービス事業主）と呼びます。</code></pre><p>なので好きな文字列を入れる。</p>
<p>そのまま新規チャンネルを作成する。
<img src="/blog/img-002-002.png" alt="img-002-002.png"></p>
<p>このまま作成ボタンを押すと新規チャンネルが作成される</p>
<p><img src="/blog/img-002-003.png" alt="img-002-003.png"></p>
<h1 id="コマンドラインからポストをする">コマンドラインからポストをする</h1>
<p>Messaging API設定からQRコードを読みこんで友達追加する。</p>
<p>Messaging API設定から「チャンネルアクセストークン(長期)」を取得
チャンネル基本設定から「あなたのユーザーID」取得</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;チャンネルアクセストークン(長期)&gt;&#34;</span>
</span></span><span style="display:flex;"><span>ID<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;あなたのユーザーID&gt;&#34;</span>
</span></span><span style="display:flex;"><span>UUID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>uuidgen | tr <span style="color:#e6db74">&#34;[:upper:]&#34;</span> <span style="color:#e6db74">&#34;[:lower:]&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>curl -v -X POST https://api.line.me/v2/bot/message/push <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#39;Content-Type: application/json&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#34;Authorization: Bearer </span><span style="color:#e6db74">${</span>TOKEN<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#34;X-Line-Retry-Key: &#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-d <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    \&#34;to\&#34;: \&#34;</span><span style="color:#e6db74">${</span>ID<span style="color:#e6db74">}</span><span style="color:#e6db74">\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    \&#34;messages\&#34;:[
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            \&#34;type\&#34;:\&#34;text\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            \&#34;text\&#34;:\&#34;Hello, world1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#34;</span></span></span></code></pre></div><p>レスポンスが帰ってきて、LINEのトーク画面でBotからの投稿が行われていれば成功！</p>
]]></content:encoded></item><item><title>Registering and Using the LINE Messaging API</title><link>https://bossagyu.com/en/blog/002-line-messaging-api/</link><pubDate>Thu, 07 Dec 2023 09:37:00 +0900</pubDate><guid>https://bossagyu.com/en/blog/002-line-messaging-api/</guid><description>Overview I thought of creating an application using LINE&amp;rsquo;s Bot, so first, I will make the Bot usable.
This page introduces how to register for the LINE Messaging API and how to send messages from the command line using curl.
Using the Messaging API Log in to LINE Developers and create a provider.
A provider is (Explanation)
On the LINE Developers site, a service provider refers to individuals, companies, or organizations that provide services and obtain user information (service proprietor in LINE Mini Apps).</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>I thought of creating an application using LINE&rsquo;s Bot, so first, I will make the Bot usable.<br>
This page introduces how to register for the LINE Messaging API and how to send messages from the command line using curl.</p>
<h2 id="using-the-messaging-api">Using the Messaging API</h2>
<p>Log in to <a href="https://developers.line.biz/console/">LINE Developers</a> and create a provider.</p>
<p><img src="/blog/img-002-001.png" alt="img-002-001.png"></p>
<p>A provider is (<a href="https://developers.line.biz/ja/docs/line-developers-console/overview/#provider">Explanation</a>)</p>





<pre tabindex="0"><code>On the LINE Developers site, a service provider refers to individuals, companies, or organizations that provide services and obtain user information (service proprietor in LINE Mini Apps).</code></pre><p>So, you can enter any string you like.</p>
<p>Then, create a new channel.
<img src="/blog/img-002-002.png" alt="img-002-002.png"></p>
<p>Clicking the create button will establish a new channel.</p>
<p><img src="/blog/img-002-003.png" alt="img-002-003.png"></p>
<h1 id="posting-from-the-command-line">Posting from the Command Line</h1>
<p>Add friends by reading the QR code in the Messaging API settings.</p>
<p>Obtain the &lsquo;Channel Access Token (Long-lived)&rsquo; from the Messaging API settings.
Get &lsquo;Your User ID&rsquo; from the channel basic settings.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;Channel Access Token (Long-lived)&gt;&#34;</span>
</span></span><span style="display:flex;"><span>ID<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;Your User ID&gt;&#34;</span>
</span></span><span style="display:flex;"><span>UUID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>uuidgen | tr <span style="color:#e6db74">&#34;[:upper:]&#34;</span> <span style="color:#e6db74">&#34;[:lower:]&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>curl -v -X POST https://api.line.me/v2/bot/message/push <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#39;Content-Type: application/json&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#34;Authorization: Bearer </span><span style="color:#e6db74">${</span>TOKEN<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-H <span style="color:#e6db74">&#34;X-Line-Retry-Key: &#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-d <span style="color:#e6db74">&#34;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    \&#34;to\&#34;: \&#34;</span><span style="color:#e6db74">${</span>ID<span style="color:#e6db74">}</span><span style="color:#e6db74">\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    \&#34;messages\&#34;:[
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            \&#34;type\&#34;:\&#34;text\&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            \&#34;text\&#34;:\&#34;Hello, world1\&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#34;</span></span></span></code></pre></div><p>If a response is returned and you see a post from the Bot in your LINE chat, it&rsquo;s a success!</p>
]]></content:encoded></item><item><title>Hugo + Netlify + Githubでブログを公開する</title><link>https://bossagyu.com/blog/001-hugo-netlify-build/</link><pubDate>Sat, 02 Dec 2023 00:59:37 +0900</pubDate><guid>https://bossagyu.com/blog/001-hugo-netlify-build/</guid><description>概要 Hugoで作ったサイトをGithubで管理、Netlifyでビルドした手順を0から作れるよう記載します。
この方式にすると手元でMarkDownで書いたブログをGithubにPushするだけで簡単に公開できるようになります。
流れ Hugoでサイトを生成 Githubにプッシュ Netlifyでデプロイ Hugoで静的サイトを生成 まずはHugoをインストールします。
brew install hugoblogの雛形を作成します。
hugo new site my-blogブログに適応するテーマをsubmoduleとして追加します。
cd my-blog git init # テーマをgithubのsubmoduleとして追加 git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/anankehugo.tomlに記載することでテーマを適応する。
echo &amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34; &amp;gt;&amp;gt; config.tomlサーバを起動させます。
hugo server起動ログの Web Server is available at http://localhost:51517/ (bind address 127.0.0.1) のような記述の http://localhost:51517/ にアクセスすればローカルに起動した静的サイトが閲覧できます。
Tips Hugoのテーマを変えたい場合は、Hugo Themas から好きなものを選んで変えてください。 これは後からでも変えられるのでとりあえずNetlifyでビルドするところまで走り切るのがおすすめ。 Tomlファイルの書き方は Configure Hugo に記載されています。 Githubにpush Github にリポジトリを作成。 作成後以下のコマンドを実行し、サイトをpushします。
cd my-blog echo .hugo_build.lock &amp;gt;&amp;gt; .gitignore git add . git commit -m &amp;#34;first commit&amp;#34; git branch -M main # &amp;lt;user name&amp;gt;は自分のユーザー名に置き換えてください。 # 今回はmy-blogというリポジトリを作成している例です。 git remote add origin git@github.</description><content:encoded><![CDATA[<h2 id="概要">概要</h2>
<p>Hugoで作ったサイトをGithubで管理、Netlifyでビルドした手順を0から作れるよう記載します。<br>
この方式にすると手元でMarkDownで書いたブログをGithubにPushするだけで簡単に公開できるようになります。</p>
<h2 id="流れ">流れ</h2>
<ol>
<li>Hugoでサイトを生成</li>
<li>Githubにプッシュ</li>
<li>Netlifyでデプロイ</li>
</ol>
<h2 id="hugoで静的サイトを生成">Hugoで静的サイトを生成</h2>
<p>まずはHugoをインストールします。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>brew install hugo</span></span></code></pre></div><p>blogの雛形を作成します。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>hugo new site my-blog</span></span></code></pre></div><p>ブログに適応するテーマをsubmoduleとして追加します。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd my-blog
</span></span><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># テーマをgithubのsubmoduleとして追加</span>
</span></span><span style="display:flex;"><span>git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke</span></span></code></pre></div><p>hugo.tomlに記載することでテーマを適応する。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;theme = &#39;ananke&#39;&#34;</span> &gt;&gt; config.toml</span></span></code></pre></div><p>サーバを起動させます。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>hugo server</span></span></code></pre></div><p>起動ログの <code>Web Server is available at http://localhost:51517/ (bind address 127.0.0.1)</code> のような記述の <code>http://localhost:51517/</code> にアクセスすればローカルに起動した静的サイトが閲覧できます。</p>
<h3 id="tips">Tips</h3>
<ul>
<li>Hugoのテーマを変えたい場合は、<a href="https://themes.gohugo.io/">Hugo Themas</a> から好きなものを選んで変えてください。
<ul>
<li>これは後からでも変えられるのでとりあえずNetlifyでビルドするところまで走り切るのがおすすめ。</li>
</ul>
</li>
<li>Tomlファイルの書き方は <a href="https://gohugo.io/getting-started/configuration/">Configure Hugo</a> に記載されています。</li>
</ul>
<!-- raw HTML omitted -->
<h2 id="githubにpush">Githubにpush</h2>
<p><a href="https://github.com/">Github</a> にリポジトリを作成。<!-- raw HTML omitted -->
作成後以下のコマンドを実行し、サイトをpushします。</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd my-blog
</span></span><span style="display:flex;"><span>echo .hugo_build.lock &gt;&gt; .gitignore
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;first commit&#34;</span>
</span></span><span style="display:flex;"><span>git branch -M main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># &lt;user name&gt;は自分のユーザー名に置き換えてください。</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 今回はmy-blogというリポジトリを作成している例です。</span>
</span></span><span style="display:flex;"><span>git remote add origin git@github.com:&lt;user name&gt;/my-blog
</span></span><span style="display:flex;"><span>git push -u origin main</span></span></code></pre></div><p>pushが完了するとGithubのUI上でソースコードが閲覧できる状態になっています。</p>
<h2 id="netlifyでデプロイ">Netlifyでデプロイ</h2>
<p><a href="https://www.netlify.com/">netlify</a> へアクセスし、デプロイを行う。<br>
<a href="https://gohugo.io/hosting-and-deployment/hosting-on-netlify/">Hugoの公式で案内</a> があるのでこちらを参考に連携を行う。</p>
<p>指示に従いデプロイを完了すると以下のようにDeployの結果が <code>published</code> になる。</p>
<p><img src="/blog/img-001-001.png" alt="img-001-001.png"></p>
<p>サイト上に表示されたURLをクリックするとデプロイされたサイトにアクセスできる。
<img src="/blog/img-001-002.png" alt="img-001-002.png"></p>
<p>これでデプロイまではおしまい。<br>
以降は変更を加えてmainにpushするだけで自動デプロイが走り、サイトの内容が更新されるようになる。</p>
]]></content:encoded></item><item><title>Publishing a Blog with Hugo + Netlify + Github</title><link>https://bossagyu.com/en/blog/001-hugo-netlify-build/</link><pubDate>Sat, 02 Dec 2023 00:59:37 +0900</pubDate><guid>https://bossagyu.com/en/blog/001-hugo-netlify-build/</guid><description>Overview This document describes the steps to create a site with Hugo, manage it with Github, and build it with Netlify from scratch.
With this method, you can easily publish by just pushing your Markdown-written blog to Github.
Process Generate a site with Hugo Push to Github Deploy with Netlify Generating a Static Site with Hugo First, install Hugo.
brew install hugoCreate a template for the blog.
hugo new site my-blogAdd a theme suitable for the blog as a submodule.</description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>This document describes the steps to create a site with Hugo, manage it with Github, and build it with Netlify from scratch.<br>
With this method, you can easily publish by just pushing your Markdown-written blog to Github.</p>
<h2 id="process">Process</h2>
<ol>
<li>Generate a site with Hugo</li>
<li>Push to Github</li>
<li>Deploy with Netlify</li>
</ol>
<h2 id="generating-a-static-site-with-hugo">Generating a Static Site with Hugo</h2>
<p>First, install Hugo.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>brew install hugo</span></span></code></pre></div><p>Create a template for the blog.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>hugo new site my-blog</span></span></code></pre></div><p>Add a theme suitable for the blog as a submodule.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd my-blog
</span></span><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the theme as a submodule from Github</span>
</span></span><span style="display:flex;"><span>git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke</span></span></code></pre></div><p>Apply the theme by adding it to hugo.toml.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;theme = &#39;ananke&#39;&#34;</span> &gt;&gt; config.toml</span></span></code></pre></div><p>Start the server.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>hugo server</span></span></code></pre></div><p>Access the URL like <code>http://localhost:51517/</code> shown in the startup log <code>Web Server is available at http://localhost:51517/ (bind address 127.0.0.1)</code> to view the locally launched static site.</p>
<h3 id="tips">Tips</h3>
<ul>
<li>If you want to change the Hugo theme, please choose your favorite one from <a href="https://themes.gohugo.io/">Hugo Themes</a>.
<ul>
<li>It&rsquo;s recommended to run through until you build with Netlify first, as this can be changed later.</li>
</ul>
</li>
<li>The way to write Toml files is described in <a href="https://gohugo.io/getting-started/configuration/">Configure Hugo</a>.</li>
</ul>
<!-- raw HTML omitted -->
<h2 id="push-to-github">Push to Github</h2>
<p>Create a repository on <a href="https://github.com/">Github</a>.<!-- raw HTML omitted -->
After creation, execute the following commands to push your site.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd my-blog
</span></span><span style="display:flex;"><span>echo .hugo_build.lock &gt;&gt; .gitignore
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;first commit&#34;</span>
</span></span><span style="display:flex;"><span>git branch -M main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Replace &lt;user name&gt; with your own username.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This is an example of creating a repository called my-blog.</span>
</span></span><span style="display:flex;"><span>git remote add origin git@github.com:&lt;user name&gt;/my-blog
</span></span><span style="display:flex;"><span>git push -u origin main</span></span></code></pre></div><p>Once the push is complete, the source code becomes viewable on the Github UI.</p>
<h2 id="deploy-with-netlify">Deploy with Netlify</h2>
<p>Access <a href="https://www.netlify.com/">Netlify</a> and perform deployment.<br>
There are instructions on <a href="https://gohugo.io/hosting-and-deployment/hosting-on-netlify/">Hugo&rsquo;s official website</a>, so refer to them for integration.</p>
<p>Follow the instructions to complete the deployment, and the result of the Deploy will be shown as <code>published</code>.</p>
<p><img src="/blog/img-001-001.png" alt="img-001-001.png"></p>
<p>Click on the URL displayed on the site to access the deployed site.
<img src="/blog/img-001-002.png" alt="img-001-002.png"></p>
<p>This completes the deployment process.
After this, any changes made and pushed to main will automatically trigger deployment, updating the site content.</p>
]]></content:encoded></item></channel></rss>