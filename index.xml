<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bossagyu Blog</title><link>https://bossagyu.com/</link><description>Recent content on Bossagyu Blog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 15 Sep 2024 16:52:04 +0900</lastBuildDate><atom:link href="https://bossagyu.com/index.xml" rel="self" type="application/rss+xml"/><item><title>macでGoの開発環境を構築して最速でHello Worldする</title><link>https://bossagyu.com/blog/030-go-environment-construction/</link><pubDate>Sun, 15 Sep 2024 16:52:04 +0900</pubDate><guid>https://bossagyu.com/blog/030-go-environment-construction/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>MacでGo言語の開発環境を構築して、最速で Hello World する方法を紹介します。&lt;/p>
&lt;h2 id="go言語のインストール">Go言語のインストール&lt;/h2>
&lt;p>brewを使ってGo言語をインストールします。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; brew install go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>バージョンを確認&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; go version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go version go1.21.3 darwin/arm64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hello-world-の実行">Hello World の実行&lt;/h2>
&lt;p>以下のコードを &lt;code>main.go&lt;/code> として保存します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello World\n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>実行する&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; go run hello.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello World
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>バイナリをビルドして実行する&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; go build hello.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hello* hello.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ./hello
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello World
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>以上で、MacでGo言語の開発環境を構築して、最速で Hello World する方法を紹介しました。&lt;/p></description></item><item><title>gRPCについての調査</title><link>https://bossagyu.com/blog/029-grpc/</link><pubDate>Sun, 01 Sep 2024 17:53:57 +0900</pubDate><guid>https://bossagyu.com/blog/029-grpc/</guid><description>&lt;h2 id="grpcとは">gRPCとは&lt;/h2>
&lt;ul>
&lt;li>PRCを実現するためにGoogleが開発したプロトコルの一つ&lt;/li>
&lt;li>Protocol Bufferを使ってデータをシリアライズし、高速な通信を実現できる点が特徴&lt;/li>
&lt;li>IDLを使ってあらかじめAPIの仕様を.protoファイルとして定義し、そこから、サーバ側&amp;amp;クライアント側に必要なソースコードを生成する。&lt;/li>
&lt;/ul>
&lt;p>REST と gRPCの違い&lt;/p>
&lt;ul>
&lt;li>RESTはリソース志向、RPCはメソッドの呼び出しが起点となり、データは副産物であるという考え方。&lt;/li>
&lt;/ul>
&lt;h2 id="利点と欠点">利点と欠点&lt;/h2>
&lt;h3 id="利点">利点&lt;/h3>
&lt;ul>
&lt;li>HTTP/2による高パフォーマンス&lt;/li>
&lt;li>Protocol Buffersによるデータ転送
&lt;ul>
&lt;li>IDLを書くことになるので、スキーマファーストで開発することになる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>柔軟なストリーミング方式&lt;/li>
&lt;/ul>
&lt;h3 id="欠点">欠点&lt;/h3>
&lt;ul>
&lt;li>HTTP/2非対応&lt;/li>
&lt;li>ブラウザの対応状況が不十分&lt;/li>
&lt;li>言語によって機能の実装増強にばらつきがある&lt;/li>
&lt;li>バイナリにシリアライズされると人間が読めない&lt;/li>
&lt;li>RESTでも十分早い&lt;/li>
&lt;/ul>
&lt;h2 id="protファイル">.protファイル&lt;/h2>
&lt;p>gRPCではシリアライズフォーマットとしてProtocol Buffersを利用する。&lt;br>
&lt;code>.proto&lt;/code> を拡張子として持つファイル上にスキーマ定義を行い、 &lt;code>protoc&lt;/code> コマンド絵各言語用のコードを生成する。&lt;br>
Protocol Buffersでは全ての値が型を持つ。型はスカラー型とメッセージ型に分けることができる。&lt;/p>
&lt;h3 id="スカラー型">スカラー型&lt;/h3>
&lt;ul>
&lt;li>数値、文字列、真偽値、バイト配列&lt;/li>
&lt;/ul>
&lt;h3 id="メッセージ型">メッセージ型&lt;/h3>
&lt;ul>
&lt;li>複数のフィールドを持ったメッセージ型&lt;/li>
&lt;li>メッセージ型は一つの .proto ファイルに複数定義することができる&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">message Person &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int32 &lt;span class="nv">id&lt;/span> &lt;span class="o">=&lt;/span> 1&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string &lt;span class="nv">name&lt;/span> &lt;span class="o">=&lt;/span> 2&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string &lt;span class="nv">email&lt;/span> &lt;span class="o">=&lt;/span>3&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="grpcのquick-startを実施する">gRPCのQuick Startを実施する&lt;/h2>
&lt;p>今回はPythonの環境を用いて、gRPCのQuick Startを実施する。&lt;br>
&lt;a class="link" href="https://grpc.io/docs/languages/python/quickstart/" target="_blank" rel="noopener"
>https://grpc.io/docs/languages/python/quickstart/&lt;/a>&lt;/p>
&lt;p>起動に必要なPythonの環境を整える。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python -m pip install grpcio
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python -m pip install grpcio-tools
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>サンプルコードのダウンロード&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git clone -b v1.64.0 --depth &lt;span class="m">1&lt;/span> --shallow-submodules https://github.com/grpc/grpc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> grpc/examples/python/helloworld
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>サーバを起動する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python greeter_server.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 出力&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server started, listening on &lt;span class="m">50051&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>別のターミナルを起動し、クライアントを起動する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python greeter_client.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## レスポンス&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Will try to greet world ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Greeter client received: Hello, you!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>gRPCのクライアントとサーバを用いて通信を行うことができました。&lt;/p>
&lt;h2 id="proto-ファイルを変更してみる">.proto ファイルを変更してみる&lt;/h2>
&lt;p>今回は、&lt;code>helloworld.proto&lt;/code> ファイルを変更して、新しいメソッドを追加してみます。&lt;/p>
&lt;p>&lt;code>helloworld.prot&lt;/code> ファイルが格納されている&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> grpc/examples/protos
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以下のように修正する&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">syntax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">option&lt;/span> &lt;span class="n">java_multiple_files&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">option&lt;/span> &lt;span class="n">java_package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;io.grpc.examples.helloworld&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">option&lt;/span> &lt;span class="n">java_outer_classname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;HelloWorldProto&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">option&lt;/span> &lt;span class="n">objc_class_prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;HLW&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">package&lt;/span> &lt;span class="n">helloworld&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">The&lt;/span> &lt;span class="n">greeting&lt;/span> &lt;span class="n">service&lt;/span> &lt;span class="n">definition&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">service&lt;/span> &lt;span class="n">Greeter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Sends&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">greeting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rpc&lt;/span> &lt;span class="n">SayHello&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">HelloRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">HelloReply&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">以下の1行を追加&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rpc&lt;/span> &lt;span class="n">SayHelloAgain&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">HelloRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">HelloReply&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rpc&lt;/span> &lt;span class="n">SayHelloStreamReply&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">HelloRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="n">HelloReply&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rpc&lt;/span> &lt;span class="n">SayHelloBidiStream&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="n">HelloRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="n">HelloReply&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">The&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="n">containing&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="s1">&amp;#39;s name.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">message&lt;/span> &lt;span class="n">HelloRequest&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">The&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="n">containing&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">greetings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">message&lt;/span> &lt;span class="n">HelloReply&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>grpcのコードを生成する&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> examples/python/helloworld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python -m grpc_tools.protoc -I../../protos --python_out&lt;span class="o">=&lt;/span>. --pyi_out&lt;span class="o">=&lt;/span>. --grpc_python_out&lt;span class="o">=&lt;/span>. ../../protos/helloworld.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以下のファイルが再作成されている。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">ls -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--@ &lt;span class="m">1&lt;/span> xx xx &lt;span class="m">1823&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">1&lt;/span> 18:12 helloworld_pb2.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--@ &lt;span class="m">1&lt;/span> xx xx &lt;span class="m">578&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">1&lt;/span> 18:12 helloworld_pb2.pyi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--@ &lt;span class="m">1&lt;/span> xx xx &lt;span class="m">7018&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">1&lt;/span> 18:12 helloworld_pb2_grpc.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更新される &lt;code>_pd&lt;/code> ファイルとは、protocol Buuffersの定義クラスが自動で生成されており基本的にはさわらない。&lt;/p>
&lt;p>greeter_server.py を更新する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">futures&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">grpc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">helloworld_pb2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">helloworld_pb2_grpc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Greeter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">helloworld_pb2_grpc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">GreeterServicer&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">SayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">helloworld_pb2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">HelloReply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Hello, &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 以下の関数を追加&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">SayHelloAgain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">helloworld_pb2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">HelloReply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Hello Again, &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">serve&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;50051&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">grpc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">futures&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">helloworld_pb2_grpc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_GreeterServicer_to_server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Greeter&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">server&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_insecure_port&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[::]:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">server&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Server started, listening on &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">server&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait_for_termination&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">basicConfig&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">serve&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>greeter_client.py を更新する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># NOTE(gRPC Python Team): .close() is possible on a channel and should be&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># used in circumstances in which the with statement does not fit the needs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># of the code.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Will try to greet world ...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="n">grpc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insecure_channel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;localhost:50051&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">helloworld_pb2_grpc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">GreeterStub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">channel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stub&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">helloworld_pb2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">HelloRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;you&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Greeter client received: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stub&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SayHelloAgain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">helloworld_pb2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">HelloRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;you&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Greeter client received: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>serverを再起動し、clientを実行する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python greeter_server.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python greeter_client.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 出力&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Greeter client received: Hello, you!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Greeter client received: Hello Again, you!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>追加したメソッドが正常に動作していることが確認できました。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>今回はgRPCについて調査の調査と公式ドキュメントのチュートリアルを行いました。&lt;br>
gRPCはスキーマファーストで開発することができ、HTTP/2による高パフォーマンス通信が可能であることら、最近ではREST APIの代替手段として注目されている技術ですので、ぜひ抑えておきたいです。&lt;/p></description></item><item><title>ChatGPT 4oの紹介</title><link>https://bossagyu.com/blog/027-chatgpt-4o/</link><pubDate>Tue, 14 May 2024 23:22:39 +0900</pubDate><guid>https://bossagyu.com/blog/027-chatgpt-4o/</guid><description>&lt;h2 id="gpt-4oの登場">GPT-4oの登場&lt;/h2>
&lt;p>2024年5月13日に、OpenAI社より新しいGPTモデル、ChatGPT-4oが発表されました。&lt;/p>
&lt;p>GPT-4oは従来のモデルと比較して以下の内容が向上しています。&lt;/p>
&lt;ul>
&lt;li>自然な対話の実現&lt;/li>
&lt;li>より高速な応答&lt;/li>
&lt;li>多言語対応の強化&lt;/li>
&lt;li>より高い信頼性&lt;/li>
&lt;/ul>
&lt;p>特に注目すべきは、推論速度と質の向上です。これにより、リアルタイムの対話システムにおいても高い性能を発揮し、よりスムーズで自然なコミュニケーションが可能となります。&lt;/p>
&lt;h2 id="リアルタイム対話の応用">リアルタイム対話の応用&lt;/h2>
&lt;p>以下の動画では、スマートフォンを利用してChatGPT-4oとのリアルタイム対話のデモンストレーションが紹介されています。&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/vgYi3Wr7v_g"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>実際にご覧いただけるとわかるように、ChatGPT-4oは人間との対話に近いレベルで応答を返すことができます。&lt;br>
これにより、ユーザーは非常に自然な対話を楽しむことができます。&lt;/p>
&lt;p>今までのChatGPTシリーズでは音声を文字列へ変換し、その後GPT-4へ入力することで対話を行っていました。&lt;br>
これは、音声に含まれる声色などの感情の情報が失われることを意味しています。&lt;/p>
&lt;p>しかし、ChatGPT-4oでは音声からモデルのトレーニングを行っているため、声色などの情報も考慮されており、より自然な対話が実現されています。&lt;br>
また、音声から直接音声を返却するので、テキストを解釈するステップがない分より高速に応答が返ってくるようになっています。&lt;/p>
&lt;h2 id="多言語対応の強化">多言語対応の強化&lt;/h2>
&lt;p>GPT-4oは、多言語対応の強化も図っています。&lt;br>
今までは英語で質問をすると、精度が高い回答が得られるが、日本語で質問をすると精度が落ちるという問題がありました。&lt;/p>
&lt;p>今回の多言語対応の強化により、日本語でも高い精度で回答が得られるようになりました。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>今回は、OpenAI社が発表したChatGPT-4oについて紹介しました。&lt;br>
ChatGPTのモデルの精度の向上はめざましく、どんどん人間の対話に近づいていると感じます。&lt;br>
今後エンジニアは生成AIをどれだけうまく使えるかで、生産性が大きく変わってくると感じているので引き続き動向を注視していきたいと思います。&lt;/p>
&lt;h2 id="関連情報">関連情報&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://openai.com/index/hello-gpt-4o/" target="_blank" rel="noopener"
>Hello ChatGPT-4o&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>EvernoteからNotionへの移行方法</title><link>https://bossagyu.com/blog/026-evernote-to-notion/</link><pubDate>Mon, 29 Apr 2024 19:32:38 +0900</pubDate><guid>https://bossagyu.com/blog/026-evernote-to-notion/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>2024年4月26日にEvernoteの日本法人が解散するなど、Evernoteのサービスは終了しないもののいよいよEvernoteの雲行きが怪しくなってきました。&lt;br>
Evernoteは無料プランに制限が多いため、有料プランを利用しており費用がかさむこともあり、他のノートアプリへの移行を検討しました。&lt;/p>
&lt;p>以下の理由から移行先はNotionを選択しました。&lt;/p>
&lt;ol>
&lt;li>ノートアプリととして基本的な機能を揃えており、Evernoteの代替として十分利用できる。&lt;/li>
&lt;li>Notionは無料プランの制限がゆるく無料プランで十分使え移行することで有料プランの費用を削減できる。&lt;/li>
&lt;li>Evernoteからインポートする機能がNotion側で提供されており、移行コストが非常に低い。&lt;/li>
&lt;/ol>
&lt;p>今回はEvernoteからNotionへの移行方法をまとめます。&lt;/p>
&lt;h2 id="移行方法">移行方法&lt;/h2>
&lt;p>NotionにはEvernoteからのインポート機能が提供されているため、こちらを利用するだけで簡単に移行ができます。&lt;/p>
&lt;p>Notionのアプリのメニューから &lt;code>設定&lt;/code> を選択します。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/026-evernote-to-notion/img-026-001.png"
width="476"
height="109"
srcset="https://bossagyu.com/blog/026-evernote-to-notion/img-026-001_hue34c4fc34d425abb2cb8a7822cb5448a_12099_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/026-evernote-to-notion/img-026-001_hue34c4fc34d425abb2cb8a7822cb5448a_12099_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Notionの設定"
class="gallery-image"
data-flex-grow="436"
data-flex-basis="1048px"
>&lt;/p>
&lt;p>設定をクリックすると &lt;code>インポート&lt;/code> が表示されるので、これをクリックします。&lt;br>
インポートをクリックすると、インポート元のアプリケーションが表示されるので、ここで &lt;code>Evernote&lt;/code> を選択します。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/026-evernote-to-notion/img-026-002.png"
width="1107"
height="553"
srcset="https://bossagyu.com/blog/026-evernote-to-notion/img-026-002_hu5671edaff82d6b0627f9e68841ee4894_113782_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/026-evernote-to-notion/img-026-002_hu5671edaff82d6b0627f9e68841ee4894_113782_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Notionのインポート"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>連携が完了するとインポートするノートブックが選択できるようになります。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/026-evernote-to-notion/img-026-003.png"
width="262"
height="131"
srcset="https://bossagyu.com/blog/026-evernote-to-notion/img-026-003_hu22ab7887a397f6d4d5c09ac7940595a1_12909_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/026-evernote-to-notion/img-026-003_hu22ab7887a397f6d4d5c09ac7940595a1_12909_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Notionのインポート"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>ここでの注意点です！&lt;br>
ノートブックを複数選択すると一気にインポートできるように見えるのですが、一気にインポートするととんでもない時間がかかった挙げ句エラーが出ることがあります。
このため、ノートブックは一つづつインポートすることをおすすめします。&lt;/p>
&lt;p>一つずつインポートした場合でも、ノートの分量が多いと数時間かかったりするので、気長に対応するとよいです。&lt;/p>
&lt;p>インポート後は特に体裁が崩れることもなく、画像やリンク、ラベルも正常にインポートされるので問題なく利用ができました。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>EvernoteからNotionへの移行方法をまとめました。
無料で機能が豊富なNotionに簡単に移行できるので、ぜひ移行を検討してみてください。&lt;/p></description></item><item><title>グローバルなgitignoreを設定してプロジェクト全体に適応する方法</title><link>https://bossagyu.com/blog/025-git-ignore/</link><pubDate>Tue, 16 Apr 2024 23:16:25 +0900</pubDate><guid>https://bossagyu.com/blog/025-git-ignore/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>&lt;code>.gitignore&lt;/code> ファイルをプロジェクトに追加することでプロジェクト事にgitのトラッキング対象から外すことができます。&lt;br>
しかしながら&lt;code>.idea&lt;/code> などIDEがデフォルトで生成するディレクトリを毎回プロジェクト毎にgitignoreに追加するのが面倒です。&lt;br>
本記事では &lt;code>gitignore&lt;/code> に設定した内容をすべてのプロジェクトに 適応する方法をまとめます。&lt;/p>
&lt;h2 id="gitignoreを全体に適応する方法">gitignoreを全体に適応する方法&lt;/h2>
&lt;p>gitはデフォルトで &lt;code>~/.config/git/ignore&lt;/code> へignore設定を見に行きます。&lt;br>
このため、&lt;code>~/.config/git/ignore&lt;/code> にignore設定を記述することですべてのプロジェクトにgitignoreの内容を適応できます。&lt;/p>
&lt;p>よく &lt;code>.gitignore_global&lt;/code> を作成して、&lt;code>core.excludesfile&lt;/code> に登録する方法が案内されていますが、この方法だと &lt;code>.gitconfig&lt;/code> に無駄な設定をいれる必要があるため、こちらの方法をおすすめします。&lt;/p>
&lt;h2 id="プロジェクト全体にgitignoreを適応する手順">プロジェクト全体にgitignoreを適応する手順&lt;/h2>
&lt;p>ignoreファイルを格納するためのディレクトリを作成します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mkdir -p ~/.config/git/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ignoreファイルを作成し、全プロジェクトで無視したい内容を記述してください。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">vim ~/.config/git/ignore
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>記載例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">.idea/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node_modules/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>この設定を行うことで、全プロジェクトで同じignore設定を適応できます。&lt;br>
すでにトラッキングしているファイルを含む場合は、一度 &lt;code>git rm --cached&lt;/code> でトラッキングを解除してください。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener"
>Git - gitignore&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>PythonでBluesky APIを用いて自動投稿する方法</title><link>https://bossagyu.com/blog/024-bluesky-api/</link><pubDate>Sun, 07 Apr 2024 23:52:09 +0900</pubDate><guid>https://bossagyu.com/blog/024-bluesky-api/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>&lt;a class="link" href="https://bsky.app/" target="_blank" rel="noopener"
>Bluesky&lt;/a> とは、旧Twitter社の元CEOであるジャック・ドーシー氏が立ち上げた分散型SNSです。&lt;br>
&lt;a class="link" href="https://atproto.com/docs" target="_blank" rel="noopener"
>ATProtocl&lt;/a> というプロトコルを用いて構築されたSNSで、簡単に言うと中央管理者がいないTwitterのようなものです。&lt;br>
昨今の中央集権である通貨から分散型である仮想通貨への流れのように、SNSも分散型への流れがあるのかなと感じます。&lt;/p>
&lt;p>今回はそんなBlueskyのAPIをPythonを用いて実行する方法をまとめます。&lt;/p>
&lt;h2 id="bluesky-apiを使うまでのステップ">Bluesky APIを使うまでのステップ&lt;/h2>
&lt;ul>
&lt;li>API実行用パスワードの生成&lt;/li>
&lt;li>Python実行環境の構築&lt;/li>
&lt;li>スクリプトの作成と実行&lt;/li>
&lt;/ul>
&lt;h2 id="api実行用パスワードの生成">API実行用パスワードの生成&lt;/h2>
&lt;p>APIを実行するためにはアカウント名とAPI実行用のパスワードの発行が必要です。&lt;/p>
&lt;p>まずは、APIの実行に利用するアカウント名を確認します。&lt;br>
アカウント名は、Blueskyにログインした際に画像の箇所に表示される名前となります。&lt;br>
この際先頭の &lt;code>@&lt;/code> は不要で、私のアカウントであれば &lt;code>bossagyu.bsky.social&lt;/code> がアカウント名となります。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/024-bluesky-api/img-024-001.png"
width="1246"
height="494"
srcset="https://bossagyu.com/blog/024-bluesky-api/img-024-001_huf800b51d6508b8d55f734f90e398ecce_69330_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/024-bluesky-api/img-024-001_huf800b51d6508b8d55f734f90e398ecce_69330_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Blueskyのアカウント名"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="605px"
>&lt;/p>
&lt;p>次に、API実行用のパスワードを生成します。&lt;/p>
&lt;p>API実行用パスワードは &lt;code>設定&lt;/code> → &lt;code>アプリパスワード&lt;/code> から生成できます。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/024-bluesky-api/img-024-002.png"
width="702"
height="599"
srcset="https://bossagyu.com/blog/024-bluesky-api/img-024-002_hu4ae5c012eccb5c32725cc4f577581c4d_72656_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/024-bluesky-api/img-024-002_hu4ae5c012eccb5c32725cc4f577581c4d_72656_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Blueskyのアプリパスワード1"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>その後、&lt;code>アプリパスワードを追加&lt;/code> をクリックします。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/024-bluesky-api/img-024-003.png"
width="589"
height="281"
srcset="https://bossagyu.com/blog/024-bluesky-api/img-024-003_hu581c5fcbb0f6fca5bc47923c36751a59_43772_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/024-bluesky-api/img-024-003_hu581c5fcbb0f6fca5bc47923c36751a59_43772_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Blueskyのアプリパスワード2"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="503px"
>&lt;/p>
&lt;p>追加ボタンを押すと、パスワードにつける名前を聞かれます。&lt;br>
これ自体はパスワードとならず管理を容易にすることが目的なので、特にこだわりがなければそのまま作成します。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/024-bluesky-api/img-024-004.png"
width="588"
height="245"
srcset="https://bossagyu.com/blog/024-bluesky-api/img-024-004_hude180766a2493746a1dec1e2149d4e83_41902_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/024-bluesky-api/img-024-004_hude180766a2493746a1dec1e2149d4e83_41902_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Blueskyのアプリパスワード3"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="576px"
>&lt;/p>
&lt;p>パスワードが生成されるので、これをコピーしておきます。&lt;br>
ちなみに二度と表示されなくなるので、コピーを忘れないようにしましょう。コピーを忘れた場合は再生成すればOKです。&lt;/p>
&lt;h2 id="python実行環境の構築">Python実行環境の構築&lt;/h2>
&lt;p>Pythonの実行環境をセットアップしてください。&lt;br>
venvを用いたセットアップについては、&lt;a class="link" href="https://bossagyu.com/blog/004-paython-setup/" target="_blank" rel="noopener"
>こちら&lt;/a> にまとめています。&lt;/p>
&lt;p>&lt;a class="link" href="https://atproto.blue/en/latest/" target="_blank" rel="noopener"
>公式ドキュメント&lt;/a> によると、Pythonのバージョンは3.7.1以上を利用する必要がありますので注意しておいてください。&lt;/p>
&lt;p>Pythonの実行環境が整えば、ATProtocolを利用するためにライブラリをインストールします。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ pip install atproto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>インストールの確認&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ pip list &lt;span class="p">|&lt;/span> grep atproto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">atproto 0.0.46
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>これで準備は完了です。&lt;/p>
&lt;h2 id="スクリプトの作成と実行">スクリプトの作成と実行&lt;/h2>
&lt;p>Blueskyに投稿するスクリプトを作成します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">atproto&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Client&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Client&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">user_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;bossagyu.bsky.social&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;*******&amp;#34;&lt;/span> &lt;span class="c1"># 生成したAPI実行用パスワードを入力&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">login&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;APIからの投稿です&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>スクリプトはこれだけで、APIを用いてBlueskyに投稿できます。&lt;/p>
&lt;p>それでは実行してみましょう。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ python post_bluesky.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>実行すると、Blueskyに以下のように無事投稿されました。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/024-bluesky-api/img-024-005.png"
width="1244"
height="512"
srcset="https://bossagyu.com/blog/024-bluesky-api/img-024-005_hu4f39cd8b24c00a6a84572b28046e189d_95124_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/024-bluesky-api/img-024-005_hu4f39cd8b24c00a6a84572b28046e189d_95124_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Blueskyに投稿された投稿"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="583px"
>&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>今回はPythonを用いてBlueskyのAPIを実行する方法をまとめました。&lt;br>
Blueskyはまだまだ開発途中のSNSですが、TwitterはAPIを課金しないと使えないなどの制約があるので、無料でAPIを使ってSNSで遊んでみたいという方にはおすすめです。&lt;/p></description></item><item><title>chatGPTで画像を生成する方法</title><link>https://bossagyu.com/blog/023-chatgpt-create-image/</link><pubDate>Sun, 31 Mar 2024 17:35:07 +0900</pubDate><guid>https://bossagyu.com/blog/023-chatgpt-create-image/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>Stable Diffusionなどの画像生成用のモデルではなく ChatGPTでも画像が生成できるので、生成の方法を説明します。&lt;br>
ChatGPTの有料プランを利用している人は新たに課金などせずに利用できるので、大きな手間をかけずに商用利用可能な画像を生成できます。&lt;/p>
&lt;p>今回は、DALL-Eと呼ばれるChatGPT Plusの機能を利用して画像を生成します。
DALL-E3については OpenAI の&lt;a class="link" href="https://openai.com/dall-e-3" target="_blank" rel="noopener"
>公式ページ&lt;/a>を参照してください。&lt;/p>
&lt;h2 id="画像生成の方法">画像生成の方法&lt;/h2>
&lt;p>サイドバーから 「Explore GPTs」を選択&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-001.png"
width="265"
height="116"
srcset="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-001_hud4b55173ac45fc1d51204f1be6812280_8545_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/023-chatgpt-create-image/img-023-001_hud4b55173ac45fc1d51204f1be6812280_8545_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Explore GPTs"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="548px"
>&lt;/p>
&lt;p>検索窓で &lt;code>DALL-E&lt;/code> と入力し検索を行う。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-002.png"
width="1303"
height="365"
srcset="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-002_hu7cb4a7e18b89e3c24f69774acd94f41c_41824_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/023-chatgpt-create-image/img-023-002_hu7cb4a7e18b89e3c24f69774acd94f41c_41824_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="DALL-E"
class="gallery-image"
data-flex-grow="356"
data-flex-basis="856px"
>&lt;/p>
&lt;p>&lt;code>Start Chat&lt;/code> をクリックし、画像生成を開始する。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-003.png"
width="1145"
height="540"
srcset="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-003_huafd50c1ff19a49756eba7cc08e0d5a58_52595_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/023-chatgpt-create-image/img-023-003_huafd50c1ff19a49756eba7cc08e0d5a58_52595_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Start Chat"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="508px"
>&lt;/p>
&lt;p>後は、生成したい画像の説明を入力するだけで画像が生成されます。&lt;/p>
&lt;h2 id="実際に画像を生成してみる">実際に画像を生成してみる&lt;/h2>
&lt;p>このブログで利用されている、ピンク色のサングラスを掛けた犬の画像を生成してみます。&lt;/p>
&lt;p>とりあえず &lt;code>ピンク色のサングラスをかけた犬&lt;/code> というプロンプトで打ってみます。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-004.png"
width="986"
height="599"
srcset="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-004_hu5e0a02deff970890b46e4e180aa8365f_498318_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/023-chatgpt-create-image/img-023-004_hu5e0a02deff970890b46e4e180aa8365f_498318_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ChatGPTで生成された画像1"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;p>また、普段のChat GPTを使うように出力された画像に対して追加のプロンプトを入力することで加工できます。&lt;br>
今回は &lt;code>アニメ調にしてください&lt;/code> と追加のプロンプトを入力してみます。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-005.png"
width="1055"
height="549"
srcset="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-005_hu987fb5d0bfb771c9b7617c23bc8f5dba_474840_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/023-chatgpt-create-image/img-023-005_hu987fb5d0bfb771c9b7617c23bc8f5dba_474840_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ChatGPTで生成された画像2"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;p>アニメ調になっているのがわかります。
このように追加のオーダーをすることでどんどん目的の画像に近づけつつ生成できます。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>今回はChatGPTを利用して画像を生成する方法を説明しました。&lt;/p>
&lt;p>簡単に画像を生成できるのが非常に便利ですが、Stable Diffusion同様期待する画像を出力することはなかなか難しく、プロンプトを調整する必要があります。
Stable Diffusionを利用したときよりもプロンプトを工夫しなくても良い画像が生成されるので、このあたりはモデルの性能差なのかなと思いました。&lt;/p>
&lt;p>ちなみに、やりすぎると以下のような文章が出力され、待つように言われるので生成回数には制限がついていそうです。
マシンソースがある人はやっぱりローカルmacでStable Diffusionでやるのが良さそうですね。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-006.png"
width="866"
height="238"
srcset="https://bossagyu.com/blog/023-chatgpt-create-image/img-023-006_hue0d0043ad8a0a3a907671d165ec53110_40149_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/023-chatgpt-create-image/img-023-006_hue0d0043ad8a0a3a907671d165ec53110_40149_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ChatGPTで画像の生成が制限"
class="gallery-image"
data-flex-grow="363"
data-flex-basis="873px"
>&lt;/p></description></item><item><title>TyeScriptにおけるEnumの使い方</title><link>https://bossagyu.com/blog/022-typescript-enum/</link><pubDate>Sat, 23 Mar 2024 13:11:13 +0900</pubDate><guid>https://bossagyu.com/blog/022-typescript-enum/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>この記事では、TypeScriptにおけるEnumの使い方について説明します。&lt;/p>
&lt;h2 id="enumとは">Enumとは&lt;/h2>
&lt;p>Enum（列挙型）は、特定の値の集合を表す型です。&lt;br>
多くの言語に実装されていますが、JavaScriptには存在しません。しかし、TypeScriptではEnumがサポートされています。&lt;/p>
&lt;h2 id="enumの使い方">Enumの使い方&lt;/h2>
&lt;p>以下のようにEnumを定義します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">enum&lt;/span> &lt;span class="nx">Status&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">zero&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">one&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">two&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">zero&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 0
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Enumは、デフォルトで数値を割り当てられ、0から始まります。
生成されるJavaScriptコードは以下の通りです。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">Status&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Status&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;zero&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;zero&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Status&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;one&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;one&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Status&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;two&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;two&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})(&lt;/span>&lt;span class="nx">Status&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">Status&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">zero&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 0
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>また、enumの値を文字列で指定することもできます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">enum&lt;/span> &lt;span class="nx">Status&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">zero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;zero&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">one&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;one&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">two&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;two&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">zero&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// zero
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>文字列比較を行う場合は、以下のように記述します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">stringZero&lt;/span> :&lt;span class="kt">String&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;zero&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">stringZero&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">StringStatus&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">StringStatus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">zero&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;value is zero&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;value is not zero&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>この記事では、TypeScriptにおけるEnumの使い方について説明しました。&lt;br>
enumを利用することで、コードの可読性、保守性を向上させることができます。&lt;/p></description></item><item><title>Voltaを利用してTypeScriptの開発環境を簡単にセットアップする方法</title><link>https://bossagyu.com/blog/021-typescript-setup/</link><pubDate>Sun, 10 Mar 2024 13:11:13 +0900</pubDate><guid>https://bossagyu.com/blog/021-typescript-setup/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>この記事では、TypeScriptの開発環境を簡単にセットアップする方法について説明します。
本記事ではMacOSを対象にしています。&lt;/p>
&lt;h2 id="voltaとは">Voltaとは&lt;/h2>
&lt;p>VoltaはNode.jsのバージョン管理ツールです。&lt;br>
&lt;a class="link" href="https://volta.sh/" target="_blank" rel="noopener"
>Voltaの公式サイト&lt;/a> で紹介されている通り以下の特徴を備えています。&lt;/p>
&lt;ul>
&lt;li>高速
&lt;ul>
&lt;li>Rustで構築されており、Node.jsのバージョン切り替えが高速です。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>信頼できる
&lt;ul>
&lt;li>プロジェクトの全員が同じツールを利用可能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ユニバーサル
&lt;ul>
&lt;li>パッケージマネージャー、ノードランタイム、OSに依存なく利用可能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>今まではnodebrewなどを利用することが、一般的でしたが、現在はVoltaを利用するケースが増えている印象です。&lt;/p>
&lt;h2 id="voltaとnodejsのインストール">VoltaとNode.jsのインストール&lt;/h2>
&lt;p>voltaのインストールは以下のコマンドだけで完了です。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl https://get.volta.sh &lt;span class="p">|&lt;/span> bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>パスが通っていないことがあるのでzshを利用している方は以下のコマンドでパスを通してください。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;VOLTA_HOME=$HOME/.volta&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export PATH=$VOLTA_HOME/bin:$PATH&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>動作を確認。バージョンが表示されれば問題なくインストールができています。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">volta -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>voltaを利用してNode.jsをインストールします。&lt;br>
バージョンの指定をしない場合最新のLTSがインストールされます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">volta install node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="yarnをインストールしてtypescriptのプロジェクトを作成">yarnをインストールしてTypeScriptのプロジェクトを作成&lt;/h2>
&lt;h3 id="npmとyarnの違い">npmとyarnの違い&lt;/h3>
&lt;p>npm, yarnともにNode.jsのパッケージマネージャーとなります。&lt;br>
それぞれの特徴は以下の通りです。&lt;/p>
&lt;p>npm&lt;/p>
&lt;ul>
&lt;li>Node.jsがリリースされた翌年（2010年）リリース&lt;/li>
&lt;li>Node Package Managerの略&lt;/li>
&lt;li>package-lock.jsonファイルを自動的に生成する&lt;/li>
&lt;li>Node.jsをインストールすれば自動的にインストールされる&lt;/li>
&lt;/ul>
&lt;p>yarn&lt;/p>
&lt;ul>
&lt;li>2016年リリース&lt;/li>
&lt;li>Facebook、Google、Exponent、Tildeによって開発された新しいJavaScriptパッケージマネージャー&lt;/li>
&lt;li>npｍと互換性がある
&lt;ul>
&lt;li>同じpackage.jsonが使える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>npmより厳密にモジュールのバージョンを固定できる&lt;/li>
&lt;li>npmよりインストールが速い&lt;/li>
&lt;/ul>
&lt;p>yarnの方が優れているように見えますが、最近ではnpmがアップデートされて機能の差はあまりないようです。&lt;br>
今回はyarnを利用してTypeScriptのプロジェクトを作成します。&lt;/p>
&lt;h3 id="yarnのインストール">yarnのインストール&lt;/h3>
&lt;p>voltaを利用してyarnをインストールします。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">volta install yarn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>インストールされているかを確認します。&lt;br>
listの結果にyarnが表示されれば問題なくインストールされています。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">volta list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="typescriptのプロジェクトを作成">TypeScriptのプロジェクトを作成&lt;/h3>
&lt;p>yarnの初期化&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yarn init -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Node.jsのインストール&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">volta pin node@20.0.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>TypeScriptのインストール&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yarn add typescript
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>node-tsのインストール&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yarn add --dev ts-node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>tsconfig.jsonを作成します。&lt;br>
tsconfig.jsonはTypeScriptの設定ファイルで、コンパイル時の設定を記述します。&lt;br>
今回は、console.logを利用するため、今回はtargetを &lt;code>es2016&lt;/code> に設定します。特にデフォルトで生成されるものから変更する必要はありません。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yarn tsc --init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>サンプルプログラムを実行してみる。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;console.log(&amp;#39;Hello, TypeScript!&amp;#39;);&amp;#34;&lt;/span> &amp;gt; hello.ts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yarn ts-node hello.ts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 以下のように表示されれば成功&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello, TypeScript!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>無事にテストスクリプトが動きました。&lt;br>
以上でTypeScriptの開発環境のセットアップが完了です。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>本記事では、Voltaを利用してTypeScriptの開発環境を簡単にセットアップする方法について説明しました。
Voltaを利用することで、Node.jsのバージョン管理が簡単になり、開発環境のセットアップがスムーズに行えます。
また、VoltaでNode.jsのバージョンを指定すると、package.jsonにバージョンが記述され、他の開発者とのバージョンの差異を解消することができる点も魅力的ですね。&lt;/p></description></item><item><title>ITIL v4 キャパシティ及びパフォーマンス管理について解説</title><link>https://bossagyu.com/blog/020-itilv4-capacity-and-performance-management/</link><pubDate>Tue, 27 Feb 2024 08:53:36 +0900</pubDate><guid>https://bossagyu.com/blog/020-itilv4-capacity-and-performance-management/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>この記事では、ITIL v4のキャパシティ及びパフォーマンス管理について説明します。
た、理解した内容をもとに自分の経験を当てはめキャパシティ及びパフォーマンス管理のプロセスについて説明します。&lt;/p>
&lt;h2 id="キャパシティおよびパフォーマンス管理とは">キャパシティおよびパフォーマンス管理とは&lt;/h2>
&lt;p>サービス及びサービスを支えるリソースのパフォーマンスを管理することです。&lt;br>
キャパシティとパフォーマンスの管理活動を通じて、サービスのパフォーマンスを最適化し、サービスのキャパシティを適切に確保することが目的です。&lt;/p>
&lt;h2 id="キャパシティ及びパフォーマンス管理のプロセス">キャパシティ及びパフォーマンス管理のプロセス&lt;/h2>
&lt;p>キャパシティ及びパフォーマンス管理のプロセスは以下の2つがあります。&lt;/p>
&lt;ul>
&lt;li>キャパシティとパフォーマンスコントロールの確立&lt;/li>
&lt;li>サービスのキャパシティとパフォーマンスの分析と改善&lt;/li>
&lt;/ul>
&lt;h3 id="キャパシティとパフォーマンスコントロールの確立">キャパシティとパフォーマンスコントロールの確立&lt;/h3>
&lt;p>キャパシティとパフォーマンスコントロールの確立は、サービスが利用するITリソースの使用量と性能基準について、要件を利害関係者と合意し、それらを評価するタイミング・基準値・報告形式を決めることです。&lt;/p>
&lt;p>以下の流れで実現されます。&lt;/p>
&lt;ol>
&lt;li>サービスキャパシティとパフォーマンス要件の特定&lt;/li>
&lt;li>サービスキャパシティとパフォーマンス要件の合意&lt;/li>
&lt;li>キャパシティとパフォーマンスの要件の決定&lt;/li>
&lt;li>キャパシティとパフォーマンス評価指標とレポートの設計&lt;/li>
&lt;/ol>
&lt;p>上記プロセスに対して筆者の経験を当てはめると以下の通りになりました。&lt;/p>
&lt;ul>
&lt;li>サービスキャパシティとパフォーマンス要件の特定
&lt;ul>
&lt;li>筆者は社内PFとしてAPIを提供していたため、社内の利用者から求められるレイテンシー性能（99%ile Nms）を特定しました。&lt;/li>
&lt;li>上記のしきい値をベースにパフォーマンス検証を行い、1インスタンスあたりのスループットを測定しました。&lt;/li>
&lt;li>スループットをベースに必要となる金額を算出しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サービスキャパシティとパフォーマンス要件の合意
&lt;ul>
&lt;li>レイテンシー性能とスループットを関係者と合意を行いました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>キャパシティとパフォーマンスの要件の決定
&lt;ul>
&lt;li>こちらについては合意内容と変わらず&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>キャパシティとパフォーマンス評価指標のレポートの設計
&lt;ul>
&lt;li>パフォーマンスについてはDynatraceと呼ばれるトレーシングツールを利用して計測、レポートを作成しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="サービスのキャパシティとパフォーマンスの分析と改善">サービスのキャパシティとパフォーマンスの分析と改善&lt;/h3>
&lt;p>サービスの出力ログ・インシデント情報から使用量と性能状況の問題点を分析する。&lt;/p>
&lt;p>以下の流れで実現されます。&lt;/p>
&lt;ol>
&lt;li>キャパシティとパフォーマンスの分析&lt;/li>
&lt;li>キャパシティとパフォーマンスの報告&lt;/li>
&lt;li>キャパシティとパフォーマンスの計画と設計&lt;/li>
&lt;/ol>
&lt;p>上記プロセスに対して筆者の経験を当てはめると以下の通りになりました。&lt;/p>
&lt;ul>
&lt;li>キャパシティとパフォーマンスの分析
&lt;ul>
&lt;li>パフォーマンスの分析については、Dynatraceを利用して、レイテンシー性能とスループットを分析しました。&lt;/li>
&lt;li>インシデント情報から、パフォーマンスの問題点を特定しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>キャパシティとパフォーマンスの報告
&lt;ul>
&lt;li>パフォーマンスの報告については、Dynatraceのダッシュボードを利用して、レイテンシー性能とスループットを可視化しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>キャパシティとパフォーマンスの計画と設計
&lt;ul>
&lt;li>利用者の拡大によって現状のキャパシティでは受け入れが難しくなります。&lt;/li>
&lt;li>需要予測を立て必要なキャパシティの増強計画を立てて、実行に移すようにしています。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>今回はキャパシティ及びパフォーマンス管理について学習した内容に基づき筆者の経験を当てはめ説明しました。
キャパシティ及びパフォーマンス管理では、可用性管理相当のことをキャパシティとパフォーマンスの観点から行うことが理解できました。&lt;br>
筆者の経験ではパフォーマンスの話と可用性の話についてはセットで行うことが多いのであまり独立して行わないと感じました。&lt;/p></description></item><item><title>MacでStable Diffusion Web UIを使う方法</title><link>https://bossagyu.com/blog/019-stable-diffusion/</link><pubDate>Mon, 12 Feb 2024 11:24:59 +0900</pubDate><guid>https://bossagyu.com/blog/019-stable-diffusion/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>この記事ではMacにStable Diffusion Web UIをインストールし、ローカルで利用する方法を紹介します。&lt;/p>
&lt;h2 id="stable-diffusionとは">Stable Diffusionとは&lt;/h2>
&lt;p>Stable Diffusionは、AIを用いた画像処理技術の一つです。
テキストを入力することで、そのテキストに対応する画像を生成することができます。&lt;/p>
&lt;p>以下は、Stable Diffusionのアニメ画像を出力できるモデルで、黒髪の少女を出力した例です。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/019-stable-diffusion/img-019-003.png"
width="389"
height="389"
srcset="https://bossagyu.com/blog/019-stable-diffusion/img-019-003_huf43ace8cce0a642242bd8f163fc1e22c_288137_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/019-stable-diffusion/img-019-003_huf43ace8cce0a642242bd8f163fc1e22c_288137_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Stable Diffusionのイメージ"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;h2 id="stable-diffusionを利用する方法">Stable Diffusionを利用する方法&lt;/h2>
&lt;p>Stable Diffusionを利用方法は大きく以下の2種類に分かれます。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://huggingface.co/" target="_blank" rel="noopener"
>Hugging Face&lt;/a>, &lt;a class="link" href="https://beta.dreamstudio.ai/generate" target="_blank" rel="noopener"
>Dream Studio&lt;/a> などのwebアプリケーションを利用する&lt;/li>
&lt;li>ローカルでStable Diffusion Web UIを利用する&lt;/li>
&lt;/ul>
&lt;p>本記事では、ローカルでStable Diffusion Web UIを利用する方法を紹介します。
試しに使って見るだけであれば、webアプリケーションを利用するのが簡単ですが、画像を大量に生成する場合は制限があったり、費用がかかったりするので、
ある程度の量を生成する場合はローカルで利用することをおすすめします。&lt;/p>
&lt;h2 id="stable-diffusion-web-uiをローカルで利用する方法">Stable Diffusion Web UIをローカルで利用する方法&lt;/h2>
&lt;p>今回はAUTOMATIC1111氏が公開している、&lt;a class="link" href="https://github.com/AUTOMATIC1111/stable-diffusion-webui" target="_blank" rel="noopener"
>stable-diffusion-web-ui&lt;/a>を利用します。&lt;/p>
&lt;ol>
&lt;li>動作する環境を整える&lt;/li>
&lt;li>stable-diffusion-web-uiをインストールする&lt;/li>
&lt;li>モデルファイルを配置する&lt;/li>
&lt;li>stable-diffusion-web-uiを起動し画像を生成する&lt;/li>
&lt;/ol>
&lt;h3 id="1-動作する環境を整える">1. 動作する環境を整える&lt;/h3>
&lt;p>まずは、ローカルで動作させるにあたって、Pythonやその他ライブラリが必要であるため、homebrewを利用してインストールします。&lt;/p>
&lt;p>homebrewのインストール&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">/bin/bash -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>homebrewのパスを通す&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$PATH&lt;/span>&lt;span class="s2">:/opt/homebrew/bin/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>関連ライブラリのインストール&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install cmake protobuf rust pyenv git wget
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>pyenvを用いて、Python環境のセットアップ。複数のPythonのバージョンを使い分けられるようにします。
このあとにvenvも登場します。pythonの環境の構築については&lt;a class="link" href="https://bossagyu.com/blog/004-paython-setup/" target="_blank" rel="noopener"
>こちら&lt;/a>の記事を参考にしてください。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pyenv install 3.10.6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pyenv &lt;span class="nb">local&lt;/span> 3.10.6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-stable-diffusion-web-uiをインストールする">2. stable-diffusion-web-uiをインストールする&lt;/h3>
&lt;p>git cloneでリポジトリをクローンします。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> stable-diffusion-webui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>venvで仮想環境を設定、他の環境を汚さないようにします。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python -m venv venv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> venv/bin/activate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>これで環境構築は完了です。&lt;/p>
&lt;h3 id="3-モデルファイルを配置する">3. モデルファイルを配置する&lt;/h3>
&lt;p>次にモデルファイルをダウンロードしてきて、&lt;code>stable-diffusion-webui/models/Stable-diffusion/&lt;/code> ディレクトリに配置します。&lt;br>
モデルファイルは以下のサイトからダウンロードできます。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://dream-studio.tech/" target="_blank" rel="noopener"
>Civitai&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://huggingface.co/models?pipeline_tag=text-to-image&amp;amp;sort=downloads" target="_blank" rel="noopener"
>Hugging Face&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>今回はCivilaiから &lt;code>bule_pencil&lt;/code> のモデルをダウンロードしてきて利用してみます。&lt;/p>
&lt;p>Civilaiの検索窓に&lt;code>bule_pencil&lt;/code>と入力し、検索します。&lt;br>
検索結果から&lt;code>bule_pencil&lt;/code>を選択し、&lt;code>Download&lt;/code>ボタンをクリックします。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/019-stable-diffusion/img-019-001.png"
width="1357"
height="1019"
srcset="https://bossagyu.com/blog/019-stable-diffusion/img-019-001_hu0340b7643e68d89bf045571164e24a86_1170489_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/019-stable-diffusion/img-019-001_hu0340b7643e68d89bf045571164e24a86_1170489_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ダウンロード画面"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>ダウンロードしたモデルをディレクトリに移します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mv ~/Downloads/bluePencilXL_v401.safetensors models/Stable-diffusion/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-stable-diffusion-web-uiを起動し画像を生成する">4. stable-diffusion-web-uiを起動し画像を生成する&lt;/h3>
&lt;p>最後に、stable-diffusion-web-uiを起動し、画像を生成します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">./webui.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>起動したらプロンプトにテキストを入力し、画像を生成します。&lt;/p>
&lt;ol>
&lt;li>Stable Diffusion checkpointで先程ダウンロードしたbule_pencilを選択します。&lt;/li>
&lt;li>promptに生成したい画像の要素を入力します&lt;/li>
&lt;li>Negative promptに生成してほしくない画像の要素を入れます。&lt;/li>
&lt;li>Generateをクリックします。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://bossagyu.com/blog/019-stable-diffusion/img-019-002.png"
width="3304"
height="1860"
srcset="https://bossagyu.com/blog/019-stable-diffusion/img-019-002_hu4a45a04ce22c441948fe1eb974670ec4_1576758_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/019-stable-diffusion/img-019-002_hu4a45a04ce22c441948fe1eb974670ec4_1576758_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="画像生成画面"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>ピンク色のサングラスをかけた犬という意味のテキストを入力してみたところ、ちゃんと出力されました。&lt;br>
もちろん、他のテキストを入力することで、様々な画像を生成することができます。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>この記事ではMacにStable Diffusion Web UIをインストールし、ローカルで利用する方法を紹介しました。
ローカルで利用することで、制限があったり、費用がかかったりするwebアプリケーションを利用するよりも、自由に画像を生成することができます。&lt;/p></description></item><item><title>ITIL v4 事業分析について解説</title><link>https://bossagyu.com/blog/018-itilv4-business-analysis/</link><pubDate>Fri, 09 Feb 2024 09:00:56 +0900</pubDate><guid>https://bossagyu.com/blog/018-itilv4-business-analysis/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>ITIL v4の事業分析について、学習し理解した内容をまとめます。&lt;br>
また、理解した内容をもとに自分の経験を当てはめ、事業分析のプロセスについて説明します。&lt;/p>
&lt;h2 id="事業分析とは">事業分析とは&lt;/h2>
&lt;p>事業分析とは、事業または他の何らかの要素を分析し、それらのニーズへの対応やビジネス上の課題を解決するためのソリューションを提案するプロセスです。&lt;br>
「事業」分析とされていますが、対象は事業だけでないことに注意が必要です。&lt;/p>
&lt;h2 id="事業分析手法の例">事業分析手法の例&lt;/h2>
&lt;p>事業分析手法の例として以下のようなものがあります。&lt;/p>
&lt;ul>
&lt;li>SWOT分析&lt;/li>
&lt;li>ユーザーストーリー&lt;/li>
&lt;/ul>
&lt;p>具体的ない方法についてはここでは本題ではないため他のサイトに譲ります。&lt;br>
私は例には挙げられていませんが、カスタマージャーニーマップをよく使います。&lt;/p>
&lt;h2 id="事業分析のプロセス">事業分析のプロセス&lt;/h2>
&lt;p>事業分析のプロセスは以下の２つのプロセスがあります。&lt;/p>
&lt;ul>
&lt;li>事業分析アプローチの設計と維持&lt;/li>
&lt;li>事業分析とソリューションの特定&lt;/li>
&lt;/ul>
&lt;h3 id="事業分析アプローチの設計と維持">事業分析アプローチの設計と維持&lt;/h3>
&lt;p>このプロセスの焦点は、組織の現在および予想されるニーズに対処することにより、ビジネス分析に対する一貫した効果的なアプローチを確立することです。&lt;br>
以下の流れで実行されます。&lt;/p>
&lt;ul>
&lt;li>組織と要件を分析する&lt;/li>
&lt;li>ビジネス分析のアプローチ手法のレビュー&lt;/li>
&lt;li>ビジネス分析アプローチを実行する&lt;/li>
&lt;/ul>
&lt;p>私が所属する組織ではあまり、事業レイヤーレベルの分析を行うことはないですが、一般的に要件・要求があればそれを特定の手法で分析しましょうというお話であると理解しています。&lt;/p>
&lt;h3 id="事業分析とソリューションの特定">事業分析とソリューションの特定&lt;/h3>
&lt;p>このプロセスは、利害関係者のニーズと要件を分析することに重点が置かれています。
分析の結果から利害関係者のニーズと要件に対処するためのソリューションの特定と提案が含まれています。&lt;br>
以下の流れで実行されます。&lt;/p>
&lt;ol>
&lt;li>ステークホルダーからの情報収集と分析&lt;/li>
&lt;li>ソリューションのオプションを定義し、推奨されるソリューションを特定する&lt;/li>
&lt;li>ソリューション提供チームへのサポートの提供&lt;/li>
&lt;li>ソリューションのパフォーマンスと評価&lt;/li>
&lt;/ol>
&lt;p>上記活動について、私の経験を当てはめると以下のように理解しました。&lt;/p>
&lt;h4 id="12について">1,2について&lt;/h4>
&lt;ul>
&lt;li>ステークホルダーから情報を収集、得た情報の分析を行う。&lt;/li>
&lt;li>分析結果から解決すべき課題(why)を特定、課題に対してどのような解決策があるか(what)を決定する。&lt;/li>
&lt;/ul>
&lt;h4 id="3について">3について&lt;/h4>
&lt;ul>
&lt;li>1,2で特定されたwhy, whatに対して、どのような解決策(how)があるかをプロダクトチームと一緒に考える&lt;/li>
&lt;li>この際に解決手法とともに評価基準をきめ、どのような変化があればこのソリューションが成功したと言えるかを決定する。
&lt;ul>
&lt;li>またこの際に効果はどの程度の時間軸で現れるのかの認識を合わせておくとよい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="4について">4について&lt;/h4>
&lt;ul>
&lt;li>定めた評価基準に対して、ソリューションがどの程度達成されているかを定期的に評価する。&lt;/li>
&lt;li>数値については手動集計だと見なくなるので、個人的には自動化してGrafanaなどで可視化することをおすすめします。&lt;/li>
&lt;/ul>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>今回は事業分析について学習した内容に基づき私の経験を当てはめ説明しました。&lt;br>
個人的な理解としては事業分析といいつつ事業だけを対象としないこと、分析といいつつ分析したあとのプロセスも含まれていることが理解できました。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.axelos.com/resource-hub/practice/business-analysis-management-itil-4-practice-guide" target="_blank" rel="noopener"
>Business analysis management: ITIL 4 Practice Guide&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>VSCodeでGithub Copilotを設定して使う方法</title><link>https://bossagyu.com/blog/017-vscode-copilot/</link><pubDate>Sun, 04 Feb 2024 22:34:51 +0900</pubDate><guid>https://bossagyu.com/blog/017-vscode-copilot/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>この記事では、VSCodeでGithub Copilotを設定して使う方法を説明します。
前提としてGithub Copilotのアカウントが必要です。&lt;/p>
&lt;h2 id="vscodeでgithub-copilotを使えるようにするまで">VSCodeでGithub Copilotを使えるようにするまで&lt;/h2>
&lt;h3 id="拡張機能をインストール">拡張機能をインストール&lt;/h3>
&lt;p>まずは、VSCodeに拡張機能をインストールします。
VSCode を開き、左メニューの四角形が4つあるアイコンをクリックし、検索用テキスト入力に「copilot」と入力します。
「install」をクリックし、インストールを開始してください。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/017-vscode-copilot/img-017-001.png"
width="626"
height="267"
srcset="https://bossagyu.com/blog/017-vscode-copilot/img-017-001_hua2075257b737ae41d41cddc9273959b8_30520_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/017-vscode-copilot/img-017-001_hua2075257b737ae41d41cddc9273959b8_30520_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="拡張機能"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="562px"
>&lt;/p>
&lt;h3 id="githubとの連携">GitHubとの連携&lt;/h3>
&lt;p>installをクリックし、installが完了すれば以下のような画面が表示されるので、「Sign in to GitHub」をクリックします。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/017-vscode-copilot/img-017-002.png"
width="574"
height="141"
srcset="https://bossagyu.com/blog/017-vscode-copilot/img-017-002_hud50fff9149b461526033d19f8d6aa177_7541_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/017-vscode-copilot/img-017-002_hud50fff9149b461526033d19f8d6aa177_7541_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sing in to GitHubの画面"
class="gallery-image"
data-flex-grow="407"
data-flex-basis="977px"
>&lt;/p>
&lt;p>GitHubのアカウントへのアクセスを要求されるので「Allow」で許可します。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/017-vscode-copilot/img-017-003.png"
width="984"
height="245"
srcset="https://bossagyu.com/blog/017-vscode-copilot/img-017-003_hu2ee054375fc09dad64838e766feb723e_62679_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/017-vscode-copilot/img-017-003_hu2ee054375fc09dad64838e766feb723e_62679_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="アクセス許可確認画面"
class="gallery-image"
data-flex-grow="401"
data-flex-basis="963px"
>&lt;/p>
&lt;p>「Authorize Visual Studio Code」をクリックし、許可します。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/017-vscode-copilot/img-017-004.png"
width="653"
height="735"
srcset="https://bossagyu.com/blog/017-vscode-copilot/img-017-004_hu681f1d2b9e85acefcddbdd060977aa52_52159_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/017-vscode-copilot/img-017-004_hu681f1d2b9e85acefcddbdd060977aa52_52159_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="確認画面"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="213px"
>&lt;/p>
&lt;p>これでGithub CopilotとVSCodeの連携が完了し、使えるようになりました。&lt;/p>
&lt;h2 id="使い方">使い方&lt;/h2>
&lt;p>基本的には、コードを書いていくだけで自動的に保管されるようになります。
保管内容が提案されるので以下のコマンドを使いながらコードを書いていくと良いでしょう。&lt;/p>
&lt;h3 id="チートシート">チートシート&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>機能&lt;/th>
&lt;th>キー&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>提案を受け入れる&lt;/td>
&lt;td>Tab&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>提案を拒否する&lt;/td>
&lt;td>Esc&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Copilotを開く&lt;/td>
&lt;td>Ctrl + Enter&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>次の提案&lt;/td>
&lt;td>Alt/Option + ]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>前の提案&lt;/td>
&lt;td>Alt/Option + [&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>インラインCopilotをトリガーする&lt;/td>
&lt;td>Alt/Option + \&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>VSCodeでGithub Copilotを設定して使う方法について説明しました。&lt;br>
また、Github Copilotはソースコードだけではなく文章にも保管を行ってくれます。&lt;/p>
&lt;p>このブログもGithub Copilotで保管を行いながら書いており、かなり効率化できています。&lt;br>
ぜひ使ってみてください。&lt;/p></description></item><item><title>ITIL v4 可用性管理について解説</title><link>https://bossagyu.com/blog/016-itilv4-availability-management/</link><pubDate>Tue, 30 Jan 2024 20:34:58 +0900</pubDate><guid>https://bossagyu.com/blog/016-itilv4-availability-management/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>この記事では、ITIL v4の可用性管理について説明します。
また、理解した内容をもとに自分の経験を当てはあめ、可用性管理のプロセスについて説明します。&lt;/p>
&lt;h2 id="可用性管理とは">可用性管理とは&lt;/h2>
&lt;p>可用性管理とは、サービスの可用性を確保するための活動のことです。
可用性管理の目的は、サービスが顧客とユーザーのニーズを満たすために合意されたレベルの可用性を確実に提供することです。&lt;/p>
&lt;h2 id="可用性管理のプロセス">可用性管理のプロセス&lt;/h2>
&lt;p>可用性管理のプロセスは以下２つがあります。&lt;/p>
&lt;ul>
&lt;li>サービス可用性制御の確立&lt;/li>
&lt;li>サービス可用性の分析と改善&lt;/li>
&lt;/ul>
&lt;h3 id="サービス可用性制御の確立">サービス可用性制御の確立&lt;/h3>
&lt;p>サービス可用性制御の確立は、サービスの可用性を確保するための活動のことです。
以下の流れで実現されます。&lt;/p>
&lt;ol>
&lt;li>サービス可用性要件の特定&lt;/li>
&lt;li>サービス可用性要件の合意&lt;/li>
&lt;li>可用性測定要件の決定&lt;/li>
&lt;li>可用性メトリクスと報告の設計&lt;/li>
&lt;/ol>
&lt;p>上記プロセスに対して自分の経験を当てはめると以下のように理解しました。&lt;/p>
&lt;ul>
&lt;li>サービス可用性要件の特定
&lt;ul>
&lt;li>どのような利用者がおり、サービスが停止したときの事業リスクなどの影響を特定する。&lt;/li>
&lt;li>自分のサービスは社内のPFなので、各サービスがPFとして利用しておりそれぞれどのような影響があるかを特定しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サービス可用性要件の合意
&lt;ul>
&lt;li>SLAの形でサービスの可用性（稼働率99%）などを合意する&lt;/li>
&lt;li>稼働率では停止判定の基準や、例外事由なども明らかにしました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可用性測定要件の決定
&lt;ul>
&lt;li>測定要件については可用性要件合意の段階で何をサービス停止とするかを決めているので、測定要件は特になし。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可用性メトリクスと報告の設計
&lt;ul>
&lt;li>基本的には「ダウンタイム/稼働時間」で設計&lt;/li>
&lt;li>報告については、可用性メトリクスを可視化するためのダッシュボードを作成しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="サービス可用性の分析と改善">サービス可用性の分析と改善&lt;/h3>
&lt;p>サービス可用性の分析と改善は、その名の通り可用性の分析と改善を行うプロセスです。
以下の流れで実現されます。&lt;/p>
&lt;ol>
&lt;li>サービス可用性の分析&lt;/li>
&lt;li>サービス可用性の報告&lt;/li>
&lt;li>サービス可用性の計画と設計&lt;/li>
&lt;/ol>
&lt;p>上記プロセスに対して自分の経験を当てはめると以下のように理解しました。&lt;/p>
&lt;ul>
&lt;li>サービス可用性の分析
&lt;ul>
&lt;li>サービス可用性が達成されていることを確認し、集計します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サービス可用性の報告
&lt;ul>
&lt;li>可用性をダッシュボードに反映、誰でも見られる状態にします。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サービス可用性の計画と設計
&lt;ul>
&lt;li>可用性を割るような障害が発生した場合、再発防止のための計画を立てました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.axelos.com/resource-hub/practice/availability-management-itil-4-practice-guide" target="_blank" rel="noopener"
>Availability management: ITIL 4 Practice Guide&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>s3のオブジェクトの存在確認をする方法</title><link>https://bossagyu.com/blog/015-s3-object-check/</link><pubDate>Sat, 27 Jan 2024 21:41:37 +0900</pubDate><guid>https://bossagyu.com/blog/015-s3-object-check/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>このページではPythonでs3のオブジェクトの存在確認をする方法を説明します。&lt;/p>
&lt;h2 id="boto3を利用して確認する方法">boto3を利用して確認する方法&lt;/h2>
&lt;p>boto3.resourceを利用する場合は以下のようなコードでチェックできます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">s3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">boto3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;s3&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;bucket_name&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;object_name&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">except&lt;/span> &lt;span class="n">ClientError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">error_code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Error&amp;#39;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s1">&amp;#39;Code&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">error_code&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;404&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Object does not exist.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;An error occurred: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>boto3.clientを利用する場合は以下のようなコードでチェックできます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">s3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">boto3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">client&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;s3&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">head_object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Bucket&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;bucket_name&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;object_name&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">except&lt;/span> &lt;span class="n">ClientError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">error_code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Error&amp;#39;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s1">&amp;#39;Code&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">error_code&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;404&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Object does not exist.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;An error occurred: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/33842944/check-if-a-key-exists-in-a-bucket-in-s3-using-boto3" target="_blank" rel="noopener"
>check if a file exists in s3 bucket using boto3&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>AWS API GatewayとLambdaを連携させる方法</title><link>https://bossagyu.com/blog/014-aws-apigateway-lambda/</link><pubDate>Sat, 13 Jan 2024 18:06:52 +0900</pubDate><guid>https://bossagyu.com/blog/014-aws-apigateway-lambda/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>AWS API GatewayとLambdaを連携させることで、API GatewayからLambdaを呼び出すことができます。
本記事AWS API GatewayとLambdaを連携させる方法を紹介します。&lt;/p>
&lt;h2 id="前提条件">前提条件&lt;/h2>
&lt;p>Lambda関数については作成されていることを前提としています。
作成していない場合は、下記記事を参考に作成してください。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/getting-started.html" target="_blank" rel="noopener"
>AWS Lambdaを作成する方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="どの形式でapi-gatewayとlambdaを連携させるかを考える">どの形式でAPI GatewayとLambdaを連携させるかを考える&lt;/h2>
&lt;p>API GatewayとLambdaを連携させるに当たってどのような方式で連携させるか以下の2点について考える必要があります。&lt;/p>
&lt;ol>
&lt;li>API Gatewayのリクエスト形式について&lt;/li>
&lt;li>プロキシ統合が非プロキシ統合か&lt;/li>
&lt;/ol>
&lt;h3 id="api-gatewayのリクエスト形式について">API Gatewayのリクエスト形式について&lt;/h3>
&lt;p>以下の形式から選択できます。&lt;/p>
&lt;ul>
&lt;li>REST API&lt;/li>
&lt;li>HTTP API&lt;/li>
&lt;li>WebSocket API&lt;/li>
&lt;/ul>
&lt;p>この内、REST APIの形式で利用する場合は、REST APIかHTTP APIのどちらかを選択することになります。&lt;br>
REST APIの方が機能が多いですが、HTTP APIと比べコストがかかります。&lt;br>
特に複雑なことをしないのであればHTTP APIを選択するのが良いと思います。&lt;/p>
&lt;p>詳細な比較内容については&lt;a class="link" href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html" target="_blank" rel="noopener"
>公式ドキュメント&lt;/a>で公開されているのでそちらを参照してください。&lt;/p>
&lt;h2 id="プロキシ統合が非プロキシ統合か">プロキシ統合が非プロキシ統合か&lt;/h2>
&lt;p>プロキシ統合を利用することで、Lambdaから返される値のフォーマットが固定化されます。
基本的にはプロキシ統合を利用することをおすすめします。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html" target="_blank" rel="noopener"
>API Gateway で Lambda プロキシ統合を設定する&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="設定">設定&lt;/h2>
&lt;p>Lambda関数を作成したら、トリガー追加を選択します。&lt;br>
&lt;img src="https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-001.png"
width="3298"
height="980"
srcset="https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-001_hu7a602e3d547dfd28cd38c53d38cddce0_223431_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-001_hu7a602e3d547dfd28cd38c53d38cddce0_223431_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lambdaトリガー追加"
class="gallery-image"
data-flex-grow="336"
data-flex-basis="807px"
>&lt;/p>
&lt;p>API Gatewayを選択します。&lt;br>
&lt;img src="https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-002.png"
width="966"
height="522"
srcset="https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-002_hu446ae81980eb6a0d259b3af0f9d88117_59141_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-002_hu446ae81980eb6a0d259b3af0f9d88117_59141_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="API Gatewayを選択"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
>&lt;/p>
&lt;p>トリガーを追加の画面で以下のように設定を行います。
&lt;img src="https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-003.png"
width="892"
height="1203"
srcset="https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-003_hu45d67fc282f3323f6fa435777af50650_166604_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-003_hu45d67fc282f3323f6fa435777af50650_166604_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="API Gatewayの設定"
class="gallery-image"
data-flex-grow="74"
data-flex-basis="177px"
>&lt;/p>
&lt;p>設定がうまくいくと以下のような画面になります。&lt;br>
&lt;img src="https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-004.png"
width="1396"
height="969"
srcset="https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-004_hu4410e1ba85bd0e88e16bb309c05ab865_175168_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/014-aws-apigateway-lambda/img-014-004_hu4410e1ba85bd0e88e16bb309c05ab865_175168_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="API Gatewayの設定完了"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="345px"
>&lt;/p>
&lt;p>&lt;code>API endpoint&lt;/code> に記載のエンドポイントにcurlなどでアクセスするとLambda関数が実行されます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ curl https://xxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/default/apigateway-get-sample
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;Hello from Lambda!&amp;#34;&lt;/span>%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>本記事ではAWS API GatewayとLambdaを連携させる方法を紹介しました。
API Gatewayと連携させることで外部から任意のタイミングでLambda関数を呼び出すことができるようになります。&lt;/p></description></item><item><title>プライバシーポリシー</title><link>https://bossagyu.com/others/privacy-policy/</link><pubDate>Mon, 08 Jan 2024 21:55:15 +0900</pubDate><guid>https://bossagyu.com/others/privacy-policy/</guid><description>&lt;p>Bossagyu Blog（以下，「当サイト」といいます。）は，本ウェブサイト上で提供するサービス（以下,「本サービス」といいます。）における，ユーザーの個人情報の取扱いについて，以下のとおりプライバシーポリシー（以下，「本ポリシー」といいます。）を定めます。&lt;/p>
&lt;h2 id="第1条個人情報">第1条（個人情報）&lt;/h2>
&lt;p>「個人情報」とは，個人情報保護法にいう「個人情報」を指すものとし，生存する個人に関する情報であって，当該情報に含まれる氏名，生年月日，住所，電話番号，連絡先その他の記述等により特定の個人を識別できる情報及び容貌，指紋，声紋にかかるデータ，及び健康保険証の保険者番号などの当該情報単体から特定の個人を識別できる情報（個人識別情報）を指します。&lt;/p>
&lt;h2 id="第2条個人情報の収集方法">第2条（個人情報の収集方法）&lt;/h2>
&lt;p>当サイトはユーザーが利用登録をする際に氏名，住所，電話番号，メールアドレスなどの個人情報をお尋ねすることがあります。また、ユーザーと提携先などとの間でなされたユーザーの個人情報を含む取引記録や決済に関する情報を、当サイトの提携先（情報提供元，広告主，広告配信先などを含みます。以下，｢提携先｣といいます。）などから収集することがあります。&lt;/p>
&lt;h3 id="cookie">Cookie&lt;/h3>
&lt;p>当サイトでは、アクセス解析サービス、各種アフィリエイトプログラム、広告配信サービスを利用しております。これらの広告配信業者は、ユーザーのご興味に応じた商品やサービスの広告を表示するため、ユーザーの当サイトおよび他サイトへのアクセスに関する情報Cookieを使用することがございます。&lt;/p>
&lt;p>Cookieは、ユーザーが当サイトあるいは他サイトを閲覧された際、使用されたコンピューターやデバイス内に記録されます。ただし、この情報には、お名前・ご住所・メールアドレス・電話番号など個人を特定できるものは一切含まれません。&lt;/p>
&lt;p>Cookieによる情報収集を好まれない場合、ユーザーご自身でブラウザで受け入れを拒否するよう設定することも可能です。ただし、この設定により一部のコンテンツが正しく機能しない場合、またサービスが受けられない場合がございます。あらかじめご了承ください。&lt;/p>
&lt;p>なお、設定方法に関しては&lt;a class="link" href="https://policies.google.com/technologies/partner-sites?hl=ja" target="_blank" rel="noopener"
>Googleポリシーと規約&lt;/a>にてご確認いただけます。&lt;/p>
&lt;h3 id="アクセス解析ツールについて">アクセス解析ツールについて&lt;/h3>
&lt;p>当サイトでは、Googleの提供するアクセス解析ツール『Google Analytics』を使用しています。Google Analyticsはトラフィックデータの収集のためCookieを利用します。このトラフィックデータは匿名で収集されており、個人を特定するものではございません。&lt;/p>
&lt;p>ユーザーは、Cookieを無効化することにより、データの収集を拒否することができます。お使いのブラウザより設定をご確認ください。&lt;/p>
&lt;p>なお、この規約に関しては、&lt;a class="link" href="https://marketingplatform.google.com/about/analytics/terms/jp/" target="_blank" rel="noopener"
>Google アナリティクス利用規約&lt;/a>および&lt;a class="link" href="https://policies.google.com/technologies/partner-sites?hl=ja" target="_blank" rel="noopener"
>Googleポリシーと規約&lt;/a>でご確認いただけます。&lt;/p>
&lt;h2 id="第3条当サイトの提携先に関する事項">第3条（当サイトの提携先に関する事項）&lt;/h2>
&lt;h3 id="1広告の配信について">1．広告の配信について&lt;/h3>
&lt;p>　当サイトは第三者配信の広告サービス「Google Adsense グーグルアドセンス」を利用しています。広告配信事業者は、ユーザーの興味に応じた広告を表示するためにCookie（クッキー）を使用することがあります。Cookie（クッキー）を無効にする設定およびGoogleアドセンスに関する詳細は「&lt;a class="link" href="https://policies.google.com/technologies/partner-sites?hl=ja" target="_blank" rel="noopener"
>広告 – ポリシーと規約 – Google&lt;/a>」をご覧ください。&lt;/p>
&lt;p>　また、当サイトは、Amazon.co.jpを宣伝しリンクすることによってサイトが紹介料を獲得できる手段を提供することを目的に設定されたアフィリエイトプログラムである、Amazonアソシエイト・プログラムの参加者です。第三者がコンテンツおよび宣伝を提供し、訪問者から直接情報を収集し、訪問者のブラウザにCookie（クッキー）を設定したりこれを認識したりする場合があります。&lt;/p>
&lt;h2 id="第4条個人情報を収集利用する目的">第4条（個人情報を収集・利用する目的）&lt;/h2>
&lt;p>当サイトが個人情報を収集・利用する目的は，以下のとおりです。&lt;/p>
&lt;ol>
&lt;li>当サイトサービスの提供・運営のため&lt;/li>
&lt;li>ユーザーからのお問い合わせに回答するため（本人確認を行うことを含む）&lt;/li>
&lt;li>ユーザーにご自身の登録情報の閲覧や変更，削除，ご利用状況の閲覧を行っていただくため&lt;/li>
&lt;li>上記の利用目的に付随する目的&lt;/li>
&lt;/ol>
&lt;h2 id="第5条利用目的の変更">第5条（利用目的の変更）&lt;/h2>
&lt;ol>
&lt;li>当サイトは，利用目的が変更前と関連性を有すると合理的に認められる場合に限り，個人情報の利用目的を変更するものとします。&lt;/li>
&lt;li>利用目的の変更を行った場合には，変更後の目的について，当社所定の方法により，ユーザーに通知し，または本ウェブサイト上に公表するものとします。&lt;/li>
&lt;/ol>
&lt;h2 id="第6条個人情報の第三者提供">第6条（個人情報の第三者提供）&lt;/h2>
&lt;ol>
&lt;li>当サイトは，次に掲げる場合を除いて，あらかじめユーザーの同意を得ることなく，第三者に個人情報を提供することはありません。ただし，個人情報保護法その他の法令で認められる場合を除きます。
&lt;ol>
&lt;li>人の生命，身体または財産の保護のために必要がある場合であって，本人の同意を得ることが困難であるとき&lt;/li>
&lt;li>公衆衛生の向上または児童の健全な育成の推進のために特に必要がある場合であって，本人の同意を得ることが困難であるとき&lt;/li>
&lt;li>国の機関もしくは地方公共団体またはその委託を受けた者が法令の定める事務を遂行することに対して協力する必要がある場合であって，本人の同意を得ることにより当該事務の遂行に支障を及ぼすおそれがあるとき&lt;/li>
&lt;li>予め次の事項を告知あるいは公表し，かつ当社が個人情報保護委員会に届出をしたとき
&lt;ol>
&lt;li>利用目的に第三者への提供を含むこと&lt;/li>
&lt;li>第三者に提供されるデータの項目&lt;/li>
&lt;li>第三者への提供の手段または方法&lt;/li>
&lt;li>本人の求めに応じて個人情報の第三者への提供を停止すること&lt;/li>
&lt;li>本人の求めを受け付ける方法&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="第7条個人情報の開示">第7条（個人情報の開示）&lt;/h2>
&lt;ol>
&lt;li>当サイトは，本人から個人情報の開示を求められたときは，本人に対し，遅滞なくこれを開示します。ただし，開示することにより次のいずれかに該当する場合は，その全部または一部を開示しないこともあり，開示しない決定をした場合には，その旨を遅滞なく通知します。
&lt;ol>
&lt;li>本人または第三者の生命，身体，財産その他の権利利益を害するおそれがある場合&lt;/li>
&lt;li>当社の業務の適正な実施に著しい支障を及ぼすおそれがある場合&lt;/li>
&lt;li>その他法令に違反することとなる場合&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>前項の定めにかかわらず，履歴情報および特性情報などの個人情報以外の情報については，原則として開示いたしません。&lt;/li>
&lt;/ol>
&lt;h2 id="第8条個人情報の訂正および削除">第8条（個人情報の訂正および削除）&lt;/h2>
&lt;ol>
&lt;li>ユーザーは，当サイトの保有する自己の個人情報が誤った情報である場合には，当社が定める手続きにより，当サイトに対して個人情報の訂正，追加または削除（以下，「訂正等」といいます。）を請求することができます。&lt;/li>
&lt;li>当サイトは，ユーザーから前項の請求を受けてその請求に応じる必要があると判断した場合には，遅滞なく，当該個人情報の訂正等を行うものとします。&lt;/li>
&lt;li>当サイトは，前項の規定に基づき訂正等を行った場合，または訂正等を行わない旨の決定をしたときは遅滞なく，これをユーザーに通知します。&lt;/li>
&lt;/ol>
&lt;h2 id="第10条プライバシーポリシーの変更">第10条（プライバシーポリシーの変更）&lt;/h2>
&lt;ol>
&lt;li>本ポリシーの内容は，法令その他本ポリシーに別段の定めのある事項を除いて，ユーザーに通知することなく，変更することができるものとします。&lt;/li>
&lt;li>当社が別途定める場合を除いて，変更後のプライバシーポリシーは，本ウェブサイトに掲載したときから効力を生じるものとします。&lt;/li>
&lt;/ol>
&lt;h2 id="第11条-著作権について">第11条 著作権について&lt;/h2>
&lt;p>当サイトのコンテンツ（写真や画像、文章など）の著作権につきましては、 原則として当サイトに帰属しており、無断転載することを禁止します。&lt;/p>
&lt;p>当サイトのコンテンツを利用したい場合は、別途お問い合わせください。&lt;/p>
&lt;h2 id="第12条-リンクについて">第12条 リンクについて&lt;/h2>
&lt;p>当サイトは完全リンクフリーです。リンクを行う場合の当サイトへの許可や連絡は不要です。&lt;/p>
&lt;h2 id="第11条お問い合わせ窓口">第11条（お問い合わせ窓口）&lt;/h2>
&lt;p>本ポリシーに関するお問い合わせは，当サイトの &lt;a class="link" href="https://bossagyu.com/others/contact/" target="_blank" rel="noopener"
>お問い合わせ&lt;/a> よりご連絡をお願いします。&lt;/p></description></item><item><title>プロダクト戦略の作り方</title><link>https://bossagyu.com/blog/013-good-strategy-bad-strategy/</link><pubDate>Mon, 08 Jan 2024 21:55:15 +0900</pubDate><guid>https://bossagyu.com/blog/013-good-strategy-bad-strategy/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>良いプロダクト戦略の作り方について、「良い戦略、悪い戦略」という書籍をベースにまとめました。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>業務でプロダクトオーナーとして、前プロダクトオーナーからプロダクトを引き継ぎました。&lt;br>
引き継いだプロダクトにはプロダクト戦略がなく、プロダクトの方向性が定まっていない状態であったため、今後プロダクトをどうするかを含めて、プロダクト戦略を作成しました。&lt;/p>
&lt;p>プロダクト戦略を作成するにあたって、そもそも「戦略」というものが人によって様々な意味に解釈されており、なんでも「戦略」という言葉を使ってしまう傾向があると常々感じていました。
そこで、プロダクト戦略を作成するにあたって、どのような戦略を作成すれば良いのかを知るために、「良い戦略、悪い戦略」を読みました。&lt;/p>
&lt;h2 id="良い戦略とは">良い戦略とは&lt;/h2>
&lt;p>良い戦略とは、こちらの打つ手の効果が一気に高まるようなポイントを見つけ、そこに狙いを絞って手持ちのリソースを集中させることで、効果を最大化することができる戦略です。
戦略とは組織が前に進むためにどのようにしたら良いかを示すものである必要があります。&lt;/p>
&lt;p>良い戦略は、以下の3つの基本構造を持っています。&lt;/p>
&lt;ul>
&lt;li>診断&lt;/li>
&lt;li>基本方針&lt;/li>
&lt;li>行動&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://bossagyu.com/blog/013-good-strategy-bad-strategy/img-013-001.png"
width="1496"
height="844"
srcset="https://bossagyu.com/blog/013-good-strategy-bad-strategy/img-013-001_hu74bc795a581a6eebaf9972b83112b6d2_147669_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/013-good-strategy-bad-strategy/img-013-001_hu74bc795a581a6eebaf9972b83112b6d2_147669_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="良い戦略の3つの基本構造"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;h3 id="診断">診断&lt;/h3>
&lt;p>診断とは、状況を診断し取り組むべき課題を見極めることです。&lt;br>
良い診断は死活的に重要な問題点をより分け、複雑に絡み合った状況を明快に整理することができます。&lt;/p>
&lt;p>戦略を立てる作業の多くは、今何が置きているのかを洗い出すことにあります。まずは情報を集めることが何よりも大切です。&lt;br>
本書ではコンサルが提案するようなフレームに割り当てるだけではまともな戦略はできない。とこき下ろしていますが情報をしっかりと集めた上でフレームに割り当て整理することを診断の段階で行うことは有意義だと私は考えています。&lt;/p>
&lt;p>実際に私がプロダクト戦略を作成するにあたって、SWOT分析でプロダクトの置かれる状況を、インパクトマッピングを用いて現状の施策が一体誰にどのような影響を与えるのかの整理を行いました。&lt;br>
それぞれのやり方については、以下の記事や書籍を参照してください。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.innovation.co.jp/urumo/swot/" target="_blank" rel="noopener"
>SWOT分析&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://amzn.asia/d/0FygsZ4" target="_blank" rel="noopener"
>インパクトマッピング&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="基本方針">基本方針&lt;/h3>
&lt;p>基本方針とは、診断で見つかった課題にどう取り組むか、大きな方向性と総合的な方針を示すことです。&lt;br>
良い基本方針とは、目標でもビジョンではない、何曲に立ち向かう方法を固め、他の選択肢を排除することが基本方針である。と本書では述べられていました。&lt;br>
決定的な一点に努力を集中させることによって、大きな効果を上げることができます。&lt;/p>
&lt;p>このため良い戦略の中には、その戦略に従うことによって何に対してリソースを割くのかがはっきりと分かるようになっていることが大切です。&lt;/p>
&lt;p>私が戦略を立てた際には、インパクトマッピングで整理した内容をベースに、プロダクトの置かれた現状やビジョンをもとに勘案し、プロダクトの方向性を決めました。&lt;br>
リソースを選択する意味では、どのターゲットのセグメントに対して、どのような価値を提供するのかを明確にすることを意識しました。&lt;/p>
&lt;h3 id="行動">行動&lt;/h3>
&lt;p>基本方針を実行するために設計された一貫性のある一連の行動のことです。
戦略が存在することですべての行動をコーディネートして方針を実行することができます。&lt;/p>
&lt;p>このため、良い戦略は、行動を実行するための指針が含まれていることが大切となります。&lt;/p>
&lt;h3 id="私が立てた戦略">私が立てた戦略&lt;/h3>
&lt;p>上記をベースに私が立てた戦略は以下となりました。&lt;br>
会社で立てた戦略ですので、一部ぼかして書いています。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">xx機能の利用者の新規利用コストを低減する
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>かなりシンプルなものになりましたが、以下のように良い戦略の3つの基本構造を満たしていると考えています。&lt;/p>
&lt;ul>
&lt;li>診断
&lt;ul>
&lt;li>プロダクトの状況、課題をベースに考えたときにxxの新規利用者を増やすことが会社の利益につながると考えました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>基本方針
&lt;ul>
&lt;li>新規利用者を確保するために導入コストを下げるという基本方針を定めました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>行動
&lt;ul>
&lt;li>基本方針を実現するためにいくつかのアプローチを用意し優先順位をつけました。&lt;/li>
&lt;li>ここについては行動を連想できるようなワードを戦略に含められればと考えましたが上記対応としました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="悪い戦略とは">悪い戦略とは&lt;/h2>
&lt;p>最後に陥りがちな悪い戦略のパターンについて書いておきます。&lt;/p>
&lt;p>悪い戦略の特徴&lt;/p>
&lt;ul>
&lt;li>空疎である
&lt;ul>
&lt;li>わかり切っていることを専門用語や業界用語で煙に巻くような内容&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>重大な問題に取り組まない
&lt;ul>
&lt;li>本来困難な課題を克服し、障害を乗り越えるためのものが戦略である。&lt;/li>
&lt;li>達成容易性のみを考えた戦略は悪い戦略である。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>目標と戦略と取り違えている
&lt;ul>
&lt;li>売りあげ10%向上など。それはただの目標である。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>間違った戦略目標を掲げている
&lt;ul>
&lt;li>十分な周辺・原因の調査がなく戦略を掲げている状態。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>今回は、良いプロダクト戦略の作り方について、「良い戦略、悪い戦略」という書籍をベースにまとめました。
一回でいきなり良い戦略は立てられないと考えています。ただ、戦略のない環境はただ闇雲に走っているだけなのでそれが成功したのか失敗したのかすら判断することができない最低の状態です。&lt;br>
最初は下手な戦略でも良いので、良い戦略とは何かを意識しつつ常に周りの状況を観察しながら、戦略をアップデートしプロダクトと組織の方向性を定めていくことが大切だと思います。&lt;/p></description></item><item><title>問い合わせ</title><link>https://bossagyu.com/others/contact/</link><pubDate>Mon, 08 Jan 2024 21:55:15 +0900</pubDate><guid>https://bossagyu.com/others/contact/</guid><description>&lt;p>問い合わせについては、TwitterのDMにて受け付けております。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://twitter.com/bossagyu" target="_blank" rel="noopener"
>@bossagyu&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Twitter Social Cardの設定方法</title><link>https://bossagyu.com/blog/012-social-card/</link><pubDate>Sat, 06 Jan 2024 21:45:12 +0900</pubDate><guid>https://bossagyu.com/blog/012-social-card/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>この記事では、Hugoで作ったブログにTwitter Social Cardを設定する方法を説明します。&lt;/p>
&lt;h2 id="twitter-social-cardとは">Twitter Social Cardとは&lt;/h2>
&lt;p>Twitter Social Cardとは、Twitterで記事をシェアした際に表示される画像のことです。
以下のような画像がTwitter Social Cardです。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/012-social-card/img-012-001.png"
width="602"
height="220"
srcset="https://bossagyu.com/blog/012-social-card/img-012-001_hua2e3d73bb1829d9bc1818e9b476a1657_53764_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/012-social-card/img-012-001_hua2e3d73bb1829d9bc1818e9b476a1657_53764_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Twitter Social Card"
class="gallery-image"
data-flex-grow="273"
data-flex-basis="656px"
>&lt;/p>
&lt;p>Twitter Social Cardは、以下の種類があります。&lt;/p>
&lt;ul>
&lt;li>Summary Card&lt;/li>
&lt;li>Summary Card with Large Image&lt;/li>
&lt;li>App Card&lt;/li>
&lt;li>Player Card&lt;/li>
&lt;/ul>
&lt;p>この中でもブログのシェアを行う場合は、Summary Card か Summary Card with Large Image を利用することが多いです。&lt;/p>
&lt;p>そのれぞれのカードがどのようなものかについてはTwitterの&lt;a class="link" href="https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards" target="_blank" rel="noopener"
>公式ドキュメント&lt;/a>を参照してください。&lt;/p>
&lt;h2 id="twitter-social-cardの設定方法">Twitter Social Cardの設定方法&lt;/h2>
&lt;p>Twitter Social Cardの設定方法は、以下の2つの方法があります。&lt;/p>
&lt;ul>
&lt;li>テーマによる設定&lt;/li>
&lt;li>テーマに依存しない設定&lt;/li>
&lt;/ul>
&lt;h3 id="テーマによる設定">テーマによる設定&lt;/h3>
&lt;p>テーマによっては、Twitter Social Cardの設定を行うことができます。&lt;/p>
&lt;p>今回は私が採用している&lt;a class="link" href="https://themes.gohugo.io/hugo-theme-stack/" target="_blank" rel="noopener"
>Stack&lt;/a>を例に説明します。&lt;/p>
&lt;p>Stackでは、&lt;code>config.toml&lt;/code> 対して以下のような設定を行うことでTwitter Social Cardの設定が可能です。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">opengraph&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">twitter&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">site&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">card&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;summary&amp;#34;&lt;/span> &lt;span class="c"># summary or summary_large_image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">defaultImage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">opengraph&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">enabled&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">local&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">src&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;/images/share.webp&amp;#34;&lt;/span> &lt;span class="c"># デフォルトで設定したいimageのパス&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="テーマに依存しない設定">テーマに依存しない設定&lt;/h3>
&lt;p>テーマによっては、Twitter Social Cardの設定を行うことができません。
自前で実装して、設定を行う必要があります。&lt;/p>
&lt;p>Hugoの公式で&lt;a class="link" href="https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/twitter_cards.html" target="_blank" rel="noopener"
>実装のテンプレート&lt;/a>が公開されていますので、それを利用することで容易に実装することが可能です。&lt;/p>
&lt;h2 id="うまくいかない場合">うまくいかない場合&lt;/h2>
&lt;p>うまくいかない場合はうまく設定が反映されていない、megaタグが正しく設定されていない可能性があります。
Twitterから提供されている&lt;a class="link" href="https://cards-dev.twitter.com/validator" target="_blank" rel="noopener"
>デバッグツール&lt;/a>を利用して、設定が正しく反映されているか確認してみましょう。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>この記事では、Hugoで作ったブログにTwitter Social Cardを設定する方法を説明しました。
Social Cardを設定することで、Twitterで記事をシェアした際に、より多くの人に記事を読んでもらうことができますのでぜひ設定しましょう。&lt;/p></description></item><item><title>ChatGPTを利用してHugoで作ったブログを多言語対応する方法</title><link>https://bossagyu.com/blog/011-hugo-multilingul-support/</link><pubDate>Sun, 31 Dec 2023 20:46:36 +0900</pubDate><guid>https://bossagyu.com/blog/011-hugo-multilingul-support/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>この記事では、ChatGPTを利用してHugoで作ったブログを多言語対応する方法を説明します。&lt;/p>
&lt;h2 id="ghatgptを利用して記事を英語化する方法">GhatGPTを利用して記事を英語化する方法&lt;/h2>
&lt;p>Markdownで書かれた記事を&lt;a class="link" href="https://chat.openai.com/" target="_blank" rel="noopener"
>ChatGPT&lt;/a>に英語化させます。
英語化を実施するにあたって、なるべき体裁を崩さないようにするために、以下のようなプロンプトをChatGPTへ入力します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">マークダウンを体裁を崩さずに英語にしてください。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">マークダウン以外の余分な出力は行わないでください。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">英語化された内容をそのままコピーできる形で出力してください。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>その後、日本語で書いた記事をそのまま貼り付けると、英語化されたMarkdownが出力されます。
出力結果の左下のコピーボタンから出力結果をコピーすれば、英語化は完了です。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/011-hugo-multilingul-support/img-011-001.png"
width="1542"
height="516"
srcset="https://bossagyu.com/blog/011-hugo-multilingul-support/img-011-001_hu712801eb1dd59e23992097ade27112d6_94833_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/011-hugo-multilingul-support/img-011-001_hu712801eb1dd59e23992097ade27112d6_94833_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ChatGPTの画面"
class="gallery-image"
data-flex-grow="298"
data-flex-basis="717px"
>&lt;/p>
&lt;p>また、ChatGPTを利用する際はGPT3.5ではなく、課金をしてGPT4を利用することを強くおすすめします。
GPT4は月々お金がかかりますが、GPT3.5と比べて圧倒的に正しい回答を返す確率が高いので、英語化以外の用途にも使えます。&lt;/p>
&lt;h2 id="hugoで多言語対応する方法">Hugoで多言語対応する方法&lt;/h2>
&lt;p>Hugoで多言語化を行うための設定方法を記載します。&lt;/p>
&lt;h3 id="設定ファイルの作成">設定ファイルの作成&lt;/h3>
&lt;p>config.tomlに以下のような設定を追加します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># デフォルトの言語を設定、設定しない場合英語がデフォルト判定されます。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">defaultContentLanguage&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;jp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">languages&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c"># 言語ごとに設定を変更します&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">languages&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jp&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Bossagyu Blog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">languageName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;ja-jp 🇯🇵&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LanguageCode&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;ja-jp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">contentDir&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;content&amp;#34;&lt;/span> &lt;span class="c"># 日本語ブログ記事を格納するディレクトリ&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">languages&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">languages&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">en&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Bossagyu Blog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">languageName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;en-US 🇺🇸&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LanguageCode&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;en-US&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">contentDir&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;content.en&amp;#34;&lt;/span> &lt;span class="c"># 英語ブログ記事を格納するディレクトリ&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">languages&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">en&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上記のような設定を行うことで、&lt;code>content&lt;/code>ディレクトリに日本語の記事を、&lt;code>content.en&lt;/code>ディレクトリに英語の記事を書くことで多言語対応が可能となります。&lt;/p>
&lt;p>最終的なディレクトリ構成は以下のような形になります。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">project/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── content/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── index.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── blog/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── index.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── article1.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── content.en/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── index.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── blog/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── index.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── article1.en.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>また英語化したディレクトリの中には &lt;code>記事名.en.md&lt;/code> の拡張子とすることで、デフォルト言語に対する英語の記事として認識され、記事に言語変換用のアイコンが出力されるようになります。
記事についてはGhatGPTを用いて英語化したものをコピー&amp;amp;ペーストするだけでOKです。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>この記事では、ChatGPTを利用してHugoで作ったブログを多言語対応する方法を説明しました。
ChatGPTを利用することで、英語化を簡単に行うことができます。
また、多言語対応することで記事を日本以外の国にもリーチでき、より多くの人に記事を読んでもらえます。&lt;/p>
&lt;p>ローコストで多言語対応できるのでぜひやってみましょう。&lt;/p></description></item><item><title>Faviconを作ってHugoで表示する方法</title><link>https://bossagyu.com/blog/010-favicon/</link><pubDate>Sun, 24 Dec 2023 22:14:39 +0900</pubDate><guid>https://bossagyu.com/blog/010-favicon/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>Faviconを簡単に作る方法を解説します。
また、HugoでFaviconを表示する方法も解説します。&lt;/p>
&lt;h2 id="faviconとは">Faviconとは&lt;/h2>
&lt;p>Faviconとは、ウェブサイトのブックマークやタブ、ホーム画面などに表示されるアイコンのことです。
Googleより検索結果に表示されるための&lt;a class="link" href="https://developers.google.com/search/docs/appearance/favicon-in-search?hl=ja#guidelines" target="_blank" rel="noopener"
>faviconのガイドライン&lt;/a>が公開されており、
こちらに従うことで検索結果に表示されるようになります。&lt;/p>
&lt;h2 id="faviconの作成">Faviconの作成&lt;/h2>
&lt;p>Faviconを作成するには、以下のサイトを利用します。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.favicon-generator.org/" target="_blank" rel="noopener"
>Favicon.ico &amp;amp; App Icon Generator&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>サイトにアクセスすると、以下のような画面が表示されます。&lt;br>
&lt;img src="https://bossagyu.com/blog/010-favicon/img-010-001.png"
width="3336"
height="1510"
srcset="https://bossagyu.com/blog/010-favicon/img-010-001_hu49ad1e6722066171a92ca460c1768e6d_699110_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/010-favicon/img-010-001_hu49ad1e6722066171a92ca460c1768e6d_699110_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Favicon Generator"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="530px"
>&lt;/p>
&lt;p>faviconを作成したいサイトのURLを入力し、Generate Faviconをクリックします。
その後表示される画面で、「Download the generated favicon」のリンクをクリックすると、faviconがダウンロードできます。&lt;/p>
&lt;h2 id="hugoでfaviconを表示する">HugoでFaviconを表示する&lt;/h2>
&lt;p>HugoでFaviconを表示するには、themeによっても違うますが、 &lt;a class="link" href="https://github.com/clente/hugo-bearcub/tree/main" target="_blank" rel="noopener"
>bearcub&lt;/a> の場合は
以下のようにtomlに設定するだけでfaviconが表示できます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>params&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">favicon&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;images/favicon.ico&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Faviconを作成する方法と、HugoでFaviconを表示する方法を解説しました。&lt;br>
Faviconは、ブログのブックマークやタブ、ホーム画面などに表示されるので、作成しておくと良いでしょう。&lt;/p></description></item><item><title>Lighthouseの使い方の紹介</title><link>https://bossagyu.com/blog/009-light-house/</link><pubDate>Fri, 22 Dec 2023 23:08:00 +0900</pubDate><guid>https://bossagyu.com/blog/009-light-house/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>Lighthouseを用いて、ブログのパフォーマンスを計測する方法を解説します。&lt;/p>
&lt;h2 id="lighthouseとは">Lighthouseとは&lt;/h2>
&lt;p>LighthouseはGoogleが提供している、Webサイトのパフォーマンスを計測するツールです。
Google Chromeの拡張機能として提供されており、プラグインをインストールすることで利用することができます。&lt;/p>
&lt;h2 id="lighthouseのインストール">Lighthouseのインストール&lt;/h2>
&lt;p>Lighthouseをchromeウェブストアからインストールします。&lt;br>
&lt;img src="https://bossagyu.com/blog/009-light-house/img-009-001.png"
width="3090"
height="528"
srcset="https://bossagyu.com/blog/009-light-house/img-009-001_huebb24c65f9e0514e53794d84dae1d193_147708_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/009-light-house/img-009-001_huebb24c65f9e0514e53794d84dae1d193_147708_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lighthouse chromeストア"
class="gallery-image"
data-flex-grow="585"
data-flex-basis="1404px"
>&lt;/p>
&lt;p>分析したいサイトを開き、Lighthouseのアイコンをクリックします。&lt;br>
&lt;img src="https://bossagyu.com/blog/009-light-house/img-009-002.png"
width="976"
height="184"
srcset="https://bossagyu.com/blog/009-light-house/img-009-002_hu79a554b91c1fd5ce9f2d244e8889fd8e_12110_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/009-light-house/img-009-002_hu79a554b91c1fd5ce9f2d244e8889fd8e_12110_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lighthouse アイコン"
class="gallery-image"
data-flex-grow="530"
data-flex-basis="1273px"
>&lt;/p>
&lt;p>Generate reportをクリックすると、分析が始まります。&lt;br>
今回は私の&lt;a class="link" href="https://bossagyu.com/blog/001-hugo-netlify-build/" target="_blank" rel="noopener"
>ブログのページ&lt;/a>で実行しました。&lt;br>
&lt;img src="https://bossagyu.com/blog/009-light-house/img-009-003.png"
width="546"
height="1048"
srcset="https://bossagyu.com/blog/009-light-house/img-009-003_hu32cc9d1c5498eef6660862acfbb0c7a0_88803_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/009-light-house/img-009-003_hu32cc9d1c5498eef6660862acfbb0c7a0_88803_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lighthouse 実行画面"
class="gallery-image"
data-flex-grow="52"
data-flex-basis="125px"
>&lt;/p>
&lt;p>実行すると、以下のような結果が表示されます。&lt;br>
実行の完了までに約1分くらい時間がかかります。&lt;br>
&lt;img src="https://bossagyu.com/blog/009-light-house/img-009-004.png"
width="1756"
height="906"
srcset="https://bossagyu.com/blog/009-light-house/img-009-004_hu5ee3cbd9121e8af4f867f831e4523042_214018_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/009-light-house/img-009-004_hu5ee3cbd9121e8af4f867f831e4523042_214018_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lighthouse 結果"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;h2 id="結果の見方">結果の見方&lt;/h2>
&lt;h3 id="performance">Performance&lt;/h3>
&lt;p>ページの読み込み速度や画像の表示速度など、webサイトのパフォーマンスが評価される。
See calculatorのリンクをクリックすると詳細に飛べる。&lt;br>
&lt;img src="https://bossagyu.com/blog/009-light-house/img-009-005.png"
width="2236"
height="1222"
srcset="https://bossagyu.com/blog/009-light-house/img-009-005_hu09a21b450202618b8da67da25ceb5565_223078_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/009-light-house/img-009-005_hu09a21b450202618b8da67da25ceb5565_223078_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lighthouse Performance"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="439px"
>&lt;/p>
&lt;h3 id="accessibility">Accessibility&lt;/h3>
&lt;p>すべてのユーザーがコンテンツにアクセス、サイト内を効率的に移動できるかどうかを確認する。
スクロールすると、Accessibilityで指摘されている箇所が表示される。&lt;br>
&lt;img src="https://bossagyu.com/blog/009-light-house/img-009-006.png"
width="1790"
height="1238"
srcset="https://bossagyu.com/blog/009-light-house/img-009-006_hu87f9c989c987a1b95b21e6ceb46b2c76_168048_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/009-light-house/img-009-006_hu87f9c989c987a1b95b21e6ceb46b2c76_168048_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lighthouse Accessibility"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>コードスニペットを貼っているところの色のコントラストが弱いことと、リンクに説明がないことを指摘されています。&lt;/p>
&lt;p>ただ、指摘されている内容は自分の記述ではなく、テンプレートに依存している部分なので、これを直そうと思うとHugoのテンプレートをオーバーライドする必要がありますね。。&lt;/p>
&lt;h3 id="best-practices">Best Practices&lt;/h3>
&lt;p>ウェブページの健全性についてテストを行います。
検証項目については結果から閲覧できます。
&lt;img src="https://bossagyu.com/blog/009-light-house/img-009-007.png"
width="962"
height="1070"
srcset="https://bossagyu.com/blog/009-light-house/img-009-007_hub9685d9d8ccde516e384b3026e5fd960_91137_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/009-light-house/img-009-007_hub9685d9d8ccde516e384b3026e5fd960_91137_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lighthouse Best Practices"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/p>
&lt;h3 id="seo">SEO&lt;/h3>
&lt;p>ページが検索エンジンの結果ランキング向けに最適化されているかを確認できます。
&lt;img src="https://bossagyu.com/blog/009-light-house/img-009-008.png"
width="957"
height="1215"
srcset="https://bossagyu.com/blog/009-light-house/img-009-008_hu4f2424bc6d0c40fadc50e3b571a98160_118994_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/009-light-house/img-009-008_hu4f2424bc6d0c40fadc50e3b571a98160_118994_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lighthouse SEO"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="189px"
>&lt;/p>
&lt;h3 id="progressive-web-app">Progressive Web App&lt;/h3>
&lt;p>スマートフォン上のウェブページの読み込み速度を高速化できているか、PWAに最適化できているかを確認できます。
今回はチェックしてません。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Lighthouseを用いて、ブログのパフォーマンスを計測する方法を解説しました。
特にSEOについては、Googleの検索結果に表示されるかどうかに影響するので、しっかりと対応しておきましょう。&lt;/p></description></item><item><title>AWS EventBridgeを用いてLambdaを定期実行する方法</title><link>https://bossagyu.com/blog/008-aws-eventbrdge/</link><pubDate>Thu, 21 Dec 2023 23:03:13 +0900</pubDate><guid>https://bossagyu.com/blog/008-aws-eventbrdge/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>AWS EventBridgeを用いてLambdaを定期実行する方法を解説します。&lt;/p>
&lt;h2 id="aws-eventbridgeとは">AWS EventBridgeとは&lt;/h2>
&lt;p>AWS EventBridgeは、AWSのサービス間でイベントを受け渡すためのサービスです。
EventBridgeを利用することで、イベント駆動型のアーキテクチャを構築することができます。&lt;/p>
&lt;p>詳細な説明は &lt;a class="link" href="https://docs.aws.amazon.com/ja_jp/eventbridge/latest/userguide/eb-what-is.html" target="_blank" rel="noopener"
>AWS公式ドキュメント&lt;/a> を参照してください。&lt;/p>
&lt;h2 id="前提">前提&lt;/h2>
&lt;p>Lambda関数についてはすでに作成されていることを前提としています。
Lambda関数の作成方法については、&lt;a class="link" href="https://aws.amazon.com/jp/lambda/getting-started/" target="_blank" rel="noopener"
>AWA Labda 開始方法&lt;/a> を参照して作成してください。&lt;/p>
&lt;h2 id="手順">手順&lt;/h2>
&lt;p>EventBridgeで実行する予定のLambda関数を選択し「トリガーを追加」を選択します。&lt;br>
&lt;img src="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-001.png"
width="1682"
height="608"
srcset="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-001_hua3391a0a4e37513ed67145a092be2b5f_101439_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/008-aws-eventbrdge/img-008-001_hua3391a0a4e37513ed67145a092be2b5f_101439_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="トリガー追加画面"
class="gallery-image"
data-flex-grow="276"
data-flex-basis="663px"
>&lt;/p>
&lt;p>トリガーから「EventBridge」を選択します。&lt;br>
&lt;img src="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-002.png"
width="930"
height="400"
srcset="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-002_hu8fd7668508fa3ea65743ea0e537fb483_58214_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/008-aws-eventbrdge/img-008-002_hu8fd7668508fa3ea65743ea0e537fb483_58214_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="EventBridgeの選択画面"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>&lt;/p>
&lt;p>トリガーの選択を行うと、ルールの作成画面が表示されるので設定します。&lt;br>
今回はcron形式で5分ごとに実行するように設定しています。&lt;br>
cronのsyntaxについては &lt;a class="link" href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html#cron-based" target="_blank" rel="noopener"
>Schedule type on EventBridge Scheduler&lt;/a> のページを参考にしてください。&lt;br>
&lt;img src="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-003.png"
width="891"
height="903"
srcset="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-003_hub807cbe0354fdfc130d1a185b4a890c6_114907_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/008-aws-eventbrdge/img-008-003_hub807cbe0354fdfc130d1a185b4a890c6_114907_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="トリガーの追加"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="236px"
>&lt;/p>
&lt;p>設定が完了するとLambda関数のダイアグラムのトリガーにEventBridgeが追加されます。&lt;br>
&lt;img src="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-004.png"
width="1761"
height="976"
srcset="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-004_huc419c6d31f69165530a8b0d8165aa994_183418_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/008-aws-eventbrdge/img-008-004_huc419c6d31f69165530a8b0d8165aa994_183418_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="設定完了画面"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="433px"
>&lt;/p>
&lt;p>ちなみに私はLINEにメッセージを通知するFunctionを作って動かしてみました。&lt;br>
こんな感じで5分に1回通知がくるようになりました。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-005.png"
width="1494"
height="256"
srcset="https://bossagyu.com/blog/008-aws-eventbrdge/img-008-005_hu71f6b6c6b7e02c0c07c0e3b24896f2dd_36361_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/008-aws-eventbrdge/img-008-005_hu71f6b6c6b7e02c0c07c0e3b24896f2dd_36361_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="EventBrideでLambda関数を動作させた結果"
class="gallery-image"
data-flex-grow="583"
data-flex-basis="1400px"
>&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>AWS EventBridgeを用いてLambdaを定期実行する方法を解説しました。
今回設定したEventBridgeについてはこのまま放置しておくと、課金が発生するので、不要になったら削除しておきましょう。&lt;/p></description></item><item><title>Google Search Consoleを用いてブログをGoogle検索の対象にする方法</title><link>https://bossagyu.com/blog/007-google-search-console/</link><pubDate>Mon, 18 Dec 2023 19:10:04 +0900</pubDate><guid>https://bossagyu.com/blog/007-google-search-console/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>Google検索で引っかかるようにするために、SEO対策を行いましょうとありますが、まずはGoogle検索に認識されないと話になりません。
この記事では、Google Search Consoleを用いて自身が作成した独自ドメインのブログが、Google検索の対象となる方法を解説します。&lt;/p>
&lt;h2 id="実現までの流れ">実現までの流れ&lt;/h2>
&lt;ol>
&lt;li>Google Search Consoleの登録&lt;/li>
&lt;li>ドメインの所有権の確認&lt;/li>
&lt;li>サイトマップの登録&lt;/li>
&lt;li>インデックス登録をリクエスト&lt;/li>
&lt;li>まとめ&lt;/li>
&lt;/ol>
&lt;h2 id="google-search-consoleの登録">Google Search Consoleの登録&lt;/h2>
&lt;p>&lt;a class="link" href="https://search.google.com/search-console/welcome" target="_blank" rel="noopener"
>Google Search Console&lt;/a>に登録します。&lt;/p>
&lt;p>ドメインを選択肢、URLを入力します。&lt;br>
&lt;img src="https://bossagyu.com/blog/007-google-search-console/img-007-001.png"
width="1838"
height="1546"
srcset="https://bossagyu.com/blog/007-google-search-console/img-007-001_hueec663f85e06a371439303da89c78565_290083_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/007-google-search-console/img-007-001_hueec663f85e06a371439303da89c78565_290083_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="URL入力画面"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="285px"
>&lt;/p>
&lt;h2 id="ドメインの所有権の確認">ドメインの所有権の確認&lt;/h2>
&lt;p>以下のような画像が表示されDNSの所有権を確認します。&lt;br>
(念のためTXTレコードの内容は黒く塗りつぶしています。)
&lt;img src="https://bossagyu.com/blog/007-google-search-console/img-007-002.png"
width="1562"
height="1404"
srcset="https://bossagyu.com/blog/007-google-search-console/img-007-002_hu90d036695b5d9438a5ef8f0d8eb9f52d_277880_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/007-google-search-console/img-007-002_hu90d036695b5d9438a5ef8f0d8eb9f52d_277880_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="DNSの所有権確認画面"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;p>ドメインのTXTにGoogleが指定した文字列を追加することで、所有権を確認することができます。
ドメインのDNSの設定画面に移動し、TXTレコードを追加します。&lt;/p>
&lt;p>私の場合はNetlifyでドメインを取得しているので、NetlifyのDNSの設定画面に移動します。
&lt;code>Domains -&amp;gt; Domain Settings -&amp;gt; DNS Records&lt;/code> に移動し、TXTレコードを追加します。
&lt;img src="https://bossagyu.com/blog/007-google-search-console/img-007-003.png"
width="2510"
height="1058"
srcset="https://bossagyu.com/blog/007-google-search-console/img-007-003_hu314a39771588211da36db92d8d263e34_237067_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/007-google-search-console/img-007-003_hu314a39771588211da36db92d8d263e34_237067_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Netlify DNS設定画面"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="569px"
>&lt;/p>
&lt;p>レコードの内容はGoogle Search Consoleに表示されているものをコピーしてValueに貼り付けます。&lt;br>
(Valueの部分は黒く塗りつぶしています。)
&lt;img src="https://bossagyu.com/blog/007-google-search-console/img-007-004.png"
width="1174"
height="1128"
srcset="https://bossagyu.com/blog/007-google-search-console/img-007-004_hu1e1863a2c4e003478336f70e9eafc56f_103599_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/007-google-search-console/img-007-004_hu1e1863a2c4e003478336f70e9eafc56f_103599_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="DNS追加例"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="249px"
>&lt;/p>
&lt;p>DNSの反映を待ちます。ものによっては数時間かかる場合があります。&lt;/p>
&lt;p>DNSの反映はコマンドラインからでも確認できます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">dig -t txt bossagyu.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>その後、Google Search Consoleの所有権の確認を押します。&lt;br>
これで所有権の確認が完了し、Google Search Consoleにドメインが登録されます。&lt;/p>
&lt;h2 id="サイトマップの登録">サイトマップの登録&lt;/h2>
&lt;p>サイトマップを登録することで、Googleにサイトの構造を伝え、サイトのクロールを促進することができます。
Hugoで作成したブログの場合は、&lt;code>/sitemap.xml&lt;/code>にサイトマップが作成されているので、これを登録します。&lt;/p>
&lt;p>Google Search Consoleの左側のメニューから「サイトマップ」を選択し、サイトマップを追加します。
&lt;img src="https://bossagyu.com/blog/007-google-search-console/img-007-005.png"
width="1401"
height="649"
srcset="https://bossagyu.com/blog/007-google-search-console/img-007-005_huab186b2aac0819b0a23c39035e1f9b13_109847_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/007-google-search-console/img-007-005_huab186b2aac0819b0a23c39035e1f9b13_109847_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="サイトマップの登録画面"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="518px"
>&lt;/p>
&lt;h2 id="インデックス登録をリクエスト">インデックス登録をリクエスト&lt;/h2>
&lt;p>サイトマップに登録されていても、Googleがクロールして、その後インデックスが登録されるまでには時間がかかります。
私の場合は数日待ってもインデックスが登録されなかったので、インデックス登録をリクエストしました。&lt;/p>
&lt;p>Google Search Consoleの検索窓で登録したいURLを検索し、検索結果の右側にある「インデックス登録をリクエスト」を押します。
&lt;img src="https://bossagyu.com/blog/007-google-search-console/img-007-006.png"
width="2900"
height="868"
srcset="https://bossagyu.com/blog/007-google-search-console/img-007-006_hu89514150a49eb25441f9d3432897d97a_212853_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/007-google-search-console/img-007-006_hu89514150a49eb25441f9d3432897d97a_212853_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="インデックス登録をリクエスト"
class="gallery-image"
data-flex-grow="334"
data-flex-basis="801px"
>&lt;/p>
&lt;p>これでインデックス登録をリクエストできます。
クリックしてから数時間でインデックスが登録されました。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>Google Search Consoleを用いて自身が作成した独自ドメインのブログが検索に引っかかるようにする方法を解説しました。&lt;br>
せっかくブログを作成したのに、Google検索に引っかからないのはもったいないので、ぜひ試してみてください。&lt;/p></description></item><item><title>IntellijでAWS Toolkitを使ってLambdaを効率よく開発する</title><link>https://bossagyu.com/blog/006-intellij-lamda-setup/</link><pubDate>Tue, 12 Dec 2023 22:40:05 +0900</pubDate><guid>https://bossagyu.com/blog/006-intellij-lamda-setup/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>IntellijでAWS Toolkitを使ってLambdaを効率よく開発する方法を解説します。&lt;/p>
&lt;h2 id="実現までの流れ">実現までの流れ&lt;/h2>
&lt;ol>
&lt;li>事前準備&lt;/li>
&lt;li>AWS Toolkitのインストール&lt;/li>
&lt;li>AWS Toolkitの設定&lt;/li>
&lt;li>Lambdaの開発&lt;/li>
&lt;li>Lambdaをローカルで実行&lt;/li>
&lt;li>まとめ&lt;/li>
&lt;/ol>
&lt;h2 id="事前準備">事前準備&lt;/h2>
&lt;h3 id="dockerのインストール">dockerのインストール&lt;/h3>
&lt;p>intellijで利用するAWS Toolkitでは、Lambda動作させるためにDockerを使用します。&lt;br>
このため事前に &lt;a class="link" href="https://docs.docker.jp/docker-for-mac/install.html" target="_blank" rel="noopener"
>こちら&lt;/a>を参考にDockerをインストールしておいてください。&lt;/p>
&lt;h3 id="aws-cliのインストール">AWS CLIのインストール&lt;/h3>
&lt;p>AWS CLI(SAM)をインストールします。&lt;br>
インストール方法は &lt;a class="link" href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2-mac.html" target="_blank" rel="noopener"
>こちら&lt;/a> を参考にしてください。&lt;/p>
&lt;p>IntellijにSAM CLI executableのパスを &lt;code>File -&amp;gt; Settings -&amp;gt; Tools -&amp;gt; AWS Toolkit&lt;/code> から設定します。&lt;br>
私の環境ではbrewでインストールしたので、以下のパスを設定しました。
&lt;img src="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-005.png"
width="976"
height="707"
srcset="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-005_hu675386622417230d840d91c8ebb2bb8f_99529_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-005_hu675386622417230d840d91c8ebb2bb8f_99529_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Intellijの設定画面"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;h2 id="aws-toolkitのインストール">AWS Toolkitのインストール&lt;/h2>
&lt;p>IntellijのプラグインからAWS Toolkitをインストールします。
プラグインのインストールは &lt;a class="link" href="https://www.jetbrains.com/help/idea/managing-plugins.html#install_plugin" target="_blank" rel="noopener"
>こちら&lt;/a> を参考にしてください。&lt;/p>
&lt;h2 id="aws-toolkitの設定">AWS Toolkitの設定&lt;/h2>
&lt;p>AWS Toolkitを利用するためにはAWSの認証情報を設定する必要があります。&lt;/p>
&lt;p>AWS ExplorerからAWSの認証情報を設定します。
&lt;img src="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-001.png"
width="2196"
height="1099"
srcset="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-001_huf4116ed306cba8df785a2a60b5b23b2e_297569_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-001_huf4116ed306cba8df785a2a60b5b23b2e_297569_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="AWSの認証"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="479px"
>&lt;/p>
&lt;p>Access Key IDとSecret Access KeyをAWSのコンソールから取得し、設定します。
設定が完了したら、AWS ExplorerにAWSのリソースが表示されるようになります。
&lt;img src="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-002.png"
width="400"
height="517"
srcset="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-002_huef1a4e77eb43fc9eb01b7ee491b04729_36733_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-002_huef1a4e77eb43fc9eb01b7ee491b04729_36733_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="AWSリソース追加確認"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>&lt;/p>
&lt;p>この画像ではリージョンが &lt;code>us-east-1&lt;/code> になっていますが、Lambdaを作成するリージョンに合わせてください。&lt;/p>
&lt;h2 id="lambdaの開発">Lambdaの開発&lt;/h2>
&lt;p>以下のようなコードスニペットを作成します。&lt;/p>
&lt;p>lamda-sample.py&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">lambda_handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Hello World!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>AWS ExplorerからLambdaを作成します。&lt;br>
&lt;img src="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-003.png"
width="382"
height="452"
srcset="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-003_hu43e53933fae6825db1f62c0ff344925c_42804_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-003_hu43e53933fae6825db1f62c0ff344925c_42804_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lambda関数の作成画面"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/p>
&lt;p>Create Lambda Functionを選択し、必要な値を入力します。&lt;br>
Handlerにはコードスニペットの &lt;code>&amp;lt;ファイル名&amp;gt;.&amp;lt;関数名&amp;gt;&lt;/code> を入力してください。&lt;br>
&lt;img src="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-004.png"
width="769"
height="626"
srcset="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-004_hub0ca7c127cd2ded12c0d6c6eb7b0efd4_80439_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-004_hub0ca7c127cd2ded12c0d6c6eb7b0efd4_80439_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lambda関数の設定"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;p>これでLambdaの作成が完了しました。&lt;/p>
&lt;h2 id="lambdaをローカルで実行">Lambdaをローカルで実行&lt;/h2>
&lt;p>またToolkitを利用すると、Lambdaをローカルで実行することができます。
&lt;img src="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-006.png"
width="544"
height="181"
srcset="https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-006_hue5ae0f1238e4626d26a5e0ef51d83c5a_29793_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/006-intellij-lamda-setup/img-006-006_hue5ae0f1238e4626d26a5e0ef51d83c5a_29793_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Lambda関数の実行画面"
class="gallery-image"
data-flex-grow="300"
data-flex-basis="721px"
>&lt;/p>
&lt;p>Runを選択すると、Lambdaがローカルで実行されます。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>IntellijでAWS Toolkitを使ってLambdaを効率よく開発する方法を解説しました。
Intellijで開発してローカルで実行できるので、開発効率がかなり上がります。&lt;/p></description></item><item><title>IntellijでのGithub Copilotの使い方</title><link>https://bossagyu.com/blog/005-github-copilot/</link><pubDate>Mon, 11 Dec 2023 22:45:40 +0900</pubDate><guid>https://bossagyu.com/blog/005-github-copilot/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>Github CopilotをIntellijで使う方法を解説します。
合わせてショートカットのチートシートを記載します。&lt;/p>
&lt;h2 id="実現までの流れ">実現までの流れ&lt;/h2>
&lt;ol>
&lt;li>Github Copilotの登録&lt;/li>
&lt;li>Intellijの設定&lt;/li>
&lt;li>Github Copilotの利用&lt;/li>
&lt;li>まとめ&lt;/li>
&lt;/ol>
&lt;h2 id="github-copilotの登録">Github Copilotの登録&lt;/h2>
&lt;p>&lt;a class="link" href="https://copilot.github.com/" target="_blank" rel="noopener"
>Github Copilot&lt;/a> のリンクからGithub Copilotに登録します。&lt;/p>
&lt;h2 id="intellijの設定">Intellijの設定&lt;/h2>
&lt;p>IntellijのプラグインからGithub Copilotをインストールします。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/005-github-copilot/img-005-001.png"
width="972"
height="237"
srcset="https://bossagyu.com/blog/005-github-copilot/img-005-001_huf1c35ae508766e7174ebde609be4cd7c_63136_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/005-github-copilot/img-005-001_huf1c35ae508766e7174ebde609be4cd7c_63136_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Github Copilot plugin"
class="gallery-image"
data-flex-grow="410"
data-flex-basis="984px"
>&lt;/p>
&lt;p>インストールが完了したら、Intellijを再起動します。&lt;/p>
&lt;h2 id="github-copilotの利用">Github Copilotの利用&lt;/h2>
&lt;h3 id="ショートカット一覧">ショートカット一覧&lt;/h3>
&lt;p>Intellijでコードを書いていると、Github Copilotがコードを補完してくれます。&lt;/p>
&lt;p>macのショートカットの一覧は以下のとおりです。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ショートカット&lt;/th>
&lt;th>機能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>tab&lt;/code>&lt;/td>
&lt;td>コードを補完する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Option&lt;/code> + &lt;code>]&lt;/code>&lt;/td>
&lt;td>次の補完候補を表示する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Option&lt;/code> + &lt;code>[&lt;/code>&lt;/td>
&lt;td>前の補完候補を表示する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Command&lt;/code> + &lt;code>→&lt;/code>&lt;/td>
&lt;td>提案の次の単語のみ受け入れる&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="コメントによるコード補完">コメントによるコード補完&lt;/h3>
&lt;p>Github Copilotはコメントによるコード補完も行うことができます。&lt;/p>
&lt;p>例えば、以下のようなコメントを書くと、コメントの内容に応じてコードを補完してくれます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// このメソッドは、引数の値を2倍にして返す ← 書いたコメント
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">double&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// ← 生成されたコード
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>IntellijでGithub Copilotを利用する方法を解説しました。&lt;br>
この記事はGithub Copilotを利用して書いており、Markdownでのブログ作成でもかなり補完してくれるので、気になる人は試してみてください。&lt;/p></description></item><item><title>Pyenvとvenvを用いたローカル環境のセットアップ方法</title><link>https://bossagyu.com/blog/004-paython-setup/</link><pubDate>Sun, 10 Dec 2023 23:19:33 +0900</pubDate><guid>https://bossagyu.com/blog/004-paython-setup/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>macのローカル環境で開発を行う際のpythonの環境構築の方法について記載する。&lt;br>
今回は以下の２つの仕組みを利用して、pythonのバージョン管理と仮想環境の管理を行う。&lt;/p>
&lt;ul>
&lt;li>pyenv
&lt;ul>
&lt;li>複数のpythonのバージョンを扱うために利用する。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>venv
&lt;ul>
&lt;li>プロジェクトごとに環境を分けるために利用する。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>それぞれの違いや必要性の解説は&lt;a class="link" href="https://jimaru.blog/programming/python/venv_pyenv_choice/" target="_blank" rel="noopener"
>こちら&lt;/a>の記事が参考になります。&lt;/p>
&lt;h2 id="pythonのインストール">Pythonのインストール&lt;/h2>
&lt;p>まずは、ローカル環境にPyenvをインストールし、任意のPythonバージョンを利用できるようにします。&lt;/p>
&lt;p>pyenvをインストールします。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install pyenv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>インストールしたpyenvのバージョンを確認します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pyenv --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pyenv 2.3.35
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>zshに設定を追加する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> -e &lt;span class="s1">&amp;#39;if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n eval &amp;#34;$(pyenv init -)&amp;#34;\nfi&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>.zshrc&lt;/code>の内容を読み込む。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>インストール可能なPythonのバージョン一覧を表示する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pyenv install --list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>指定したバージョンをインストールする。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pyenv install 3.11.7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>プロジェクトフォルダに指定したPythonのバージョンを利用する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> &amp;lt;作成したプロジェクトフォルダ&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pyenv &lt;span class="nb">local&lt;/span> 3.11.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pyenv versions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>globalの場合は全体に反映される。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pyenv global 3.11.7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>実行されているpythonのバージョンを確認する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python -V
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="venvで仮想環境の作成">venvで仮想環境の作成&lt;/h2>
&lt;p>プロジェクトのディレクトリに仮想環境を作成する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># python -m venv &amp;lt;仮想環境名&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python -m venv venv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>仮想環境を有効化する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> venv/bin/activate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ディアクティベートは以下のコマンドで実行できる。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">deactivate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上でローカル環境の構築が完了です。&lt;/p></description></item><item><title>HugoでGoogle Analyticsの設定をする方法</title><link>https://bossagyu.com/blog/003-google-analytics/</link><pubDate>Sat, 09 Dec 2023 18:09:42 +0900</pubDate><guid>https://bossagyu.com/blog/003-google-analytics/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>HugoをでGoogle Analyticsを設定する方法をサクッと解説します。&lt;/p>
&lt;h2 id="実現までの流れ">実現までの流れ&lt;/h2>
&lt;ol>
&lt;li>Google Analyticsへの登録&lt;/li>
&lt;li>トラッキングIDの取得&lt;/li>
&lt;li>Hugoの設定にトラッキングIDを追加&lt;/li>
&lt;/ol>
&lt;h2 id="google-analyticsの登録">Google Analyticsの登録&lt;/h2>
&lt;p>&lt;a class="link" href="https://support.google.com/analytics/answer/9304153?hl=ja" target="_blank" rel="noopener"
>[GA4] アナリティクスで新しいウェブサイトまたはアプリのセットアップを行う&lt;/a>
に従い登録を行います。&lt;br>
データストリームを追加すると、トラッキングIDが取得できるのでメモしておきます。
&lt;img src="https://bossagyu.com/blog/003-google-analytics/img-003-001.png"
width="1262"
height="387"
srcset="https://bossagyu.com/blog/003-google-analytics/img-003-001_hud6bb49f0ab37d8b4799433827135bf4a_61149_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/003-google-analytics/img-003-001_hud6bb49f0ab37d8b4799433827135bf4a_61149_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="データストリーム追加画面"
class="gallery-image"
data-flex-grow="326"
data-flex-basis="782px"
>
※ トラッキングIDは日本語訳の影響か、測定IDという表示になっています。&lt;/p>
&lt;h2 id="hugoの設定にトラッキングidを追加">Hugoの設定にトラッキングIDを追加&lt;/h2>
&lt;h3 id="tomlに設定を追加">tomlに設定を追加&lt;/h3>
&lt;p>config.tomlに&lt;code>googleAnalytics = トラッキングID&lt;/code>を追加します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">baseURL&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;https://bossagyu.com&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">languageCode&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;ja-jp&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">title&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;Bossagyu Blog&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">theme&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;hugo-bearcub&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">googleAnalytics&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;G-1234ABCDEF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># ↑ この行を追加、トラッキングIDは自分のものに変更してください。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="トラッキングコードを埋め込む">トラッキングコードを埋め込む&lt;/h3>
&lt;p>テンプレートによってはtomlの設定を入れるだけで読めるものもあるみたいですが、
私の使用している&lt;a class="link" href="https://github.com/clente/hugo-bearcub/tree/main" target="_blank" rel="noopener"
>bearcub&lt;/a>のテンプレートは対応してなかったので、
自分でヘッダにトラッキングコードを読み込むように追加します。&lt;/p>
&lt;p>コードスニペットについては&lt;a class="link" href="https://github.com/clente/hugo-bearcub/tree/main" target="_blank" rel="noopener"
>まくまく Hugo ノート&lt;/a>を参考にさせていただきました。&lt;/p>
&lt;p>トラッキングコードを読むために &lt;code>layouts/partials/analytics.html&lt;/code> を作成する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">{{ if not .Site.IsServer }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{ with .Site.GoogleAnalytics }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- Google tag (gtag.js) --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">async&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://www.googletagmanager.com/gtag/js?id={{ . }}&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dataLayer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dataLayer&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">gtag&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="nx">dataLayer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">);}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gtag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;js&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gtag&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;config&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;{{ . }}&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{ end }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{ end }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ページヘッダで &lt;code>analytics.html&lt;/code> を読み込むようにする。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># テンプレートの内容をコピーしてきてオーバーライドする&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp themes/hugo-bearcub/layouts/_default/baseof.html layouts/_default/baseof.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim layouts/_default/baseof.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>baseof.htmlに&lt;code>{{- partial &amp;quot;analytics&amp;quot; . -}}&lt;/code> を追加する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ with .Site.LanguageCode }}{{ . }}{{ else }}en-US{{ end }}&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {{- partial &amp;#34;analytics&amp;#34; . -}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">http-equiv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;X-Clacks-Overhead&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;GNU Terry Pratchett&amp;#34;&lt;/span> &lt;span class="err">/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上記ソースコードを追加した状態で、再度ビルドするとGoogle Analyticsにデータが送信されるようになります。&lt;/p>
&lt;h2 id="tips">tips&lt;/h2>
&lt;p>こちらの対応をしても、Google Analyticsにデータが連携されていないように見える場合は、タグの追加がうまくいっていない可能性があります。&lt;br>
まずはタグがちゃんと入っているかの切り分けをするために、googleデベロッパーツールを開きトラッキングがhtml内に含まれているか確認してみるとよいです。&lt;/p></description></item><item><title>LINE Messaging APIの登録と使い方</title><link>https://bossagyu.com/blog/002-line-messaging-api/</link><pubDate>Thu, 07 Dec 2023 09:37:00 +0900</pubDate><guid>https://bossagyu.com/blog/002-line-messaging-api/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>LINEのBotを利用してアプリケーションを作ってみようと考えたのでまずはBotを利用できる状態にする。&lt;br>
本ページでは一番最初にLINE Message APIの登録の方法とcurlでコマンドラインからメッセージを送る方法を紹介します。&lt;/p>
&lt;h2 id="messaging-apiを利用する">Messaging APIを利用する&lt;/h2>
&lt;p>&lt;a class="link" href="https://developers.line.biz/console/" target="_blank" rel="noopener"
>LINE Developers&lt;/a> にログインしてプロバイダーを作成する。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/002-line-messaging-api/img-002-001.png"
width="1542"
height="947"
srcset="https://bossagyu.com/blog/002-line-messaging-api/img-002-001_hu0f14840654aed48d16eb2fc9422f6fa9_170581_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/002-line-messaging-api/img-002-001_hu0f14840654aed48d16eb2fc9422f6fa9_170581_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="プロバイダー作成画面"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>プロバイダーとは(&lt;a class="link" href="https://developers.line.biz/ja/docs/line-developers-console/overview/#provider" target="_blank" rel="noopener"
>説明&lt;/a>)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">LINE Developersサイトでは、サービスを提供し、ユーザーの情報を取得する開発者個人、
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">企業、または団体等をサービス提供者（LINEミニアプリではサービス事業主）と呼びます。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>なので好きな文字列を入れる。&lt;/p>
&lt;p>そのまま新規チャンネルを作成する。
&lt;img src="https://bossagyu.com/blog/002-line-messaging-api/img-002-002.png"
width="1393"
height="1461"
srcset="https://bossagyu.com/blog/002-line-messaging-api/img-002-002_hu35721a5501bd4d5408347db79d1d688a_163848_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/002-line-messaging-api/img-002-002_hu35721a5501bd4d5408347db79d1d688a_163848_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="チャンネル作成画面"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/p>
&lt;p>このまま作成ボタンを押すと新規チャンネルが作成される&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/002-line-messaging-api/img-002-003.png"
width="848"
height="267"
srcset="https://bossagyu.com/blog/002-line-messaging-api/img-002-003_hudf15c356e8d7f64c7636ad582293d1a9_33429_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/002-line-messaging-api/img-002-003_hudf15c356e8d7f64c7636ad582293d1a9_33429_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="チャンネル作成結果"
class="gallery-image"
data-flex-grow="317"
data-flex-basis="762px"
>&lt;/p>
&lt;h1 id="コマンドラインからポストをする">コマンドラインからポストをする&lt;/h1>
&lt;p>Messaging API設定からQRコードを読みこんで友達追加する。&lt;/p>
&lt;p>Messaging API設定から「チャンネルアクセストークン(長期)」を取得
チャンネル基本設定から「あなたのユーザーID」取得&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">TOKEN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;チャンネルアクセストークン(長期)&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;あなたのユーザーID&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">UUID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>uuidgen &lt;span class="p">|&lt;/span> tr &lt;span class="s2">&amp;#34;[:upper:]&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;[:lower:]&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -v -X POST https://api.line.me/v2/bot/message/push &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>-H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>-H &lt;span class="s2">&amp;#34;Authorization: Bearer &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">TOKEN&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>-H &lt;span class="s2">&amp;#34;X-Line-Retry-Key: &amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>-d &lt;span class="s2">&amp;#34;{
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> \&amp;#34;to\&amp;#34;: \&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ID&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">\&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> \&amp;#34;messages\&amp;#34;:[
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> \&amp;#34;type\&amp;#34;:\&amp;#34;text\&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> \&amp;#34;text\&amp;#34;:\&amp;#34;Hello, world1\&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> ]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>レスポンスが帰ってきて、LINEのトーク画面でBotからの投稿が行われていれば成功！&lt;/p></description></item><item><title>Hugo + Netlify + Githubでブログを公開する</title><link>https://bossagyu.com/blog/001-hugo-netlify-build/</link><pubDate>Sat, 02 Dec 2023 00:59:37 +0900</pubDate><guid>https://bossagyu.com/blog/001-hugo-netlify-build/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>Hugoで作ったサイトをGithubで管理、Netlifyでビルドした手順を0から作れるよう記載します。&lt;br>
この方式にすると手元でMarkDownで書いたブログをGithubにPushするだけで簡単に公開できるようになります。&lt;/p>
&lt;h2 id="流れ">流れ&lt;/h2>
&lt;ol>
&lt;li>Hugoでサイトを生成&lt;/li>
&lt;li>Githubにプッシュ&lt;/li>
&lt;li>Netlifyでデプロイ&lt;/li>
&lt;/ol>
&lt;h2 id="hugoで静的サイトを生成">Hugoで静的サイトを生成&lt;/h2>
&lt;p>まずはHugoをインストールします。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>blogの雛形を作成します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">hugo new site my-blog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ブログに適応するテーマをsubmoduleとして追加します。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> my-blog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># テーマをgithubのsubmoduleとして追加&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>hugo.tomlに記載することでテーマを適応する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34;&lt;/span> &amp;gt;&amp;gt; config.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>サーバを起動させます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">hugo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>起動ログの &lt;code>Web Server is available at http://localhost:51517/ (bind address 127.0.0.1)&lt;/code> のような記述の &lt;code>http://localhost:51517/&lt;/code> にアクセスすればローカルに起動した静的サイトが閲覧できます。&lt;/p>
&lt;h3 id="tips">Tips&lt;/h3>
&lt;ul>
&lt;li>Hugoのテーマを変えたい場合は、&lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>Hugo Themas&lt;/a> から好きなものを選んで変えてください。
&lt;ul>
&lt;li>これは後からでも変えられるのでとりあえずNetlifyでビルドするところまで走り切るのがおすすめ。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tomlファイルの書き方は &lt;a class="link" href="https://gohugo.io/getting-started/configuration/" target="_blank" rel="noopener"
>Configure Hugo&lt;/a> に記載されています。&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="githubにpush">Githubにpush&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/" target="_blank" rel="noopener"
>Github&lt;/a> にリポジトリを作成。&lt;br>
作成後以下のコマンドを実行し、サイトをpushします。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> my-blog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> .hugo_build.lock &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;first commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -M main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;user name&amp;gt;は自分のユーザー名に置き換えてください。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 今回はmy-blogというリポジトリを作成している例です。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add origin git@github.com:&amp;lt;user name&amp;gt;/my-blog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>pushが完了するとGithubのUI上でソースコードが閲覧できる状態になっています。&lt;/p>
&lt;h2 id="netlifyでデプロイ">Netlifyでデプロイ&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.netlify.com/" target="_blank" rel="noopener"
>netlify&lt;/a> へアクセスし、デプロイを行う。&lt;br>
&lt;a class="link" href="https://gohugo.io/hosting-and-deployment/hosting-on-netlify/" target="_blank" rel="noopener"
>Hugoの公式で案内&lt;/a> があるのでこちらを参考に連携を行う。&lt;/p>
&lt;p>指示に従いデプロイを完了すると以下のようにDeployの結果が &lt;code>published&lt;/code> になる。&lt;/p>
&lt;p>&lt;img src="https://bossagyu.com/blog/001-hugo-netlify-build/img-001-001.png"
width="1259"
height="781"
srcset="https://bossagyu.com/blog/001-hugo-netlify-build/img-001-001_hu712c6624ab1de9c2a2e527b803a3005e_132140_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/001-hugo-netlify-build/img-001-001_hu712c6624ab1de9c2a2e527b803a3005e_132140_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="デプロイの実行結果画面"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;p>サイト上に表示されたURLをクリックするとデプロイされたサイトにアクセスできる。
&lt;img src="https://bossagyu.com/blog/001-hugo-netlify-build/img-001-002.png"
width="844"
height="274"
srcset="https://bossagyu.com/blog/001-hugo-netlify-build/img-001-002_hu73c75e92b3844c61fd78de6d6904914d_56626_480x0_resize_box_3.png 480w, https://bossagyu.com/blog/001-hugo-netlify-build/img-001-002_hu73c75e92b3844c61fd78de6d6904914d_56626_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="リンク表示画面"
class="gallery-image"
data-flex-grow="308"
data-flex-basis="739px"
>&lt;/p>
&lt;p>これでデプロイまではおしまい。&lt;br>
以降は変更を加えてmainにpushするだけで自動デプロイが走り、サイトの内容が更新されるようになる。&lt;/p></description></item><item><title>About</title><link>https://bossagyu.com/page/about/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://bossagyu.com/page/about/</guid><description>&lt;h2 id="hi-im-bossagyu">Hi I&amp;rsquo;m Bossagyu&lt;/h2>
&lt;ul>
&lt;li>大手Web系企業マネージャー&lt;/li>
&lt;li>バックエンドエンジニア(5年)→マネジメント職(6年)&lt;/li>
&lt;li>このブログではマネジメントと技術の両面について話していきます&lt;/li>
&lt;/ul>
&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://twitter.com/bossagyu" target="_blank" rel="noopener"
>Twitter(X)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/bossagyu" target="_blank" rel="noopener"
>Github&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="skill">Skill&lt;/h2>
&lt;ul>
&lt;li>Management&lt;/li>
&lt;li>Java, Python, JavaScript, PHP&lt;/li>
&lt;li>cassandra, MySQL&lt;/li>
&lt;li>Data Engineering&lt;/li>
&lt;/ul>
&lt;h2 id="certification">Certification&lt;/h2>
&lt;ul>
&lt;li>2011年 基本情報処理記述者&lt;/li>
&lt;li>2012年 応用情報処理技術者&lt;/li>
&lt;li>2016年 LPIC Level1&lt;/li>
&lt;li>2017年 Certified ScrumMaster&lt;/li>
&lt;li>2019年 Project Management Specialist&lt;/li>
&lt;li>2019年 Certified Management3.0 Attendee&lt;/li>
&lt;li>2020年 Certified LeSS Practitioner&lt;/li>
&lt;li>2021年 ファイナンシャルプランナー3級&lt;/li>
&lt;li>2022年 Advanced Certified ScrumMaster&lt;/li>
&lt;li>2023年 AWS Cloud Practitioner&lt;/li>
&lt;li>2023年 AWS Certified Solutions Architect Associate&lt;/li>
&lt;li>2023年 Certified Product Owner&lt;/li>
&lt;/ul></description></item><item><title>Archives</title><link>https://bossagyu.com/page/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://bossagyu.com/page/archives/</guid><description/></item></channel></rss>